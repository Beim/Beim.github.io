<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[服务学论文-Big-Data-Sensing-and-Services]]></title>
      <url>https://beim.github.io/2016/11/17/%E6%9C%8D%E5%8A%A1%E5%AD%A6%E8%AE%BA%E6%96%87-Big-Data-Sensing-and-Services/</url>
      <content type="html"><![CDATA[<h2 id="词"><a href="#词" class="headerlink" title="词"></a>词</h2><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E5%B0%8D%E6%A9%9F%E5%99%A" target="_blank" rel="external">M2M(机器对机器)- wiki</a></p>
</li>
<li><p><a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=big%20data%20sensing&amp;rsv_pq=b7c3065c00010c8b&amp;rsv_t=470d4YSKnjqSjoG0qupL5GS0%2F1omt1CeIW0RsrjFsrF3GrySKTgEarKypBA&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=15&amp;rsv_sug1=9&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=1675&amp;rsv_sug4=1675" target="_blank" rel="external">big data sensing</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/%E7%84%A1%E7%B7%9A%E6%84%9F%E6%B8%AC%E7%B6%B2%E8%B7%AF" target="_blank" rel="external">WSN(无线感测网络)- wiki</a></p>
</li>
<li><p>SLA(service-level aggrement)服务水平协议</p>
</li>
</ul>
<hr>
<h2 id="摘"><a href="#摘" class="headerlink" title="摘"></a>摘</h2><h3 id="Section1"><a href="#Section1" class="headerlink" title="Section1"></a>Section1</h3><p>阐述的问题</p>
<ul>
<li>What is big data sensing?</li>
<li>Why is it important to us?</li>
<li>What kinds of big data sensing services and application?</li>
<li>What are big data sensing infrastructures, platforms, and services?</li>
<li>What are the current advances and state-of-the-art research work in big data sensing and services?</li>
<li>What are the underlying challenges, issues, and needs?</li>
</ul>
<p>结构</p>
<ul>
<li>Section2 : big data sensing and services 的基本概念, 主要目标, 动机, 研究领域, 利益, classified big data sensing services</li>
<li>Section3 : 讨论不同类型的big data sensing services 和它们的根据现有研究工作的分类</li>
<li>Section4 : 关注big data sensing的基础设施和架构, 提出一个big data sensing services的参考基础设施</li>
<li>Section5 : 提出未来面临的挑战和问题</li>
</ul>
<hr>
<h3 id="Section2"><a href="#Section2" class="headerlink" title="Section2"></a>Section2</h3><p>Big Data Sensing(DBS) ;</p>
<ul>
<li>big data computing &amp; services</li>
<li>sensor cloud computing &amp; services</li>
<li>Sensos and Sensor Networking</li>
</ul>
<p>DBS provide on-demand, scalable and tenant based big data analytics services for diverse domain applications.</p>
<p>Big Data Sensing and Service Rack (bottom up)</p>
<ul>
<li><strong>Resource Pool</strong> (includes <code>sensors</code>, <code>sensor networks</code>, <code>computing and storage servers</code>, <code>internet and mobile networks</code>)</li>
<li><strong>Network infrastructure</strong> (includes <code>wireless networks</code> and <code>Internet</code>.)</li>
<li><strong>Business service models</strong></li>
<li><strong>Deployment Models</strong> (include four different deployment models: <code>private big data sensing</code>, <code>public big data sensing</code>, <code>community big data sensing</code>, <code>hybrid big data sensing</code>)</li>
</ul>
<p>features in big data sensing</p>
<ul>
<li><strong>Big data sensing clouds</strong></li>
<li><strong>Auto data sensing prevision</strong></li>
<li><strong>Big data sensing security</strong>  </li>
<li><strong>On-demand data sensing services</strong></li>
<li><strong>Elastic data sensing scalability</strong></li>
<li><strong>Monitor &amp; measurement and billing</strong></li>
<li><strong>Multi-tenanted access and services</strong></li>
<li><strong>Big sensing data collection and management</strong></li>
<li>virtualization for big data sensing</li>
</ul>
<p>why big data sensing and services</p>
<ul>
<li>reasons to study an develop big data sensing and services</li>
<li>benefits to sensor services vendors and stakeholders</li>
<li>benefits to big data sensing users and application vendors</li>
</ul>
<p>The research scope of Big Data Sensing</p>
<ul>
<li><strong>Big sensing resource tier</strong> (<code>sensors and sensor networks</code>, <code>internet and mobile networks</code>, <code>computing  servers</code>, <code>big data storage servers</code>)</li>
<li><strong>Big sensing infrastructure tier</strong> (this provide users a visualized sensor infrastructure; includes <code>sensors</code>, <code>sensor networks</code>, <code>computing and storage servers</code>, and <code>internet and mobile networks</code>)</li>
<li><strong>Big sensing service tier</strong> (includes three types of services: <code>Big sensing data services</code>, <code>big sensing data platform services</code>, <code>Big sensing data analytics services</code>)</li>
<li><strong>Big sensing application service tier</strong> (this refers to various types of sensor-oriented data application programs)</li>
</ul>
<hr>
<h3 id="Big-Data-Sensing-Services"><a href="#Big-Data-Sensing-Services" class="headerlink" title="Big Data Sensing Services"></a>Big Data Sensing Services</h3><p>One of big data sensing services is to provide a virtualized sensing infrastructure based on a sensor cloud infrastructure</p>
<p>essential features of a sensor cloud:</p>
<ul>
<li><strong>Automatic prevision and management</strong></li>
<li><strong>Sensor/sensor network virtualization</strong></li>
<li><strong>On-demand sensor service</strong></li>
<li><strong>Elastic scalability</strong></li>
<li><strong>Monitor and Measurement</strong></li>
<li><strong>Secured sensor data collection and transmission</strong></li>
<li><strong>SLA-based billing</strong></li>
</ul>
<p><strong>SIaaS</strong> (sensor cloud infrastructure-as-a-service) (Its major objective is to increase the sharing and usage of sensors by reducing the costs)</p>
<p><strong>SDaaS</strong> (Sensing Data Service as a Service) (<code>Stakeholders and users</code>, <code>Data sensing services</code>, <code>Service Model</code>, <code>Data storage services</code>, <code>Service Charging and Billing</code>)</p>
<p><strong>DSPaaS</strong> (Data Sensing Platform as a service)</p>
<hr>
<h3 id="Challenges-issues-and-needs"><a href="#Challenges-issues-and-needs" class="headerlink" title="Challenges, issues, and needs"></a>Challenges, issues, and needs</h3><ul>
<li>Engagement and connectivity to diverse sonsor networks</li>
<li>Lack of standardization</li>
<li>Lack of cost-effective security and privacy solutions in big data sensing</li>
<li>Multi-tenant on-demand big data sensing services (Tenanted based sensor resource virualization; Tenanted based data collection and storage requirements)</li>
<li>QoS big data sensing and analytics services</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[现代服务业案例之菜鸟网络]]></title>
      <url>https://beim.github.io/2016/11/16/%E7%8E%B0%E4%BB%A3%E6%9C%8D%E5%8A%A1%E4%B8%9A%E6%A1%88%E4%BE%8B%E4%B9%8B%E8%8F%9C%E9%B8%9F%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<h1 id="菜鸟网络"><a href="#菜鸟网络" class="headerlink" title="菜鸟网络"></a>菜鸟网络</h1><p>2013年5月28日，阿里巴巴集团、银泰集团联合复星集团、富春控股、顺丰集团、三通一达（申通、圆通、中通、韵达）宅急送、汇通，以及相关金融机构共同宣布，“中国智能物流骨干网”(简称CSN)项目正式启动，合作各方共同组建的“菜鸟网络科技有限公司”正式成立。马云任董事长，张勇任首席执行官。[1] </p>
<h1 id="菜鸟网络提供的服务"><a href="#菜鸟网络提供的服务" class="headerlink" title="菜鸟网络提供的服务"></a>菜鸟网络提供的服务</h1><h2 id="仓配网络"><a href="#仓配网络" class="headerlink" title="仓配网络"></a>仓配网络</h2><p>以覆盖全国的仓配网络与大数据决策平台为基础, 构建专业高效的供应链服务.<br>特点: </p>
<ul>
<li>网络覆盖广, 覆盖全国250个城市, 配送线路超过90000条, 仓储面积超过100万平方米.</li>
<li>时效速度块, 次日达覆盖全国122个城市, 当日达覆盖全国32个城市.</li>
<li>专业仓配服务能力, 支持多行业不同产品的仓配管理需求特性, 具有先进的管理平台与精细化管理标准及流程, 支持全链路运营监控.</li>
<li>优质物流服务体验, 快速到达, 准时服务, 上门取退, 统一售后.</li>
</ul>
<h2 id="跨境网络"><a href="#跨境网络" class="headerlink" title="跨境网络"></a>跨境网络</h2><p>为更好的服务于消费者和商家，菜鸟网络建立了以协同共赢、数据技术赋能为核心的平台，将更多的合作伙伴纳入其中。截至目前，菜鸟网络的跨境物流合作伙伴数量已经有49家，包括燕文、递四方、新加坡邮政、英国邮政、中通、圆通、EMS、IC、斑马等，其物流覆盖能力可至全球224个国家/地区，跨境仓库数量达到74个，搭建起一张真正具有全球配送能力的跨境物流骨干网，订单处理能力达到每天400万单。</p>
<h2 id="快递服务平台"><a href="#快递服务平台" class="headerlink" title="快递服务平台"></a>快递服务平台</h2><p>以数据和连接助力快递生态建设.<br>消费者服务: 货到付款, 物流跟踪, 物流评价.<br>商家服务: 电子面单, 在线下单, 智选物流, 橙诺达.<br>物流商服务: 路由分单, 菜鸟地址库.</p>
<h2 id="农村物流"><a href="#农村物流" class="headerlink" title="农村物流"></a>农村物流</h2><p>商品到村配送, 农副产品销售, 流通及各类商品安装维护等的一站式服务网络.<br>覆盖范围: 28个省/自治区/直辖市, 450+个县, 1.9万个村.</p>
<h2 id="物流云"><a href="#物流云" class="headerlink" title="物流云"></a>物流云</h2><p>以数据和连接驱动物流生态建设, 构建多物种, 多生态的物流服务产品.</p>
<h2 id="菜鸟驿站"><a href="#菜鸟驿站" class="headerlink" title="菜鸟驿站"></a>菜鸟驿站</h2><p>面向消费者的综合物流服务平台, 致力于完善最后100米多元化末端服务.</p>
<h2 id="菜鸟裹裹"><a href="#菜鸟裹裹" class="headerlink" title="菜鸟裹裹"></a>菜鸟裹裹</h2><p>查快递, 寄快递工具.</p>
<h1 id="菜鸟网络的现代服务业特征"><a href="#菜鸟网络的现代服务业特征" class="headerlink" title="菜鸟网络的现代服务业特征"></a>菜鸟网络的现代服务业特征</h1><h2 id="EaaS-万物皆服务"><a href="#EaaS-万物皆服务" class="headerlink" title="EaaS(万物皆服务)"></a>EaaS(万物皆服务)</h2><p>菜鸟网络通过大数据, 建立起一张从全球到中国, 从城市到农村, 从干线到末端的全链路物流网.</p>
<ol>
<li>依靠大数据提供的路由分单服务, 分拣一个包裹只需1-2秒. 往年四面八方的包裹要先集中于分拨中心, 再按收货地址分向下一网点. 稍有延误, 来往的车辆,收发的包裹便会积压拥堵. 而且分拣工需要按照记忆和经验完成, 即便是熟练工, 每单也需要3-5秒. 而如今每个包裹贴着的电子单面上, 有自动生成的路由信息, 分拣员只需要根据简单的数字编码”傻瓜操作”, 每单只需要1-2秒, 正确率也提升到98%以上.</li>
<li>不只是路由分单, 菜鸟网络还推出了物流预警雷达, 通过大数据计算, 可预判消费需求, 分析货品布局, 预测最优路径, 实现”订单还未生成, 包裹先行上路”. 也就是说, 你明天准备上网下单的一件商品, 可能一周前就已经备货在了距离你家最近的仓库, 甚至可能今天就在发往你家的路上. </li>
<li>根据历史订单数据建立起四级地址库, 在库里输入任何一个地址, 系统便可快速识别 应由哪个网点配送, 使”最后一公里”派送更精确更高效.<br>快递行业传统使用的是纸质面单, 人工录入一单至少2分钟; 如今, 依靠电子面单, 只需扫描以下运单号, 发货人, 收货人等链路信息便可自动录入系统, 时间只需一秒.</li>
<li>菜鸟裹裹可以对全网的包裹进行物流查询, 裹裹的查件与以往的查件有非常大的不同, 不再仅限于已完成的物流动态, 还可以根据大数据挖掘分析来预测其到达的时间, 消费者可以对今明日到达的快递一目了然, 方便它们收取包裹以及外出等日常安排. 而在寄件方面, 以往的问题是实际揽收率低, 这与寄件地址是否处于快递公司,快递员密集地区有关, 在稍微偏僻一点的地方,寄件就是一件非常有门槛的事情, 而菜鸟裹裹基于地理位置信息, 帮助快递公司把派件揽件等任务在时间和空间维度上进行高效匹配和动态优化, 把快递公司和消费者的实时信息互动连接起来, 提高揽收的效率.</li>
</ol>
<h2 id="服务聚合"><a href="#服务聚合" class="headerlink" title="服务聚合"></a>服务聚合</h2><ol>
<li>到今年8月, 国内排名前15位的快递公司已经全部使用电子面单, 使用率接近60%, 而一年前, 使用率还不到5%.<br>此前不少快递公司也曾推广各自的电子面单系统, 但是由于需和商家一一进行技术对接, 产生 多次开发成本和时间成本, 普及速度很慢. 为此, 菜鸟网络联合15家快递公司推出标准化的电子公共平台, 向商家开放免费申请接入. 接入平台后, 快递商家切实感受到便利. 以前, 自有系统无法对电商卖家统一支持; 现在, 各个卖家在系统下单时选择商家后, 订单信息将自动 发至后台系统, 还可将订单和运单号只能匹配, 实现了即时查询和对账.</li>
<li>社区范围内的投递是物流链路中最接近消费者的环节, 直接影响到用户的最终体验. 但传统的投递方式难以面对消费者端的多样化需求和多种突发状况, 这’最后一公里’的物流投递成本会不可避免的上升. 因此菜鸟网络介入物流的末端, 建立’菜鸟驿站’. 一方面, 菜鸟驿站可以提供代收包裹服务, 避免用户不在家时带来的落地配时间成本的上升, 类似自提柜的作用. 另一方面, 菜鸟驿站还可以替快递公司揽件, 整合零散的寄件需求, 提高快递公司的揽件效率.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[软件开发过程与项目管理]]></title>
      <url>https://beim.github.io/2016/11/15/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<p>40% 平时<br>60% 考试<br>开卷</p>
<p>Attributes of Projects</p>
<ul>
<li><p>Has a unique purpose</p>
</li>
<li><p>Is temporay - Has a beginning and end</p>
</li>
<li><p>Is developed using progressive elaboration</p>
</li>
<li><p>Require resources, often from various areas</p>
</li>
<li><p>Should have a primary sponsor and/or customer</p>
<ul>
<li>The project sponsor usually provides the direction and funding for the project</li>
</ul>
</li>
</ul>
<h2 id="IT-Project-Management"><a href="#IT-Project-Management" class="headerlink" title="IT Project Management"></a>IT Project Management</h2><p><strong>stakeholders</strong><br><strong>9 Project Management Knowledge Areas</strong>(core functions)(facilitating knowledge)</p>
<blockquote>
<p>Microsoft Project 2010+</p>
</blockquote>
<h2 id="Project-integration"><a href="#Project-integration" class="headerlink" title="Project integration"></a>Project integration</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu下安装chromium]]></title>
      <url>https://beim.github.io/2016/11/14/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85chromium/</url>
      <content type="html"><![CDATA[<h1 id="chromium"><a href="#chromium" class="headerlink" title="chromium"></a>chromium</h1><h2 id="下载chromium"><a href="#下载chromium" class="headerlink" title="下载chromium"></a>下载chromium</h2><p>从<a href="https://github.com/scheib/chromium-latest-linux" target="_blank" rel="external">github</a>上下载这几个脚本<br>放置在<code>/usr/local/src/</code>目录下</p>
<p>运行<code>./update.sh</code><br>此时将最新版本的chromium下载到了<code>/usr/local/src/chromium-latest-linux/latest</code>目录下</p>
<h2 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h2><p><code>vi ~/.bashrc</code><br>在最后添加<br><code>alias chromium=&#39;/usr/local/src/chromium-latest-linux/run.sh&#39;</code></p>
<p>这时在终端中输入<code>chromium</code>即可打开chromium浏览器</p>
<h2 id="更新chromium"><a href="#更新chromium" class="headerlink" title="更新chromium"></a>更新chromium</h2><p>只需要再运行<code>chromium-latest-linux</code>目录下的<code>update.sh</code>脚本就可以了</p>
<h2 id="更改desktop下的chromium"><a href="#更改desktop下的chromium" class="headerlink" title="更改desktop下的chromium"></a>更改desktop下的chromium</h2><p><code>~/.local/share/applications</code>下找<code>chromium-browser.desktop</code>文件, 看其中的参数是否和安装的<code>run.sh</code>中的参数相同</p>
<hr>
<h1 id="flash"><a href="#flash" class="headerlink" title="flash"></a>flash</h1><h2 id="下载adobe-flash"><a href="#下载adobe-flash" class="headerlink" title="下载adobe flash"></a>下载adobe flash</h2><p>从<a href="https://get.adobe.com/cn/flashplayer/?no_redirect" target="_blank" rel="external">flash 官网</a>下载合适版本的flash<br>解压到<code>/usr/local/src/chromium-latest-linux/flash</code>目录下<br>将其中的<code>libpepflashplayer.so</code>复制到<code>/usr/local/src/chromium-latest-linux/latest</code>目录下</p>
<h2 id="启用flash"><a href="#启用flash" class="headerlink" title="启用flash"></a>启用flash</h2><p>修改<code>run.sh</code>, <code>vi ./run.sh</code><br>将其中的<code>$BASEDIR/latest/chrome --user-data-dir=&quot;$BASEDIR/user-data-dir&quot; $* &amp;&gt; /dev/null &amp;</code><br>改为<code>$BASEDIR/latest/chrome --ppapi-flash-path=&quot;$BASEDIR/latest/libpepflashplayer.so&quot; --user-data-dir=&quot;$BASEDIR/user-data-dir&quot; $* &amp;&gt; /dev/null &amp;</code></p>
<p>打开chromium, 进入<code>chrome://plugins</code>, 找到<code>Adobe Flash Player</code>, 点击<code>允许始终运行</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计网实验准备]]></title>
      <url>https://beim.github.io/2016/11/08/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E5%87%86%E5%A4%87/</url>
      <content type="html"><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a><strong>实验目的</strong></h1><p>(1)按照图 4-1 所示,将网络设备用适当的线路连接好,注意 console 控制线和双绞<br>线不要混淆。<br>(2)通过“超级终端”软件连接到路由器或交换机的控制口,进入 IOS 系统。初步了<br>解 IOS 系统特性,为路由器或交换机配置名称、密码等,启用 telnet 服务,使以后的配置可<br>以通过 telnet 方式进行。<br>(3)通过 telnet 方式进入 IOS 的 CLI 配置界面,分别对三台网络设置进行适当的配置,<br>使局域网的四台计算机可以互相 ping 通。</p>
<h1 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a><strong>实验说明</strong></h1><ul>
<li>本次实验划分了4个子网，分别为192.168.1.0/24,  2.2.2.0/24,  1.1.1.0/24,  202.118.232.0/24</li>
<li>PC1, PC2, PC3, PC4均处于单独的冲突域中，因为它们都通过网络设备(交换机和三层交换机)隔开了，只有共享介质的设备(通过集线器连接)才处于同一冲突域。</li>
<li>PC1和PC2在同一广播域，因为他们通过二层交换机相连，处于同一子网。PC3和PC4分别在单独的广播域中，因为他们处于不同的子网。</li>
</ul>
<h1 id="直通线和交叉线的区别"><a href="#直通线和交叉线的区别" class="headerlink" title="直通线和交叉线的区别"></a><strong>直通线和交叉线的区别</strong></h1><p>直通线，两端线序一样。<br>交叉线，一端为直通线的线序，另一端为白绿，绿，白橙，蓝，白蓝，橙，白棕，棕。<br>同种类型设备之间使用交叉线连接, 不同类型设备使用直通连接. <a href="http://www.360doc.com/content/10/0910/18/3266301_52693210.shtml" target="_blank" rel="external">http://www.360doc.com/content/10/0910/18/3266301_52693210.shtml</a></p>
<h1 id="telnet-和超级终端"><a href="#telnet-和超级终端" class="headerlink" title="telnet 和超级终端"></a><strong>telnet 和超级终端</strong></h1><p>通过telnet设置交换机是通过网络登录交换机，也叫带内管理，要求先配置交换机能登录及你电脑能通过网络连接访问到交换机。通过超级终端配置是电脑com口连接交换机console设置，不需要通过网络连接，故叫带外管理。通常初始设置要通过超级终端设置，设置好了后就可以通过telnet设置了。</p>
<h1 id="vlan"><a href="#vlan" class="headerlink" title="vlan"></a><strong>vlan</strong></h1><p>创建vlan(检查配置 show vlan)<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># vlan database <span class="comment">// 建立vlan</span></span></div><div class="line">(vlan)<span class="meta"># vlan vlan-num name vlan-name <span class="comment">// 给vlan命名, 编号为vlan-num, 名称为vlan-name</span></span></div><div class="line">(vlan)<span class="meta"># exit</span></div><div class="line"><span class="comment">// # no vlan vlan-num // 删除vlan 20</span></div><div class="line"></div><div class="line"><span class="comment">// 进入接口, 为接口分配vlan</span></div><div class="line"><span class="meta"># configure terminal</span></div><div class="line">(<span class="built_in">config</span>)<span class="meta"># interface interfaceName module/number </span></div><div class="line"><span class="comment">// (config)# interface fastEthernet 0/0 // 进入接口快速以太网0槽位的0号端口</span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># switchport mode access <span class="comment">// 设置端口为access 模式, 交换机的端口模式分为access, trunk, multi模式, 默认情况是access模式.</span></span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># switchport access vlan vlan-num <span class="comment">// 将端口分配给vlan-num对应的vlan</span></span></div><div class="line"><span class="comment">// (config-if)# switchport access vlan 2 // 将端口映射到 Vlan 2</span></div><div class="line"><span class="comment">// # show interface f0/0 // 查看快速以太网0/0端口的信息</span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># end</span></div><div class="line"></div><div class="line"><span class="meta"># configure terminal</span></div><div class="line">(<span class="built_in">config</span>)<span class="meta">#interface range fastEthernet 0/6-10 <span class="comment">// 选择接口0模块的6-10模块</span></span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># switchport mode access <span class="comment">// 将交换机端口模式设置为access模式</span></span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># swtichport access vlan 10 <span class="comment">// 将0模块的6-10端口划分为vlan10</span></span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># exit</span></div><div class="line"><span class="meta"># configure terminal</span></div><div class="line">(<span class="built_in">config</span>)<span class="meta"># interface fastEthernet 0/11-15</span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># switchport mode access</span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># switchport access vlan 20</span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># exit</span></div></pre></td></tr></table></figure></p>
<p><code>no switchport</code>(把物理端口变成三层口, 即把三层口当成路由器上的口, 当将一个端口配置成三层端口之后, 就可以在此端口上分配IP地址了)<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># configure terminal</span></div><div class="line">(<span class="built_in">config</span>)<span class="meta"># interface gigabitethernet 0/2</span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># no switchport</span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># ip address 192.20.135.21 255.255.255.0 <span class="comment">// 配置ip地址</span></span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># no shutdown <span class="comment">// 激活接口</span></span></div><div class="line">(<span class="built_in">config</span>-<span class="built_in">if</span>)<span class="meta"># end</span></div></pre></td></tr></table></figure></p>
<p>show interfaces [interface-id] switchport // 显示二层端口的状态, 可以用来决定此口是否为二层或三层口<br><code># show interfaces fastethernet 0/1 swtichport</code></p>
<p><code>在三层交换机上开启路由功能</code><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># configure terminal</div><div class="line">(config)# ip routing <span class="comment">// 开启路由</span></div><div class="line"></div><div class="line"># configure terminal</div><div class="line">(config)# ip route <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.252</span> <span class="comment">// 设置子网掩码,网关</span></div><div class="line">(config)# ip route <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">202.118</span><span class="number">.232</span><span class="number">.254</span> <span class="comment">// 设置缺省路由</span></div></pre></td></tr></table></figure></p>
<p><img src="http://www.cisco.com/image/gif/paws/41860/howto_3550_intervlanrouting.gif" alt="cisco"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法设计与分析-笔记]]></title>
      <url>https://beim.github.io/2016/11/08/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>作业30%<br>考试70%</p>
<p><strong>计算复杂性函数的阶</strong><br>阶<br>logn &lt; n^x &lt; x^n &lt; n!<br>log2n = log3n<br>2^n &lt; 3^n</p>
<p><strong>和式的估计与界限</strong></p>
<p><strong>递归方程</strong></p>
<p><strong>主定理</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS-for-in遍历和prototype]]></title>
      <url>https://beim.github.io/2016/11/04/JS-for-in%E9%81%8D%E5%8E%86%E5%92%8Cprototype/</url>
      <content type="html"><![CDATA[<pre><code>for (let i in arr) 
</code></pre><p>会将原型链上面的属性也一一遍历<br>所以在这时候修改 <code>Array.prototype</code><br>如</p>
<pre><code>Array.prototype.top = () =&gt; {...}
</code></pre><p>则i会遍历到top属性</p>
<p>= = 被这个略坑了一把</p>
<p>以后要注意不要扩展内置类型的原型, 或者for in 遍历时使用hasOwnProperty 进行筛选</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" target="_blank" rel="external">MDN-属性的可枚举性和所有权</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[文献检索-笔记]]></title>
      <url>https://beim.github.io/2016/11/04/%E6%96%87%E7%8C%AE%E6%A3%80%E7%B4%A2-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>考勤 30%<br>实习作业 70%</p>
<h1 id="文献类型"><a href="#文献类型" class="headerlink" title="文献类型"></a>文献类型</h1><ul>
<li>科技图书</li>
<li>科技期刊</li>
<li>会议文献</li>
<li>科技报告</li>
<li>学位论文</li>
</ul>
<h1 id="信息检索技术"><a href="#信息检索技术" class="headerlink" title="信息检索技术"></a>信息检索技术</h1><p>分类检索语言</p>
<p>布尔逻辑检索 (AND OR NOT)<br>截词检索<br>位置检索 (W, nW, N, nN, S, F)<br>字段限定检索 (后缀方式, 前缀方式)</p>
<p>信息检索的常用方法与步骤</p>
<h1 id="EI数据库的检索-Engineering-Index"><a href="#EI数据库的检索-Engineering-Index" class="headerlink" title="EI数据库的检索(Engineering Index)"></a>EI数据库的检索(Engineering Index)</h1><p><strong>常用的评价资源: 著名三大检索系统</strong></p>
<ul>
<li>工程索引(EI)</li>
<li>科学引文索引(SCI)</li>
<li>科技会议录索引(ISTP)</li>
</ul>
<p>检索字段说明(Search Fields)<br>Author affiliation<br>Publisher<br>Source title<br>Title<br>EI controlled term<br>EI main heading</p>
<p>文献类型限定<br>文献处理类型限定<br>检索时间限定</p>
<p>自动取词根<br>检索结果排序</p>
<p>检索规则</p>
<ul>
<li>逻辑算符</li>
<li>截词符</li>
<li>词组检索</li>
<li>位置算符</li>
<li>平台不区分大小写</li>
<li>在无检索符链接的情况下, 默认与关系</li>
</ul>
<p>作者检索</p>
<ul>
<li>(姓在前, 接着逗号, 然后名字, 逗号可省略, 如 huang, wenhu 或 huang wenhu)</li>
<li>(huang, w.h)</li>
<li>(huang, wen-hu)</li>
<li>(wenhu, huang)</li>
<li>作者名字后可以使用截词符截断</li>
</ul>
<p>快速检索</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[修改next主题]]></title>
      <url>https://beim.github.io/2016/11/02/%E4%BF%AE%E6%94%B9next%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="自定义css"><a href="#自定义css" class="headerlink" title="自定义css"></a>自定义css</h1><p>下面目录是为自定义css 文件准备<br>    themes/next/source/css/_custom/</p>
<h1 id="自定义js"><a href="#自定义js" class="headerlink" title="自定义js"></a>自定义js</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">cd</span> themes/<span class="keyword">next</span>/layout/_scripts</div><div class="line"></div><div class="line">$ <span class="built_in">mkdir</span> myscript</div><div class="line"></div><div class="line">$ touch myscript/myscript.swig</div><div class="line"></div><div class="line">$ <span class="keyword">vi</span> myscript/myscript.swig</div><div class="line">添加  &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/beim/test.js"</span>&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">$ <span class="keyword">vi</span> themes/<span class="keyword">next</span>/layout/_layout.swig</div><div class="line">添加 &#123;% include <span class="string">'_scripts/myscript/myscript.swig'</span> %&#125;</div><div class="line"></div><div class="line">$ <span class="keyword">cd</span> themes/<span class="keyword">next</span>/<span class="keyword">source</span>/js/src</div><div class="line"></div><div class="line">$ makir beim</div><div class="line"></div><div class="line">$ touch beim/test.js</div><div class="line"></div><div class="line">$ <span class="keyword">vi</span> beim/test.js</div><div class="line">添加 console.<span class="built_in">log</span>(<span class="string">'HELO'</span>)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[服务学概论-笔记]]></title>
      <url>https://beim.github.io/2016/11/02/%E6%9C%8D%E5%8A%A1%E5%AD%A6%E6%A6%82%E8%AE%BA-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="现代服务产业与服务学"><a href="#现代服务产业与服务学" class="headerlink" title="现代服务产业与服务学"></a>现代服务产业与服务学</h1><p>什么是现代服务业</p>
<ul>
<li>基础服务 (通信服务和信息服务)</li>
<li>生产服务 (制造服务, 产品服务, 物流, 金融等)</li>
<li>生活服务 (医疗\保健, 教育, 旅游, 住宿)</li>
<li>公共服务 (政府的公共管理服务, 基础教育, 公共卫生)</li>
</ul>
<hr>
<h2 id="现代服务业的发展趋势"><a href="#现代服务业的发展趋势" class="headerlink" title="现代服务业的发展趋势"></a>现代服务业的发展趋势</h2><ul>
<li><p>服务外包 (将非核心的业务外包出去)</p>
</li>
<li><p>服务聚合 (将分散的,相互独立的服务整合在一起, 形成新的服务, 创造新的服务价值.)(例如: 百度地图, 优酷, 淘宝, 百度)<br><strong>BIRIS 模式</strong>(Bilateral Resource Integrated Service)<br>一种基于第三方的双边顾客资源整合的服务聚合创新模式</p>
</li>
<li><p>服务虚拟化, 万物皆服务(EaaS)(将实体服务变为虚拟服务, 例如: 云计算)</p>
<blockquote>
<p>遗存系统(legacy system)<br>适配器(接口)<br>Human as a Service</p>
</blockquote>
</li>
<li><p>社会化, 位置化移动化(<strong>SOLOMO</strong>, Social, Local, Mobile, 社交 + 位置化/本地化 + 移动)(例如: 微信, 支付宝, 微博)<br>SoLoMo + 娱乐 =&gt; 改写社交<br>SoLoMo + O2O =&gt; 改写零售</p>
</li>
</ul>
<hr>
<h2 id="服务案例"><a href="#服务案例" class="headerlink" title="服务案例"></a>服务案例</h2><p><strong>案例: 物流服务</strong><br>第一方物流/第二方物流(产商, 客户)<br>第三方物流(顺丰, 申通)<br>第四方物流(菜鸟物流)</p>
<p><strong>案例: 航空售票服务</strong><br>机票直销<br>机票代售点<br>第三方代理商(携程: 客户-航空公司)<br>第四方代理商(去哪儿: 客户-第三方/代售点)</p>
<blockquote>
<p>中航信</p>
</blockquote>
<p><strong>案例: 呼叫中心服务</strong><br>专家:有高技能的人守在电话旁(1970)<br>工具: 接线员无需高技能, 使用FAQ手册(1980)<br>市场: 低成本外包(在印度建立呼叫中心)(2000)<br>Automate(2010)</p>
<p><strong>案例: 商品零售服务</strong><br>小卖店<br>百货商店<br>连锁店<br>大型连锁超市</p>
<p><strong>案例: 在线信息共享服务</strong><br>论坛<br>BBS<br>博客<br>微博<br>微信</p>
<p><strong>服务外包企业案例: 印度Bangalore 的服务外包</strong><br>基础操作的外包服务<br>中断技能型的外包服务(人力资源, 财务外包)<br>高端智力型外包服务(研发设计, 数据挖掘)</p>
<p><strong>企业服务案例: IBM的IT服务管理</strong><br>从销售大型服务器, 硬件设备, 软件产品的IT厂商<br>转变为<br>全球最大的IT服务提供商</p>
<p><strong>服务聚合企业案例: 携程网</strong><br>机票<br>车票<br>酒店<br>门票</p>
<p><strong>服务聚合企业案例: COSCO(中国远洋物流有限公司)</strong> (中国最大的第三方物流企业)</p>
<blockquote>
<p>海运物流</p>
</blockquote>
<p><strong>EaaS企业案例: 亚马逊</strong><br>从用户书评中挖掘信息<br>开放API, 允许处理用户,收藏列表和购物车, 允许对亚马逊产品目录主要产品的访问, 其他公司或者个人的应用系统可以直接调用Amazon API<br>云基础设施服务, Amazon EC2, S3, SQS</p>
<p><strong>EaaS企业案例: Rolls-Royce的 TotalCare</strong><br>卖产品-&gt; 卖服务</p>
<p><strong>EaaS企业案例: 健康医疗保健服务</strong><br>监控 - 评估 - 规划 - 治疗</p>
<p><strong>SoLoMo企业案例: SNS社交网络服务</strong><br>人人网<br>微信<br>知乎</p>
<p><strong>SoLoMo企业案例: 基于位置的服务LBS</strong><br><a href="http://baike.baidu.com/item/LBS/1742" target="_blank" rel="external">LBS</a><br>Foursquare 街旁 在哪等待</p>
<p><strong>SoLoMo企业案例: 情境感知的服务</strong><br>通过传感器采集服务对象的情境信息<br>根据情境信息判断对象的状态, 提供响应的服务</p>
<p><strong>SoLoMo企业案例: 面向云服务交付的移动应用</strong><br>典型代表: 云手机(阿里, 华为), 用友移动mERP</p>
<p><strong>SoLoMo企业案例: LBS+购物信息推送</strong><br>美团, 大众点评</p>
<p><strong>SoLoMo企业案例: 地铁虚拟货架</strong></p>
<p><strong>SoLoMo企业案例: SNS+电子商务服务</strong><br>微商</p>
<h2 id="服务的概念-特征与分类"><a href="#服务的概念-特征与分类" class="headerlink" title="服务的概念, 特征与分类"></a>服务的概念, 特征与分类</h2><h3 id="服务概念"><a href="#服务概念" class="headerlink" title="服务概念"></a>服务概念</h3><p>Philip Kotler: 服务是一方向另一方提供的任意活动或好处. 它是不可触知的, 不形成所有权问题, 其生产可能与物质产品有关, 也可能无关.</p>
<p>ISO 9004-2: 服务是为满足客户需要, 供方与顾客接触的活动和供方内部活动所产生的结果</p>
<p>其他: 服务是供应商与客户协同工作以转换某对象(如商品, 信息)的<strong>状态</strong>, 这些客户具有某种隶属关系.</p>
<p>其他: 服务是一种客户直接参与其中作为合作生产者的时间<strong>易逝性</strong>的无形体验.<br>(水杯是产品, 水杯可供人喝水是服务)</p>
<p>服务: 一种促进顾客发生”改变” 的过程, 这种”改变” 包括物理的和无形的占有物的状态改善</p>
<p>“IT使能业务服务” 常用服务运作模型和计费模式来刻画.</p>
<p>服务的内涵:</p>
<ul>
<li>顾客, 提供者(可能是人, 软件, 资源等)</li>
<li>价值(有形的(产品, 信息, 金钱, 资源等), 无形的(经验, 知识, 享受, 影响力等))</li>
<li>协同生产(复制的交互过程)</li>
</ul>
<blockquote>
<p>服务的特性: 无形性, 生产消费同步性, 非储存性, 差异性</p>
</blockquote>
<p>服务的表示: 服务运作模型(如何完成), 计费模型(服务如何收费)</p>
<p>对IT使能(IT化)的理解: <strong>过程的封装</strong><br>栗子: B2B服务: 买方卖方, B2B平台之间的交互, 完成电子商务功能和过程;<br>Web Service: 客户端与服务器端程序之间的交互</p>
<p>服务内在特征:</p>
<ul>
<li>多方之间</li>
<li>交互</li>
<li>实现各自目标</li>
<li>付出代价</li>
</ul>
<p>服务的六个侧面<br>组织-行为-技术-信息-价值-质量</p>
<p>服务提供者和顾客之间的关系</p>
<ul>
<li>顾客参与服务过程</li>
<li>协同创造价值</li>
<li>服务质量取决于顾客的需求,期望和感受</li>
</ul>
<h3 id="服务的分类模式"><a href="#服务的分类模式" class="headerlink" title="服务的分类模式"></a>服务的分类模式</h3><p><code>按照以下方式进行分类</code></p>
<ul>
<li><p><em>服务过程</em>(按照<code>劳力密集程度</code>, <code>交互性/客户化</code>的程度 两个维度来划分)(<em>服务工厂</em>(航空,旅馆), <em>服务商店</em>(医院,汽车维修), <em>大规模服务</em>(零售业, 学校), <em>职业化服务</em>(IT,医生,律师))</p>
</li>
<li><p><em>服务行为的本质</em>(<code>按照服务行为的本质</code>(有形,无形), <code>服务的接受者</code>(人, 事物) 两个维度划分)</p>
</li>
<li><p><em>服务提供者与顾客之间的关系</em>(<code>客户关系的类型</code>(会员,非会员), <code>服务交互的类型</code>(离散的, 连续的))</p>
</li>
<li><p><em>服务的可提供性</em>(<code>服务地点的数目</code>(单一地点, 多地点), <code>客户与服务提供者之间交互所发生的地点</code>(客户移动(宾馆), 提供者移动(网约车), 在客户可达范围内(手机信号)))</p>
</li>
<li><p><em>服务需求的可变性</em>(<code>需求波动情况</code>(大,小), <code>服务能力的限制</code>(高峰需求时无延迟, 高峰需求时超过能力))</p>
</li>
<li><p><em>服务交付的方式</em>(<code>定制化程度</code>(高, 低), <code>服务雇员能力的重要性</code>(高,低))</p>
</li>
<li><p><em>服务自动化的程度</em>(<code>谁来做</code>(人/工具), <code>完成程度</code>(全部,部分))</p>
</li>
</ul>
<p><code>!服务的特性</code></p>
<ul>
<li><p><em>不可分离性</em>(生产与消费同时进行)(服务无法被存储)(无法通过库存来解决需求波动问题)(在消费之前无法进行质量控制)</p>
</li>
<li><p><em>不可贮存性</em>(任何服务能力如果不被使用,那么它将无法再使用)(服务无法存储,所以当服务能力不足时,提供者将失去机会)<br>(春节期间快递行业的困扰, 服务能力不足)(策略1: 根据需求调整能力(提高快递工人工资水平,招收更多快递工人, 或共享产能:如顺丰和EMS工人共享), 策略2: 通过能力引导需求(改变用户购物习惯, 尽量将春节的购物需求引导到春节前后, 提高商品价格或提高快递价格))</p>
</li>
<li><p><em>异构性</em>(从顾客的角度看, 服务有很大不同)(服务的个性化-&gt;异构性)(不同顾客所感知到的服务质量都是不同的)</p>
</li>
<li><p><em>无形性</em>(服务没有具体的物质存在形式)(顾客通常需要借助服务提供者的名声和对其的信任来预测服务质量,进而做出选择)(规则和法律使服务质量达到标准)</p>
<blockquote>
<p>为了进行质量控制, 要追求标准化, 又和异构性产生冲突, 怎么解决?</p>
</blockquote>
</li>
</ul>
<p>基于服务本质特征的服务分类(服务本质特征: 服务提供者, 顾客, 交互, 价值目标)</p>
<ul>
<li>人工服务(人来执行的服务)</li>
<li>软件服务(自动化软件来执行的服务)</li>
<li>复合服务(二者结合在一起的服务)</li>
</ul>
<p><strong>服务接触的三种类型</strong></p>
<ul>
<li>服务组织支配的服务接触()</li>
<li>与顾客接触的员工支配的服务接触(医院-医生-病人)</li>
<li>顾客支配的服务接触(自助服务)</li>
</ul>
<p><strong>排队系统的基本特征</strong></p>
<hr>
<h2 id="服务学概述"><a href="#服务学概述" class="headerlink" title="服务学概述"></a>服务学概述</h2><h3 id="服务科学-管理与工程-SSME"><a href="#服务科学-管理与工程-SSME" class="headerlink" title="服务科学, 管理与工程(SSME)"></a>服务科学, 管理与工程(SSME)</h3><p><strong>SSME</strong> (Service Science, Management and Engineering): 服务科学, 管理与工程, 将科学, 管理, 工程相关学科知识应用与服务领域的一门新的交叉学科, 后在中国被称为<strong>服务学</strong>(Serviceology)</p>
<p>目标: 改善服务及服务系统</p>
<p>方式: 改善服务在生产率, 质量, 性能, 增长点, 创新等方面的可预测性与可调控性</p>
<p>服务学三大组成部分</p>
<ul>
<li>服务科学(SS)(分析现实服务世界的现象,数据, 转换为知识)</li>
<li>服务工程(SE)(将知识解决实际服务问题, 创造价值)</li>
<li>服务管理(SM)(监视与分析创造服务价值的过程, 对服务进行有效管理优化和改善, 使其进一步增值.)</li>
</ul>
<h3 id="服务科学-Service-Science"><a href="#服务科学-Service-Science" class="headerlink" title="服务科学(Service Science)"></a>服务科学(Service Science)</h3><p>研究对象: 现实世界中有关服务的现象、数据与信息(即服务系统)。</p>
<p>目的: 建立一套严格、完备、理论化的服务模型及其理论，从各类服务系统中抽象出其内在、本质的规律，使服务提供者和需求者能深入理解和认识服务，并采用科学的方法来指导服务系统的设计、构建与运作。</p>
<h3 id="服务管理-Service-Management"><a href="#服务管理-Service-Management" class="headerlink" title="服务管理(Service Management)"></a>服务管理(Service Management)</h3><p>应用服务科学的相关理论、模型和方法，研究服务系统的运作机制及管理方法，改善服务质量，提高顾客的体验与满意度。</p>
<h3 id="服务工程-Service-Engineering"><a href="#服务工程-Service-Engineering" class="headerlink" title="服务工程(Service Engineering)"></a>服务工程(Service Engineering)</h3><p>运用服务科学相关理论和知识，面向服务生命周期，描述和定义、设计、建立、实施、运行维护和动态重构服务系统，并提供相关服务系统支撑工具和平台/环境，进而创造服务价值。</p>
<h3 id="软件服务工程及其学科范畴"><a href="#软件服务工程及其学科范畴" class="headerlink" title="软件服务工程及其学科范畴"></a>软件服务工程及其学科范畴</h3><p>服务工程相关内容</p>
<ul>
<li>服务开发方法</li>
<li>服务发布与运作方法</li>
<li>服务计算</li>
</ul>
<h3 id="软件服务工程的知识体系"><a href="#软件服务工程的知识体系" class="headerlink" title="软件服务工程的知识体系"></a>软件服务工程的知识体系</h3><ul>
<li>服务体系结构与设计</li>
<li>服务使能技术</li>
<li>服务业务分析</li>
<li>服务管理</li>
<li>服务应用实践</li>
</ul>
<h3 id="服务工程与服务计算"><a href="#服务工程与服务计算" class="headerlink" title="服务工程与服务计算"></a>服务工程与服务计算</h3><ul>
<li><p>微观层面的分布式计算</p>
</li>
<li><p>宏观层面的商务计算</p>
</li>
</ul>
<p>服务计算知识体系</p>
<ul>
<li>服务与服务系统</li>
<li>服务技术</li>
<li>服务咨询与提交</li>
<li>服务解决方案与管理</li>
</ul>
<p><strong>服务计算与服务工程的关系</strong>(前者为后者提供业务, IT个层面服务系统的实现技术; 后者为前者提供了系统工程方法论上的支持)</p>
<hr>
<h1 id="服务工程方法论及服务建模"><a href="#服务工程方法论及服务建模" class="headerlink" title="服务工程方法论及服务建模"></a>服务工程方法论及服务建模</h1><h2 id="服务系统及生命周期"><a href="#服务系统及生命周期" class="headerlink" title="服务系统及生命周期"></a>服务系统及生命周期</h2><p>系统是指将零散的东西进行有序的整理,编排形成的具有整体性的整体–百度百科</p>
<p><code>系统的九大组成要素</code></p>
<ul>
<li>顾客</li>
<li>目标</li>
<li>输入 (系统要处理的各类物理,人,经济或信息的实体)</li>
<li>输出 (系统处理之后形成的各类物理,人或信息的实体)</li>
<li>过程 (从输入到输出的转换)</li>
<li>人力使能者 (拥有或操作系统的人)</li>
<li>物理使能者 (协助系统运行的物理资源)</li>
<li>信息使能者 (支持系统的信息或知识资源)</li>
<li>环境 (对系统产生影响的各类因素)</li>
</ul>
<p><code>IBM 对服务系统构成要素的观点</code>(在不同服务系统中三种占比有所不同)</p>
<ul>
<li>人</li>
<li>技术</li>
<li>共享信息</li>
</ul>
<p><code>服务系统的要素</code></p>
<ul>
<li><strong>服务参与者</strong>(包括顾客,服务提供者等)(服务参与者具有特定的<em>价值需求</em>, 掌握特定的<em>服务资源</em>, 可发出<em>服务行为</em>, 通过<em>信息共享</em>完成服务)(参与者可分为: 顾客,提供者,使能者)</li>
<li><strong>服务资源</strong>(软件,硬件或设备, 资源的能力, 服务环境)(是被动参与服务的各类支持性资源(Enabling Resources)，具备特定的能力(Capability)，在服务主体的控制下可向外提供特定的行为(Behavior)。)(产品型资源, 独占型资源, 共享型资源, 可复用资源, 消耗型资源)</li>
<li><strong>服务信息</strong>(刻画了服务交互行为过程中被创造或采集的各类信息(Shared Information)，并在服务参与者之间、资源与参与者之间相互传递和使用。)(分为<em>资源类信息</em>(如航线信息, 报价信息)和 <em>指令类信息</em>(如海运物流中的订单))</li>
<li><strong>服务交互行为</strong>(交互过程, 活动与动作)</li>
</ul>
<p><code>服务价值网</code>(service value network)(描述服务参与者之间价值交换关系的有向网络结构)</p>
<ul>
<li>节点(表示服务参与者)</li>
<li>有向边(表示参与者之间的价值交换关系及其方向)</li>
<li>边的内容(被交换的价值(产品, 知识, 金钱, 经验, 市场影响等))</li>
</ul>
<p><code>服务价值网中的价值交换模式</code>(直达顾客模式DCP)(外包链模式OCP)(聚合/聚集模式MAP)</p>
<blockquote>
<p>BlockChain(区块链)</p>
</blockquote>
<p><strong>软件系统的声明周期</strong><br>用户提出需求- 需求分析- 系统设计- 系统开发- 测试- 软件实施- 软件运行- 软件维护- 软件报废</p>
<p><strong>服务系统的狭义生命周期</strong><br>从系统运行的角度:服务价值的生命周期</p>
<ul>
<li>双方找寻</li>
<li>双方协商</li>
<li>单方准备</li>
<li>协同生产</li>
<li>传递</li>
<li>使用</li>
<li>支付</li>
</ul>
<h2 id="服务工程与方法论"><a href="#服务工程与方法论" class="headerlink" title="服务工程与方法论"></a>服务工程与方法论</h2><h3 id="系统工程与服务工程"><a href="#系统工程与服务工程" class="headerlink" title="系统工程与服务工程"></a>系统工程与服务工程</h3><p>软件工程–系统工程的具体化<br>在’软件工程’基础上的服务工程</p>
<p>服务工程核心–服务方法论</p>
<h3 id="服务工程方法论"><a href="#服务工程方法论" class="headerlink" title="服务工程方法论"></a>服务工程方法论</h3><p><strong>要素</strong></p>
<ul>
<li>服务模型</li>
<li>服务建模方法</li>
<li>服务系统构建方法</li>
<li>服务性能评价</li>
<li>支撑工具与平台</li>
<li>服务系统实施指南</li>
</ul>
<h4 id="服务模型"><a href="#服务模型" class="headerlink" title="服务模型"></a>服务模型</h4><p>作用</p>
<ul>
<li>表示服务与模型映射</li>
<li>沟通交流与协同设计</li>
</ul>
<p>主要研究内容:</p>
<ul>
<li>图形化表示规范, 多视图模型之间的关系</li>
<li>形式化模型语义描述及语义约束</li>
<li>数学化模型优化</li>
</ul>
<blockquote>
<p>业务过程管理 BPM(Business Process Management)</p>
</blockquote>
<h4 id="服务建模方法"><a href="#服务建模方法" class="headerlink" title="服务建模方法"></a>服务建模方法</h4><h4 id="服务系统构建"><a href="#服务系统构建" class="headerlink" title="服务系统构建"></a>服务系统构建</h4><p>典型的服务系统构建方法</p>
<ul>
<li>自顶向下</li>
<li>自底向上</li>
<li>基于领域工程的服务构建方法</li>
</ul>
<h4 id="服务质量与性能评价"><a href="#服务质量与性能评价" class="headerlink" title="服务质量与性能评价"></a>服务质量与性能评价</h4><h4 id="相关支持工具和平台"><a href="#相关支持工具和平台" class="headerlink" title="相关支持工具和平台"></a>相关支持工具和平台</h4><h4 id="服务系统实施指南"><a href="#服务系统实施指南" class="headerlink" title="服务系统实施指南"></a>服务系统实施指南</h4><h4 id="一-SOA服务方法论"><a href="#一-SOA服务方法论" class="headerlink" title="一: SOA服务方法论"></a>一: SOA服务方法论</h4><p>面向服务的系统方法论</p>
<p>SOA服务方法论栗子: <strong>SOMA方法论</strong>(识别 ,设计和实现服务, 用来支持服务的构建, 服务组合以及服务间的协同)</p>
<blockquote>
<p>遗存系统(遗留系统) <a href="https://en.wikipedia.org/wiki/Legacy_system" target="_blank" rel="external">legacy system</a><br>‘烟囱’<br>系统集成<br>中间件<br>P2P<br>服务api</p>
</blockquote>
<h4 id="二-模型驱动的服务方法论"><a href="#二-模型驱动的服务方法论" class="headerlink" title="二: 模型驱动的服务方法论"></a>二: 模型驱动的服务方法论</h4><blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86%E7%BB%84%E7%BB%87" target="_blank" rel="external">OMG(Object Management Group)对象管理组织</a><br>软件领域的: <a href="https://en.wikipedia.org/wiki/Model-driven_architecture" target="_blank" rel="external">MDA(Model Driven architecture)</a>模型驱动体系结构</p>
</blockquote>
<p>服务领域中有:</p>
<ul>
<li>计算模型无关模型(CIM)</li>
<li>平台独立模型(PIM)</li>
<li>平台相关模型(PSM)</li>
<li>可执行服务系统(基于IT平台的服务系统)</li>
</ul>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Model_transformation" target="_blank" rel="external">Model Transformation</a><br><a href="https://en.wikipedia.org/wiki/Metamodeling" target="_blank" rel="external">Meta-Model</a><br>ADM(与MDA相反, 具体到抽象)<br>通过模型驱动的理论构造一个服务系统-论文-Ateret Anaby-Tavor, David Amid, Aviad Sela, Amit Fisher, Kuo Zhang, Ou Tie Jun. Towards a Model Driven Service Engineering Process. 2008 IEEE Congress on Services 2008 - Part I. </p>
</blockquote>
<h4 id="三-基于领域工程的服务方法论"><a href="#三-基于领域工程的服务方法论" class="headerlink" title="三: 基于领域工程的服务方法论"></a>三: 基于领域工程的服务方法论</h4><p>(开发某领域的服务系统时可能已经存在大量可复用的’服务构件’, 通过自底向上的方式对’服务构件’进行复用)</p>
<blockquote>
<p>可配置的服务工程方法论-论文-Jörg Becker, Daniel Beverungen, Ralf Knackstedt, Martin Matzner. Configurative Service Engineering - A Rule-Based Configuration Approach for Versatile Service Processes in Corrective Maintenance. Proceedings of the 42nd Hawaii International Conference on System Sciences - 2009. </p>
</blockquote>
<h4 id="四-语义驱动的服务方法论"><a href="#四-语义驱动的服务方法论" class="headerlink" title="四: 语义驱动的服务方法论"></a>四: 语义驱动的服务方法论</h4><blockquote>
<p><a href="https://en.wikipedia.org/wiki/Ontology" target="_blank" rel="external">Ontology</a><a href="https://zh.wikipedia.org/wiki/%E6%9C%AC%E4%BD%93%E8%AF%AD%E8%A8%80" target="_blank" rel="external">本体语言</a><br>语义网络<br>知识图谱</p>
</blockquote>
<h3 id="服务模式与服务创新"><a href="#服务模式与服务创新" class="headerlink" title="服务模式与服务创新"></a>服务模式与服务创新</h3><p><strong>服务创新</strong></p>
<ul>
<li>激进式创新</li>
<li>渐进式创新</li>
</ul>
<p><strong>服务模式</strong><br>定义服务的业务与价值目标；<br>标识参与服务的各参与者类型(顾客、提供者、使能者)；<br>定义多参与者间进行价值协同生产与价值分配的机制；<br>定义多参与者间的控制流、信息流与价值流。</p>
<ul>
<li>社会化分工: 服务外包</li>
<li>服务聚合: 聚合模式</li>
<li>Web2.0: 众包模式</li>
<li>服务虚拟化: EaaS</li>
<li>服务网络化与自组织: 物联网IoT/ 务联网IoS</li>
<li>云服务: 深度和广泛的’虚拟化’</li>
</ul>
<blockquote>
<p>Dubbox(alibaba taoba的服务框架)</p>
</blockquote>
<p>end 121</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[红城堡-渡边淳一]]></title>
      <url>https://beim.github.io/2016/11/01/%E7%BA%A2%E5%9F%8E%E5%A0%A1-%E6%B8%A1%E8%BE%B9%E6%B7%B3%E4%B8%80/</url>
      <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/lpic/s28069096.jpg" alt="hcb"></p>
<blockquote>
<p>爱与性都没有的时候</p>
</blockquote>
<a id="more"></a>
<p><a href="https://book.douban.com/subject/26384630/" target="_blank" rel="external">豆瓣读书</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[富士山禁恋-松本清张]]></title>
      <url>https://beim.github.io/2016/11/01/%E5%AF%8C%E5%A3%AB%E5%B1%B1%E7%A6%81%E6%81%8B-%E6%9D%BE%E6%9C%AC%E6%B8%85%E5%BC%A0/</url>
      <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/lpic/s24401753.jpg" alt="fss"></p>
<blockquote>
<p>面对注定绝望的爱情, 我们又能怎么办</p>
</blockquote>
<a id="more"></a>
<p><a href="https://book.douban.com/subject/7153418/" target="_blank" rel="external">豆瓣读书</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2013-蓝色茉莉]]></title>
      <url>https://beim.github.io/2016/11/01/2013-%E8%93%9D%E8%89%B2%E8%8C%89%E8%8E%89/</url>
      <content type="html"><![CDATA[<p><img src="http://img31.mtime.cn/pi/2014/01/10/162701.70021676_1000X1000.jpg" alt="lsml"></p>
<blockquote>
<p>看到服务员了吗, 我还想要杯斯特利*马提尼</p>
</blockquote>
<a id="more"></a>
<p><img src="http://img31.mtime.cn/pi/2014/01/10/162712.28434029_1000X1000.jpg" alt="lsml"></p>
<p><img src="http://img31.mtime.cn/pi/2013/06/28/143646.97680358_1000X1000.jpg" alt="lsml"></p>
<p><img src="http://img31.mtime.cn/pi/2013/08/09/101710.91218653_1000X1000.jpg" alt="lsml"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些尝过的巧克力]]></title>
      <url>https://beim.github.io/2016/11/01/%E9%82%A3%E4%BA%9B%E5%B0%9D%E8%BF%87%E7%9A%84%E5%B7%A7%E5%85%8B%E5%8A%9B/</url>
      <content type="html"><![CDATA[<h1 id="MOSER-ROTH"><a href="#MOSER-ROTH" class="headerlink" title="MOSER ROTH"></a>MOSER ROTH</h1><p><img src="http://ob4a6y748.bkt.clouddn.com/moser-roth-1470272806.jpg" alt="moser-roth"><br><img src="http://ob4a6y748.bkt.clouddn.com/moser-roth-1882366841.jpg" alt="mosere-roth"><br><img src="http://ob4a6y748.bkt.clouddn.com/moser-roth-1573414625.jpg" alt="moser-roth"></p>
<p>一盒5块，每块25克。<br>初尝黑巧，70%，拆开有香味，第一块吃起来感觉很苦。吃第二块的时候感觉苦然后酸，再然后就是酸和甜的味道。</p>
<p>85%  比70%的更硬。卧槽太苦了。<br>好吧这种程度的苦还是可以接受的，吃完之后有回甘。</p>
<h1 id="DOMORI"><a href="#DOMORI" class="headerlink" title="DOMORI"></a>DOMORI</h1><p><img src="http://ob4a6y748.bkt.clouddn.com/domori-1776829436.jpg" alt="DOMORI"><br><img src="http://ob4a6y748.bkt.clouddn.com/domori-2080594587.jpg" alt="domori"></p>
<p>Puertofino 70%<br>每块25g  可以切分成4个小块 吃起来很方便<br>酸味+可可的醇香  和MOSER ROTH 70%比起来酸度更高一些<br>真。入口即化<br>生津效果非常明显</p>
<h1 id="ROYCE"><a href="#ROYCE" class="headerlink" title="ROYCE"></a>ROYCE</h1><p><img src="http://ob4a6y748.bkt.clouddn.com/royce-1807449194.jpg" alt="royce"><br><img src="http://ob4a6y748.bkt.clouddn.com/royce-54136210.jpg" alt="royce"><br><img src="http://ob4a6y748.bkt.clouddn.com/royce-1491497628.jpg" alt="royce"></p>
<p>生巧， 一盒20块<br>10-20℃保存，入口清凉。<br>表面有一层可可粉<br>鲜牛奶和可可融合在一起的味道，香浓醇滑<br>不过没有黑巧的回味</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[note-Beej-Network-Programming]]></title>
      <url>https://beim.github.io/2016/10/20/note-Beej-Network-Programming/</url>
      <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><hr>
<h1 id="What-is-a-socket"><a href="#What-is-a-socket" class="headerlink" title="What is a socket?"></a>What is a socket?</h1><p>“Stream Sockets” and “Datagram Sockets” , which may be referred to as <code>SOCK_STRAM</code> and <code>SOCK_DGRAM</code><br>Datagram sockets are sometimes called “connectionless sockets”. (Though they can be <code>connect()</code>‘d if you really want)</p>
<hr>
<h1 id="IP-Addresses-structs-and-Data-Munging-转换"><a href="#IP-Addresses-structs-and-Data-Munging-转换" class="headerlink" title="IP Addresses, structs, and Data Munging(转换)"></a>IP Addresses, structs, and Data Munging(转换)</h1><h2 id="ipv6"><a href="#ipv6" class="headerlink" title="ipv6"></a>ipv6</h2><p>ipv6, 128 bits,  Lots of times with lots of zeros in it, and can be compressed between two colons.<br>For instance:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">2001</span>:<span class="number">0</span><span class="attribute">db8</span>:<span class="attribute">c9d2</span>:<span class="number">0012</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0051</span></div><div class="line"><span class="number">2001</span>:<span class="attribute">db8</span>:<span class="attribute">c9d2</span>:<span class="number">12</span>::<span class="number">51</span></div><div class="line"></div><div class="line"><span class="number">2001</span>:<span class="number">0</span><span class="attribute">db8</span>:<span class="attribute">ab00</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span></div><div class="line"><span class="number">2001</span>:<span class="attribute">db8</span>:<span class="attribute">ab00</span>::</div><div class="line"></div><div class="line"># It<span class="string">'s loopback address, It always means "this machine I'</span>m running on now"</div><div class="line"><span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0000</span>:<span class="number">0001</span></div><div class="line">::<span class="number">1</span></div><div class="line"></div><div class="line"># there's an ipv4-compatibility mode for ipv6 <span class="attribute">addresses</span></div><div class="line">::<span class="attribute">ffff</span>:<span class="number">192.0</span>.<span class="number">2.33</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="subnets"><a href="#subnets" class="headerlink" title="subnets"></a>subnets</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">192.0</span>.<span class="number">2.12</span> <span class="built_in">AND</span> <span class="number">255.255</span>.<span class="number">255.0</span></div><div class="line">=&gt;</div><div class="line"><span class="number">192.0</span>.<span class="number">2.0</span> (<span class="number">255.255</span>.<span class="number">255.0</span>)</div><div class="line"></div><div class="line"># <span class="built_in">or</span></div><div class="line"><span class="number">192.0</span>.<span class="number">2.12</span>/<span class="number">24</span></div><div class="line"></div><div class="line"># for ipv6</div><div class="line"><span class="symbol">2001:db8</span><span class="symbol">:</span><span class="symbol">:</span>/<span class="number">32</span></div><div class="line"><span class="built_in">or</span></div><div class="line"><span class="symbol">2001:db8</span><span class="symbol">:5413</span><span class="symbol">:4028</span><span class="symbol">:</span><span class="symbol">:9</span>db9/<span class="number">64</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Byte-Order"><a href="#Byte-Order" class="headerlink" title="Byte Order"></a>Byte Order</h2><p>Two byte orderings: Big-Endian, Little-Endian<br>If you want to represent thw two-byte hex number, say <code>b34f</code>, you’ll store it:<br>Big-Endian : b34f<br>Little-Endian: 4fb3<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">`Network Byte Order`</span> </div><div class="line">        =&gt; <span class="string">`Big-Endian Order`</span></div><div class="line"><span class="string">`Host Byte Order`</span></div><div class="line">        =&gt; <span class="string">`Little-Endian Order`</span> (Intel or Intel-compatible processor)</div><div class="line">        =&gt; <span class="string">`Big-Endian`</span></div></pre></td></tr></table></figure></p>
<p>These function will do the magic conversion between <code>Network Byte Order</code> and <code>Host Byte Order</code></p>
<ul>
<li>htons()   host to network short (two bytes)</li>
<li>htonl()   host to network long (four bytes)</li>
<li>ntohs()   network to host short </li>
<li>ntohl()   network to host long</li>
</ul>
<hr>
<h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>socket descriptor =&gt; <strong>int</strong></p>
<p><strong>struct addrinfo</strong> . It’s used to prep the socket address structures for subsequent use. It’s also used in host name lookups, and service name lookups.<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span></span> &#123;</div><div class="line">    <span class="keyword">int</span>              ai_flags;     <span class="comment">// AI_PASSIVE, AI_CANONNAME, etc.</span></div><div class="line">    <span class="keyword">int</span>              ai_family;    <span class="comment">// AF_INET, AF_INET6, AF_UNSPEC</span></div><div class="line">    <span class="keyword">int</span>              ai_socktype;  <span class="comment">// SOCK_STREAM, SOCK_DGRAM</span></div><div class="line">    <span class="keyword">int</span>              ai_protocol;  <span class="comment">// use 0 for "any"</span></div><div class="line">    size_t           ai_addrlen;   <span class="comment">// size of ai_addr in bytes</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span></span> *ai_addr;      <span class="comment">// struct sockaddr_in or _in6</span></div><div class="line">    <span class="keyword">char</span>            *ai_canonname; <span class="comment">// full canonical hostname</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span></span> *ai_next;      <span class="comment">// linked list, next node</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>You’ll load this struct up a bit, and then call getaddrinfo(). It’ll return a pointer to a new linked list of these structures filled out with all the goodies you need;</p>
<p><strong>struct sockaddr</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr &#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span>    sa_family;    <span class="comment">// address family, AF_xxx</span></div><div class="line">    <span class="keyword">char</span>              sa_data[<span class="number">14</span>];  <span class="comment">// 14 bytes of protocol address</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>sa_family</code> can be a variety of things, but it’ll be <code>AF_INET</code>(ipv4) or <code>AF_INET6</code>(ipv6) in this document.<br><code>sa_data</code> contains a destination address and port number for the socket.<br>This is rather unwieldy since you don’t want to tediously pack the address in the <code>sa_data</code> by hand.<br>To deal with this, programmers created a parallel structure: <code>struct sockaddr_in</code>(‘in’ for ‘internet’) to be used with <code>ipv4</code></p>
<blockquote>
<p>And this is the <strong>important</strong> bit: a pointer to a <code>struct sockaddr_in</code> can be cast to a pointer to a <code>struct sockaddr</code> and vice-versa. So even though <code>connect()</code> wants a <code>struct sockaddr*</code>, you can still use a <code>struct sockaddr_in</code> and cast it at the last minute</p>
</blockquote>
<p><strong>struct sockaddr_in</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (IPv4 only--see struct sockaddr_in6 for IPv6)</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> sockaddr_in &#123;</div><div class="line">    <span class="keyword">short</span> <span class="keyword">int</span>          sin_family;  <span class="comment">// Address family, AF_INET</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port;    <span class="comment">// Port number</span></div><div class="line">    <span class="keyword">struct</span> in_addr     sin_addr;    <span class="comment">// Internet address</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>      sin_zero[<span class="number">8</span>]; <span class="comment">// Same size as struct sockaddr, It's included to pad the structure to the length of `struct sockaddr`</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>sin_zero</code> shouled be set to all zeros with the function <strong>memset()</strong><br><code>sin_family</code> corresponds to <code>sa_family</code> in a <code>struct sockaddr</code> and should be set to <code>AF_INET</code><br><code>sin_port</code> must be in <em>Network Byte Order</em> (by using <strong>htons()</strong>)</p>
<p><code>sin_addr</code> is a <code>struct in_addr</code><br><figure class="highlight thrift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (IPv4 only--see struct in6_addr for IPv6)</span></div><div class="line"></div><div class="line"><span class="comment">// Internet address (a structure for historical reasons)</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> </span>&#123;</div><div class="line">    uint32_t s_addr; <span class="comment">// that's a 32-bit int (4 bytes)</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>So if you have declared <code>ina</code> to be of type <code>struct sockaddr_in</code> then <code>ina.sin_addr.s_addr</code> references the 4-byte IP address(in Network Byte Order).</p>
<p>What about ipv6, see <strong>sockaddr_in6</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> sockaddr_in6 &#123;</div><div class="line">    <span class="keyword">u_int16_t</span>       sin6_family;   <span class="comment">// address family, AF_INET6</span></div><div class="line">    <span class="keyword">u_int16_t</span>       sin6_port;     <span class="comment">// port number, Network Byte Order</span></div><div class="line">    <span class="keyword">u_int32_t</span>       sin6_flowinfo; <span class="comment">// IPv6 flow information</span></div><div class="line">    <span class="keyword">struct</span> in6_addr sin6_addr;     <span class="comment">// IPv6 address</span></div><div class="line">    <span class="keyword">u_int32_t</span>       sin6_scope_id; <span class="comment">// Scope ID</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> in6_addr &#123;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   s6_addr[<span class="number">16</span>];   <span class="comment">// IPv6 address</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><strong>struct sockaddr_storage</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr_storage &#123;</div><div class="line">    <span class="keyword">sa_family_t</span>  ss_family;     <span class="comment">// address family</span></div><div class="line"></div><div class="line">    <span class="comment">// all this is padding, implementation specific, ignore it:</span></div><div class="line">    <span class="keyword">char</span>      <span class="number">__</span>ss_pad1[<span class="number">_</span>SS_PAD1SIZE];</div><div class="line">    <span class="keyword">int64_t</span>   <span class="number">__</span>ss_align;</div><div class="line">    <span class="keyword">char</span>      <span class="number">__</span>ss_pad2[<span class="number">_</span>SS_PAD2SIZE];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>struct sockaddr_storage</code> is designed to be large enough to hold both ipv4 and ipv6 structures. So you can pass this parallel structure to some calls and then cast it to the type you need;</p>
<p>You can see the addrees family <code>ss_family</code> field - check this to see if it’s <code>AF_INET</code> or <code>AF_INET6</code>, Then you can cast it to a <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</code> if you wanna.</p>
<hr>
<h2 id="IP-Addresses"><a href="#IP-Addresses" class="headerlink" title="IP Addresses"></a>IP Addresses</h2><p>if you want to convert 10.12.110.57 to sa.sin_addr<br>use <strong>inet_pton()</strong>, which converts IP address in numbers-and-dots notation into either a <code>struct in_addr</code> or <code>struct in6_addr</code> depending on whether you specify <code>AF_INET</code> or <code>AF_INET6</code>  (<code>pton</code> stands for presentation to network - you can call it printable to network.)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sockaddr_in sa; <span class="comment">// IPv4</span></div><div class="line"><span class="keyword">struct</span> sockaddr_in6 sa6; <span class="comment">// IPv6</span></div><div class="line"></div><div class="line">inet_pton(AF_INET, <span class="string">"10.12.110.57"</span>, &amp;(sa.sin_addr)); <span class="comment">// IPv4</span></div><div class="line">inet_pton(AF_INET6, <span class="string">"2001:db8:63b3:1::3490"</span>, &amp;(sa6.sin6_addr)); <span class="comment">// IPv6</span></div></pre></td></tr></table></figure></p>
<p>(the old way of doing things used a function called <strong>inet_addr()</strong> or another function called <strong>inet_aton()</strong> these are now absolete and don’t work with ipv6)</p>
<p>if you want to convert sa.sin_addr to 10.12.110.57<br>use <strong>init_ntop()</strong>(means network to presentation, or network to printable) , like this:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IPv4:</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> ip4[INET_ADDRSTRLEN];  <span class="comment">// space to hold the IPv4 string</span></div><div class="line"><span class="keyword">struct</span> sockaddr_in sa;      <span class="comment">// pretend this is loaded with something</span></div><div class="line"></div><div class="line">inet_ntop(AF_INET, &amp;(sa.sin_addr), ip4, INET_ADDRSTRLEN);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"The IPv4 address is: %s\n"</span>, ip4);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// IPv6:</span></div><div class="line"></div><div class="line"><span class="keyword">char</span> ip6[INET6_ADDRSTRLEN]; <span class="comment">// space to hold the IPv6 string</span></div><div class="line"><span class="keyword">struct</span> sockaddr_in6 sa6;    <span class="comment">// pretend this is loaded with something</span></div><div class="line"></div><div class="line">inet_ntop(AF_INET6, &amp;(sa6.sin6_addr), ip6, INET6_ADDRSTRLEN);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"The address is: %s\n"</span>, ip6);</div></pre></td></tr></table></figure></p>
<p>When you call it, you will pass the address type (ipv4 or ipv6), the address, a pointer to a string to hold the result, and the maximum length of that string. (Two macros conveniently hold the size of the string : <code>INET_ADDRSTRLEN</code> and <code>INET6_ADDRSTRLEN</code>)</p>
<p>(the old way of doing things: called <strong>inet_ntoa()</strong>, it’s also absolete and won’t work with ipv6)</p>
<blockquote>
<p>NOTE: These functions only work with numeric IP addresses - they won’t do any nameserver DNS lookup on a hostname, like ‘www.example.com’. You will use <strong>getaddrinfo()</strong> to do that.</p>
</blockquote>
<hr>
<h2 id="Private-Or-Disconnected-Networks"><a href="#Private-Or-Disconnected-Networks" class="headerlink" title="Private (Or Disconnected ) Networks"></a>Private (Or Disconnected ) Networks</h2><p>ipv4: 10.x.x.x 192.168.x.x 172.y.x.x   x is 0-255  y is 16-31<br>ipv6: fsxx: (or maybe in the future fcXX:), as per <a href="http://tools.ietf.org/html/rfc4193" target="_blank" rel="external">RFC 4193</a></p>
<hr>
<h1 id="Jumping-from-ipv4-to-ipv6"><a href="#Jumping-from-ipv4-to-ipv6" class="headerlink" title="Jumping from ipv4 to ipv6"></a>Jumping from ipv4 to ipv6</h1><p><a href="http://beej.us/guide/bgnet/output/html/multipage/ip4to6.html" target="_blank" rel="external">Beej’s Guide</a></p>
<hr>
<h1 id="System-Calls-or-Bust"><a href="#System-Calls-or-Bust" class="headerlink" title="System Calls or Bust"></a>System Calls or Bust</h1><h2 id="getaddrinfo-Prepare-to-launch"><a href="#getaddrinfo-Prepare-to-launch" class="headerlink" title="getaddrinfo() ; Prepare to launch"></a>getaddrinfo() ; Prepare to launch</h2><p>It helps set up the <code>structs</code> you need later on.</p>
<p>HISTORY: it used to be that you would use a function called <strong>gethostbyname()</strong> to do DNS lookups. Then you’d load that information by hand into a <code>struct sockaddr_in</code>, and use that in calls.</p>
<p>This is no longer necessary, you now have the function <strong>getaddrinfo()</strong> that does all kinds of good stuff for you, including DNS and service name lookups, and fills out the <code>structs</code> you need, besides!</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">int</span> getaddrinfo(<span class="keyword">const</span> char *node,     // e.g. <span class="string">"www.example.com"</span> <span class="literal">or</span> IP</div><div class="line">                <span class="keyword">const</span> char *service,  // e.g. <span class="string">"http"</span> <span class="literal">or</span> port <span class="built_in">number</span></div><div class="line">                <span class="keyword">const</span> struct addrinfo *hints,</div><div class="line">                struct addrinfo **res)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>You give this function three input parameters, and it gives you a pointer to a linked-list, <code>res</code>, of result.</p>
<p>The parameter <code>service</code> can be a port number, like “80”, or the name of a particular service (found in <a href="http://www.iana.org/assignments/port-numbers" target="_blank" rel="external">THE IANA Port List</a> or the <code>/etc/services</code> file) like “http” or “ftp” or whatever.</p>
<p>The <code>hints</code> parameter points to a <code>struct addrinfo</code> that you’ve already filled out with relevant information.</p>
<p>Here’s a sample call if you’re a server who wants to listen on your host’s IP address, port 3490.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> status;</div><div class="line"><span class="keyword">struct</span> addrinfo hints;</div><div class="line"><span class="keyword">struct</span> addrinfo *servinfo;  <span class="comment">// will point to the results</span></div><div class="line"></div><div class="line"><span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> hints); <span class="comment">// make sure the struct is empty</span></div><div class="line">hints.ai_family = AF_UNSPEC;     <span class="comment">// don't care IPv4 or IPv6, you can set it to AF_INET or AF_INET6 if you want one or the other specifically.</span></div><div class="line">hints.ai_socktype = SOCK_STREAM; <span class="comment">// TCP stream sockets</span></div><div class="line">hints.ai_flags = AI_PASSIVE;     <span class="comment">// fill in my IP for me</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> ((status = getaddrinfo(<span class="literal">NULL</span>, <span class="string">"3490"</span>, &amp;hints, &amp;servinfo)) != <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"getaddrinfo error: %s\n"</span>, gai_strerror(status));</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// servinfo now points to a linked list of 1 or more struct addrinfos</span></div><div class="line"></div><div class="line"><span class="comment">// ... do everything until you don't need servinfo anymore ....</span></div><div class="line"></div><div class="line">freeaddrinfo(servinfo); <span class="comment">// free the linked-list</span></div></pre></td></tr></table></figure>
<p>The <code>AI_PASSIVE</code> flag tells <strong>getaddrinfo()</strong> to assign the address of my local host to the socket structures. (Or you can put a specific address in as the first parameter to <strong>getaddrinfo()</strong> where I currently have NULL, up there)</p>
<p>If there’s an error (<strong>getaddrinfo()</strong> returns non-zero), we can print it out using the funciont <strong>gai_strerrr()</strong>. If everything works properly, <code>servinfo</code> will point to a linked list of <code>struct addrinfo</code>s, each of which contains a <code>struct sockaddr</code> of some kind that we can use later!</p>
<p>Finally, when we’re all done with the linked list that <strong>getaddrinfo()</strong> allocated for us, we should free it all up with a call to <strong>freeaddrinfo()</strong></p>
<p>Here’s sample call if you’re a client who wants to connect to a particular server, say “www.example.net” port 3490.<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> status;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span></span> hints;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span></span> *servinfo;  <span class="comment">// will point to the results</span></div><div class="line"></div><div class="line">memset(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> hints); <span class="comment">// make sure the struct is empty</span></div><div class="line">hints.ai_family = AF_UNSPEC;     <span class="comment">// don't care IPv4 or IPv6</span></div><div class="line">hints.ai_socktype = SOCK_STREAM; <span class="comment">// TCP stream sockets</span></div><div class="line"></div><div class="line"><span class="comment">// get ready to connect</span></div><div class="line">status = getaddrinfo(<span class="string">"www.example.net"</span>, <span class="string">"3490"</span>, &amp;hints, &amp;servinfo);</div><div class="line"></div><div class="line"><span class="comment">// servinfo now points to a linked list of 1 or more struct addrinfos</span></div><div class="line"></div><div class="line"><span class="comment">// etc.</span></div></pre></td></tr></table></figure></p>
<p>I keep saying that <code>servinfo</code> is a linked list with all kinds of address information.Here is a demo to show off this information. The <a href="http://beej.us/guide/bgnet/examples/showip.c" target="_blank" rel="external">short program</a> will print the IP address for whatever host you specified on the command line. </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">** showip.c -- show IP addresses for a host given on the command line</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> addrinfo hints, *res, *p;</div><div class="line">    <span class="keyword">int</span> status;</div><div class="line">    <span class="keyword">char</span> ipstr[INET6_ADDRSTRLEN];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"usage: showip hostname\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> hints);</div><div class="line">    hints.ai_family = AF_UNSPEC; <span class="comment">// AF_INET or AF_INET6 to force version</span></div><div class="line">    hints.ai_socktype = SOCK_STREAM;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((status = getaddrinfo(argv[<span class="number">1</span>], <span class="literal">NULL</span>, &amp;hints, &amp;res)) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"getaddrinfo: %s\n"</span>, gai_strerror(status));</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"IP addresses for %s:\n\n"</span>, argv[<span class="number">1</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(p = res;p != <span class="literal">NULL</span>; p = p-&gt;ai_next) &#123;</div><div class="line">        <span class="keyword">void</span> *addr;</div><div class="line">        <span class="keyword">char</span> *ipver;</div><div class="line"></div><div class="line">        <span class="comment">// get the pointer to the address itself,</span></div><div class="line">        <span class="comment">// different fields in IPv4 and IPv6:</span></div><div class="line">        <span class="keyword">if</span> (p-&gt;ai_family == AF_INET) &#123; <span class="comment">// IPv4</span></div><div class="line">            <span class="keyword">struct</span> sockaddr_in *ipv4 = (<span class="keyword">struct</span> sockaddr_in *)p-&gt;ai_addr;</div><div class="line">            addr = &amp;(ipv4-&gt;sin_addr);</div><div class="line">            ipver = <span class="string">"IPv4"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// IPv6</span></div><div class="line">            <span class="keyword">struct</span> sockaddr_in6 *ipv6 = (<span class="keyword">struct</span> sockaddr_in6 *)p-&gt;ai_addr;</div><div class="line">            addr = &amp;(ipv6-&gt;sin6_addr);</div><div class="line">            ipver = <span class="string">"IPv6"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// convert the IP to a string and print it:</span></div><div class="line">        inet_ntop(p-&gt;ai_family, addr, ipstr, <span class="keyword">sizeof</span> ipstr);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"  %s: %s\n"</span>, ipver, ipstr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    freeaddrinfo(res); <span class="comment">// free the linked list</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Sample run!<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ showip www<span class="selector-class">.example</span><span class="selector-class">.net</span></div><div class="line">IP addresses <span class="keyword">for</span> www<span class="selector-class">.example</span><span class="selector-class">.net</span>:</div><div class="line"></div><div class="line">  IPv4: <span class="number">192.0</span>.<span class="number">2.88</span></div><div class="line"></div><div class="line">$ showip ipv6<span class="selector-class">.example</span><span class="selector-class">.com</span></div><div class="line">IP addresses <span class="keyword">for</span> ipv6<span class="selector-class">.example</span><span class="selector-class">.com</span>:</div><div class="line"></div><div class="line">  IPv4: <span class="number">192.0</span>.<span class="number">2.101</span></div><div class="line">  IPv6: <span class="number">2001</span>:db8:<span class="number">8</span>c00:<span class="number">22</span>::<span class="number">171</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="socket-Get-the-File-Descriptor"><a href="#socket-Get-the-File-Descriptor" class="headerlink" title="socket() ; Get the File Descriptor"></a>socket() ; Get the File Descriptor</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// arguments: ipv4 or ipv6, stream or datagram, and tcp or udp</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</div></pre></td></tr></table></figure>
<p>It used to be people would hardcode these values, and you can absolutely still do that.(<code>domain</code> is <code>PF_INET</code> or <code>PF_INET6</code>, <code>type</code> is <code>SOCK_STREAM</code> or <code>SOCK_DGRAM</code>, and <code>protocol</code> can be set to 0 to choose the proper protocol for the given type. Or you can call <strong>getprotobyname()</strong> to look up the protocol you want, “tcp” or “udp”)</p>
<p>(This <code>PF_INET</code> thing is a close relative of the <code>AF_INET</code>, But the most correct thing to do is to use <code>AF_INET</code> in your <code>struct sockaddr_in</code> and <code>PF_INET</code> in your call to <strong>socket()</strong>)</p>
<p>What you really want to do is use the values from the results of the call to <strong>getaddrinfo()</strong>, and feed them into <strong>socket()</strong> directly like this.</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> s;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span></span> hints, *res;</div><div class="line"></div><div class="line"><span class="comment">// do the lookup</span></div><div class="line"><span class="comment">// [pretend we already filled out the "hints" struct]</span></div><div class="line">getaddrinfo(<span class="string">"www.example.com"</span>, <span class="string">"http"</span>, &amp;hints, &amp;res);</div><div class="line"></div><div class="line"><span class="comment">// [again, you should do error-checking on getaddrinfo(), and walk</span></div><div class="line"><span class="comment">// the "res" linked list looking for valid entries instead of just</span></div><div class="line"><span class="comment">// assuming the first one is good (like many of these examples do.)</span></div><div class="line"><span class="comment">// See the section on client/server for real examples.]</span></div><div class="line"></div><div class="line">s = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);</div></pre></td></tr></table></figure>
<p><strong>socket()</strong> simply returns to you a <code>socket discriptor</code> that you can use in later system calls, or <code>-1</code> on error.</p>
<hr>
<h2 id="bind-What-port-am-I-on"><a href="#bind-What-port-am-I-on" class="headerlink" title="bind() ; What port am I on ?"></a>bind() ; What port am I on ?</h2><p>Associate the socket with a port on your local machine. If you’re going to only be doing a <strong>connect()</strong>, this is probably be unnecessary.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">struct</span> sockaddr *my_addr, <span class="keyword">int</span> addrlen)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">// `sockfd` is the socket file descriptor returned by socket(). </span></div><div class="line"><span class="comment">// `my_addr` is a pointer to a `struct sockaddr` that contains information about your address, namely, port and IP address.</span></div><div class="line"><span class="comment">// `addrlen` is the length in bytes of that address.</span></div></pre></td></tr></table></figure>
<p>Let’s have an example that binds the socket to the host the program is running on, port 3490:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> addrinfo hints, *res;</div><div class="line"><span class="keyword">int</span> sockfd;</div><div class="line"></div><div class="line"><span class="comment">// first, load up address structs with getaddrinfo():</span></div><div class="line"></div><div class="line"><span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> hints);</div><div class="line">hints.ai_family = AF_UNSPEC;  <span class="comment">// use IPv4 or IPv6, whichever</span></div><div class="line">hints.ai_socktype = SOCK_STREAM;</div><div class="line">hints.ai_flags = AI_PASSIVE;     <span class="comment">// fill in my IP for me</span></div><div class="line"></div><div class="line">getaddrinfo(<span class="literal">NULL</span>, <span class="string">"3490"</span>, &amp;hints, &amp;res);</div><div class="line"></div><div class="line"><span class="comment">// make a socket:</span></div><div class="line"></div><div class="line">sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);</div><div class="line"></div><div class="line"><span class="comment">// bind it to the port we passed in to getaddrinfo():</span></div><div class="line"></div><div class="line">bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</div></pre></td></tr></table></figure>
<p>By using the <code>AI_PASSIVE</code> flag, I’m telling the program to bind to the IP of the host it’s running on. If you want to bind to a specific local IP address, drop the <code>AI_PASSIVE</code> and put an IP address in for the first argument to <strong>getaddrinfo()</strong>.</p>
<p><strong>bind()</strong> also returns -1 on error and sets <code>errno</code> to the error’s value.</p>
<p>Lots of old code manually packs the <code>struct sockaddr_in</code> before calling <strong>bind()</strong>. This is ipv4-specified. The old code looks like this:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// !!! THIS IS THE OLD WAY !!!</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> sockfd;</div><div class="line"><span class="keyword">struct</span> sockaddr_in my_addr;</div><div class="line"></div><div class="line">sockfd = socket(PF_INET, SOCK_STREAM, <span class="number">0</span>);</div><div class="line"></div><div class="line">my_addr.sin_family = AF_INET;</div><div class="line">my_addr.sin_port = htons(MYPORT);     <span class="comment">// short, network byte order</span></div><div class="line">my_addr.sin_addr.s_addr = inet_addr(<span class="string">"10.12.110.57"</span>);</div><div class="line"><span class="built_in">memset</span>(my_addr.sin_zero, <span class="string">'\0'</span>, <span class="keyword">sizeof</span> my_addr.sin_zero);</div><div class="line"></div><div class="line">bind(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;my_addr, <span class="keyword">sizeof</span> my_addr);</div></pre></td></tr></table></figure></p>
<p>In the above code, you could also assign <code>INADDR_ANY</code> to the <code>s_addr</code> field if you want to bind to your local IP address (like the <code>AI_PASSIVE</code> flag, above.) The ipv6 version of <code>INADDR_ANY</code> is a global variable <code>in6addr_any</code> that is assigned into the <code>sin6_addr</code> field of your <code>struct sockadd_in6</code>. (There is also a macro <code>IN6ADDR_ANY_INIT</code> that you can use in a variable initializer.)</p>
<p>Sometimes you try to return a server and <strong>bind()</strong> fails, claiming “Address already in use”. It’s because a little bit of a socket that was connected is still hanging around in the kernel, and it’s hogging the port. You can either wait for it to clear (a minute or so), or add code to your program allowing it to reuse the port, like this:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// int setsockopt(int sockfd, int level, int optname,</span></div><div class="line"><span class="comment">//                    const void *optval, socklen_t optlen);</span></div><div class="line"><span class="keyword">int</span> yes=<span class="number">1</span>;</div><div class="line"><span class="comment">//char yes='1'; // Solaris people use this</span></div><div class="line"></div><div class="line"><span class="comment">// lose the pesky "Address already in use" error message</span></div><div class="line"><span class="keyword">if</span> (setsockopt(listener,SOL_SOCKET,SO_REUSEADDR,&amp;yes,<span class="keyword">sizeof</span> yes) == <span class="number">-1</span>) &#123;</div><div class="line">    perror(<span class="string">"setsockopt"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// then bind...</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="connect-–-Hey-you"><a href="#connect-–-Hey-you" class="headerlink" title="connect() – Hey you!"></a>connect() – Hey you!</h2><p>The <strong>connect()</strong> call is as follows:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">struct</span> sockaddr *serv_addr, <span class="keyword">int</span> addrlen)</span></span>; </div><div class="line"></div><div class="line"><span class="comment">// `sockfd` is socket file descriptor, as returned by the socket() call.</span></div><div class="line"><span class="comment">// `serv_addr` is a `struct sockaddr` containing the destination port and IP address</span></div><div class="line"><span class="comment">// `addrlen` is the length in bytes of the server address structure</span></div><div class="line"><span class="comment">// All of this information can be gleaned from the results of the **getaddrinfo()** call</span></div></pre></td></tr></table></figure></p>
<p>Here is an example where we make a socket connection to “www.example.com”, port 3490<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> addrinfo hints, *res;</div><div class="line"><span class="keyword">int</span> sockfd;</div><div class="line"></div><div class="line"><span class="comment">// first, load up address structs with getaddrinfo():</span></div><div class="line"></div><div class="line"><span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> hints);</div><div class="line">hints.ai_family = AF_UNSPEC;</div><div class="line">hints.ai_socktype = SOCK_STREAM;</div><div class="line"></div><div class="line">getaddrinfo(<span class="string">"www.example.com"</span>, <span class="string">"3490"</span>, &amp;hints, &amp;res);</div><div class="line"></div><div class="line"><span class="comment">// make a socket:</span></div><div class="line"></div><div class="line">sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);</div><div class="line"></div><div class="line"><span class="comment">// connect!</span></div><div class="line"></div><div class="line">connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</div></pre></td></tr></table></figure></p>
<p>OLD WAY: Old programs filled out their own <code>struct sockaddr_in</code> to pass to <strong>connect()</strong>.</p>
<p><strong>connect()</strong> will return <strong>-1</strong> on error and set the variable <strong>errno</strong></p>
<hr>
<h2 id="listen-Will-somebody-please-call-me"><a href="#listen-Will-somebody-please-call-me" class="headerlink" title="listen() - Will somebody please call me?"></a>listen() - Will somebody please call me?</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>; </div><div class="line"></div><div class="line"><span class="comment">// `sockfd` is the socket file descriptor from the **socket()** system call.</span></div><div class="line"><span class="comment">// `backlog` is the number of connections allowed on the imcoming queue.</span></div><div class="line"><span class="comment">// Incoming connections are going to wait in this queue until you **accept()** them, and this is the limit on how many can queue up.</span></div><div class="line"><span class="comment">// Most systems silently limit this number to about 20; you can probably get away with setting it to 5 or 10.</span></div></pre></td></tr></table></figure>
<p><strong>listen()</strong> returns <strong>-1</strong> and sets <strong>errno</strong> on error</p>
<p>We need to call <strong>bind()</strong> before we call <strong>listen()</strong> so that the server is running on a specific port.<br>The sequence of system calls you’ll make is:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getaddrinfo()<span class="comment">;</span></div><div class="line">socket()<span class="comment">;</span></div><div class="line">bind()<span class="comment">;</span></div><div class="line">listen()<span class="comment">;</span></div><div class="line">/* accept() goes here */</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="accept-Thank-you-for-calling-port-3490"><a href="#accept-Thank-you-for-calling-port-3490" class="headerlink" title="accept() - Thank you for calling port 3490"></a>accept() - Thank you for calling port 3490</h2><p>Someone far far away will try to <strong>connect()</strong> to your machine on a port that you are <strong>listen()</strong>ing on. Their connection will be queued up waiting to be <strong>accept()</strong>ed. You call <strong>accept()</strong> and you tell it to get the pending connection. It’ll return to you a <code>brand new socket file descriptor</code> to use for this single connection!. The original one is still listening for more new connections, and the newly created one is finally ready to <strong>send()</strong> and <strong>recv()</strong>. </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="keyword">socklen_t</span> *addrlen)</span></span>; </div><div class="line"></div><div class="line"><span class="comment">// `sockfd` is the listen()ing socket descriptor.</span></div><div class="line"><span class="comment">// `addr` will usually be a pointer to a local `struct sockaddr_storage`</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cpp-makefile体验]]></title>
      <url>https://beim.github.io/2016/10/18/cpp-makefile%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>来自csdn</p>
<a id="more"></a>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">l</span></div><div class="line">dir1/  makefile  o/  <span class="keyword">test</span>.cpp  <span class="keyword">test</span>.hpp</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">cat</span> <span class="keyword">test</span>.cpp</div><div class="line">#<span class="keyword">include</span> <span class="string">"test.hpp"</span></div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    int x(3);</div><div class="line">    int <span class="built_in">y</span>(5);</div><div class="line">    int c;</div><div class="line">    c = calculate(x, y);</div><div class="line">    cout &lt;&lt; c &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">cat</span> <span class="keyword">test</span>.hpp</div><div class="line">#<span class="keyword">include</span> &lt;iostream&gt;</div><div class="line">#<span class="keyword">include</span> <span class="string">"./dir1/test1.hpp"</span></div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">l</span> dir1</div><div class="line">test1.cpp  test1.hpp</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">cat</span> dir1/test1.cpp</div><div class="line">#<span class="keyword">include</span> <span class="string">"test1.hpp"</span></div><div class="line"></div><div class="line">int calculate(int <span class="keyword">const</span>&amp; a, int <span class="keyword">const</span>&amp; b) &#123;</div><div class="line">    int c;</div><div class="line">    c = a + b;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">cat</span> dir1/test1.hpp </div><div class="line">#<span class="keyword">include</span> &lt;iostream&gt;</div><div class="line"></div><div class="line">int calculate(int <span class="keyword">const</span>&amp; a, int <span class="keyword">const</span>&amp; b);</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">l</span> o/</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">cat</span> makefile</div><div class="line">mycplusplus: <span class="keyword">test</span>.o test1.o</div><div class="line">	<span class="keyword">g</span>++ o/test1.o o/<span class="keyword">test</span>.o -o mycplusplus</div><div class="line">test1.o : dir1/test1.cpp</div><div class="line">	<span class="keyword">g</span>++ -c dir1/test1.cpp -o o/test1.o</div><div class="line"><span class="keyword">test</span>.o : <span class="keyword">test</span>.cpp</div><div class="line">	<span class="keyword">g</span>++ -c <span class="keyword">test</span>.cpp -o o/<span class="keyword">test</span>.o</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ make</div><div class="line"><span class="keyword">g</span>++ -c <span class="keyword">test</span>.cpp -o o/<span class="keyword">test</span>.o</div><div class="line"><span class="keyword">g</span>++ -c dir1/test1.cpp -o o/test1.o</div><div class="line"><span class="keyword">g</span>++ o/test1.o o/<span class="keyword">test</span>.o -o mycplusplus</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">l</span></div><div class="line">dir1/  makefile  mycplusplus*  o/  <span class="keyword">test</span>.cpp  <span class="keyword">test</span>.hpp</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ ./mycplusplus </div><div class="line">8</div><div class="line"></div><div class="line">~/usr/temp/<span class="keyword">test</span>-makefile$ <span class="keyword">l</span> o/</div><div class="line">test1.o  <span class="keyword">test</span>.o</div></pre></td></tr></table></figure>
<p><a href="http://blog.csdn.net/hongkangwl/article/details/21328327" target="_blank" rel="external">参考CSDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016-收藏]]></title>
      <url>https://beim.github.io/2016/10/15/2016-%E6%94%B6%E8%97%8F/</url>
      <content type="html"><![CDATA[<h1 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h1><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ul>
<li><p><a href="https://blog.risingstack.com/async-await-node-js-7-nightly/" target="_blank" rel="external">Experimenting With async/await in Node.js 7 Nightly</a></p>
</li>
<li><p><a href="https://blog.risingstack.com/nodejs-at-scale-npm-best-practices/" target="_blank" rel="external">Node.js at Scale - npm Best Practices</a></p>
</li>
<li><p><a href="https://cnodejs.org/topic/5640b80d3a6aa72c5e0030b6" target="_blank" rel="external">体验异步的终极解决方案-ES7的Async/Await</a></p>
</li>
<li><p><a href="http://morning.work/page/2016-05/how-to-write-a-nodejs-api-client-package.html" target="_blank" rel="external">Nodejs 编写API 客户端</a></p>
</li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li><p><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You Dont’t Know JS - github</a></p>
</li>
<li><p><a href="http://gold.xitu.io/post/57fe3db0816dfa0056d7d713" target="_blank" rel="external">JavaScript 闯关记-掘金</a></p>
</li>
</ul>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul>
<li><p><a href="https://zhuanlan.zhihu.com/json-tutorial" target="_blank" rel="external">JSON库教程 - 知乎专栏</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/DataStructureAndAlgorithm" target="_blank" rel="external">C++数据结构 - 知乎专栏</a></p>
</li>
<li><p><a href="http://m.blog.csdn.net/article/details?id=51016126" target="_blank" rel="external">值得推荐的C/C++框架和库—造轮子前先看看现有的轮子</a></p>
</li>
<li><p><a href="http://www.ituring.com.cn/book/1203" target="_blank" rel="external">像计算机科学家一样思考（C++版)</a></p>
</li>
<li><p><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/" target="_blank" rel="external">Google 开源项目风格指南-C++ 风格指南</a></p>
</li>
</ul>
<h1 id="语言无关"><a href="#语言无关" class="headerlink" title="语言无关"></a>语言无关</h1><h2 id="front"><a href="#front" class="headerlink" title="front"></a>front</h2><h2 id="back"><a href="#back" class="headerlink" title="back"></a>back</h2><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><ul>
<li><p><a href="https://visualgo.net/" target="_blank" rel="external">VISUALGO 可视化算法和数据结构</a></p>
</li>
<li><p><a href="https://www.codetriage.com/" target="_blank" rel="external">CodeTriage - 帮助开源项目</a></p>
</li>
<li><p><a href="https://github.com/examplecode/mproxy" target="_blank" rel="external">mproxy - c 语言实现的一个最小的http代理，支持翻墙</a></p>
</li>
<li><p><a href="https://github.com/inaz2/proxy2" target="_blank" rel="external">python-http/https代理</a></p>
</li>
<li><p><a href="https://github.com/vic317yeh/One-Click-to-Be-Pro/blob/master/README.md" target="_blank" rel="external">语言,算法,工具, 资源集合-github-One Click to Be Pro</a></p>
</li>
<li><p><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">各种方向资源集合- github- free-programming-books</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cpp-宏编写技巧]]></title>
      <url>https://beim.github.io/2016/10/13/cpp-%E5%AE%8F%E7%BC%96%E5%86%99%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>如果宏里有多过一个语句(statement), 就需要用do {/<em>…</em>/} while(0) 包裹成单个语句, 否则会有如下问题</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M() a(); b()</span></div><div class="line"><span class="keyword">if</span> (cond)</div><div class="line">    M();</div><div class="line"><span class="keyword">else</span></div><div class="line">    c();</div><div class="line"></div><div class="line"><span class="comment">/* 预处理后 */</span></div><div class="line"><span class="keyword">if</span> (cond)</div><div class="line">    a(); b()</div><div class="line"><span class="keyword">else</span> <span class="comment">/* else 缺乏对应if */</span></div><div class="line">    c();</div></pre></td></tr></table></figure>
<p>只用{} 也不行:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M() &#123; a(); b();&#125;</span></div><div class="line"><span class="keyword">if</span> (cond)</div><div class="line">    M();</div><div class="line"><span class="keyword">else</span></div><div class="line">    c();</div><div class="line"></div><div class="line"><span class="comment">/* 预处理后 */</span></div><div class="line"><span class="keyword">if</span> (cond)</div><div class="line">    &#123; a(); b(); &#125;; <span class="comment">/* 最后的分号代表if 语句结束 */</span></div><div class="line"><span class="keyword">else</span>   <span class="comment">/* else 缺乏对应if */</span></div><div class="line">    c();</div></pre></td></tr></table></figure>
<p>用 do while 就可以了</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M() do &#123; a(); b(); &#125; while(0)</span></div><div class="line"><span class="keyword">if</span> (cond)</div><div class="line">    M();</div><div class="line"><span class="keyword">else</span></div><div class="line">    c();</div><div class="line"></div><div class="line"><span class="comment">/* 预处理后 */</span></div><div class="line"><span class="keyword">if</span> (cond)</div><div class="line">    <span class="keyword">do</span> &#123; a(); b(); &#125; <span class="keyword">while</span>(<span class="number">0</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">    c();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式笔记]]></title>
      <url>https://beim.github.io/2016/10/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>设计模式</p>
<a id="more"></a>
<h1 id="Factory-Method-Insurance"><a href="#Factory-Method-Insurance" class="headerlink" title="Factory Method - Insurance"></a>Factory Method - Insurance</h1><p>工厂方法模式</p>
<p><strong>优点</strong>:</p>
<ul>
<li>工厂方法模式将创建对象的逻辑与任务交给了工厂类</li>
<li>工厂方法模式支持开闭原则</li>
</ul>
<p><strong>适用情况</strong></p>
<ul>
<li>创建某些类的对象的逻辑比较复杂,并且有很多条件分支, 而且还可能增加新的条件.</li>
<li>一个类不能预先准确的知道它必须创建一个层次类中的哪一个子类的对象</li>
<li>一个类适用它的子类决定所要创建的对象</li>
<li>需要封装创建类的对象的逻辑, 使得这些逻辑局部化.</li>
</ul>
<p>简单工厂方法模式与工厂方法模式的区别: <strong>p15</strong></p>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-12-36%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="factory"></p>
<hr>
<h1 id="AbstractFactory-House"><a href="#AbstractFactory-House" class="headerlink" title="AbstractFactory - House"></a>AbstractFactory - House</h1><p>抽象工厂模式</p>
<p>符合开闭原则 和不符合开闭原则的情况: <strong>p22</strong></p>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-13-04%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="absfactory"></p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BuildingFactory(<span class="keyword">abstract</span>)</div><div class="line"></div><div class="line">MediumBuildingFactor    SuperBuildingFactor</div><div class="line"></div><div class="line">MediumHouse MediumCondo    SuperHouse SuperCondo</div><div class="line"></div><div class="line">House&lt;<span class="keyword">interface</span>&gt; Condo&lt;<span class="keyword">interface</span>&gt;</div></pre></td></tr></table></figure>
<hr>
<h1 id="Adapter-CustomerInfo-check"><a href="#Adapter-CustomerInfo-check" class="headerlink" title="Adapter-CustomerInfo-check"></a>Adapter-CustomerInfo-check</h1><p>适配器模式</p>
<p>为了解决接口不一致的问题, 两个软件模块之间往往需要通过一个适配器类Adapter 进行适配, 这样的模式叫做适配器设计模式.</p>
<p><strong>适用情况</strong></p>
<ul>
<li>当系统想要使用现有的类, 但是现有类的接口不符合系统需要时.</li>
<li>当需要通过创建一个可复用的类, 使得本来接口不相容并且无关的类结合在一起工作时.</li>
<li>在设计中需要改变多个子类接口, 在作用相同但名称不同的类或方法之间进行适配时.</li>
</ul>
<p><strong>两种模式</strong></p>
<ul>
<li>类适配器模式</li>
<li>对象适配器模式 <code>和类适配器模式相同思路, 但是在Adapter 类中, 调用adaptee 的方法, 而不是继承adaptee</code></li>
</ul>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-13-28%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="adapter"></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CusInfoValidator&lt;<span class="class"><span class="keyword">interface</span>&gt;    <span class="title">InfoValidation</span></span></div><div class="line"></div><div class="line"><span class="title">InformationAdapter</span> <span class="keyword">extends</span> ... <span class="keyword">implements</span> ...</div></pre></td></tr></table></figure>
<hr>
<h1 id="Bridge-AgentInfo"><a href="#Bridge-AgentInfo" class="headerlink" title="Bridge-AgentInfo"></a>Bridge-AgentInfo</h1><p>桥接模式</p>
<p>桥接模式是指将抽象部分与它的实现部分分离, 使它们可以独立地变化.<br>桥接模式强调对象有两个以上的维度变化, 简化多级集成关系, 但同时增加了聚合对象的内部方法, 因为它不得不多写方法以便包含它的类调用.</p>
<p><strong>优点</strong></p>
<ul>
<li>分离接口和实现部分. 一个实现不必固定的绑定一个接口. 一个抽象类的实现可以在系统运行时进行配置, 一个对象甚至可以在运行时改变它的实现.</li>
<li>提高了可扩展性. 可以独立的对Abstraction 和Implementor 层次结构进行扩展</li>
<li>实现细节对客户的透明. 可以对客户隐藏实现细节.</li>
</ul>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-14-04%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="bridge"></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AgentInfo(<span class="keyword">abstract</span>)</div><div class="line"></div><div class="line">EncryptedInfo1  EncryptedInfo2</div><div class="line"></div><div class="line">MessageWriter&lt;<span class="class"><span class="keyword">interface</span>&gt;</span></div><div class="line"></div><div class="line">FileWriter  DBWriter</div></pre></td></tr></table></figure>
<hr>
<h1 id="Facade-usrInfoValidation"><a href="#Facade-usrInfoValidation" class="headerlink" title="Facade-usrInfoValidation"></a>Facade-usrInfoValidation</h1><p>外观模式</p>
<p>用来隐藏一个软件系统的内部细节, 为一系列复杂的接口提供一个统一的接口, 使该系统更容易使用.</p>
<p><strong>优点</strong><br>利用外观模式可以去掉子系统与客户程序之间的直接绑定, 从而提高子系统的独立性, 也降低 了客户程序与子程序的直接耦合度. 此外, 利用外观模式可以使系统层次化.</p>
<p><strong>缺点</strong><br>对于那些不需要定制的用户来说, 例如一个熟练的程序员要写一些复杂的功能, 而外观类中没有这样的功能, 因此外观模式可能对它们没有帮助. 在这种情况下, 用户程序可以直接绕过外观模式, 而直接调用子系统类库.</p>
<p><code>适配器模式</code>与<code>外观模式</code>的区别</p>
<ul>
<li>适配器模式转换接口的目的是将一个不适合使用的接口转换为可以被使用的接口, 或者将一些接口不同而功能相同或者相近的接口加以转换, 以便可以被统一使用.</li>
<li>外观模式简化接口是为了更好地使用某个类库, 为一系列复杂的接口提供一个统一的接口</li>
</ul>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-14-22%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="facade"></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="section">CustomerFacade</span> &#123;</div><div class="line">    <span class="attribute">Account</span> accountObj;</div><div class="line">    <span class="attribute">CreditCard</span> creditCardObj;</div><div class="line">    <span class="attribute">Address</span> addressObj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attribute">Account</span> CreditCard Address</div></pre></td></tr></table></figure>
<hr>
<h1 id="Strategy-Sorting"><a href="#Strategy-Sorting" class="headerlink" title="Strategy-Sorting"></a>Strategy-Sorting</h1><p>策略模式</p>
<p>下面定义了一系列的算法, 将每一个算法封装起来, 并且使它们之间可以相互替换. 策略模式让算法的变化不会影响到使用算法的客户.</p>
<p><strong>优点</strong></p>
<ul>
<li>得到一系列可以复用的算法, 这些算法集成一个共同的抽象类, 因此共有的功能可以放到超类中.</li>
<li>将不同算法封装在不同的策略子类中, 使逻辑更加清晰, 各个算法可以独立地变化.</li>
<li>使功能改变或者扩展更容易.</li>
</ul>
<p><strong>缺点</strong><br>客户程序必须知道不同策略接口的各个子类的行为, 必须理解每个子类有哪些不同.</p>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-14-40%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="strategy"></p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Context</span></div><div class="line"></div><div class="line">SortAlgorithm&lt;interface&gt;</div><div class="line"></div><div class="line"><span class="keyword">InsertionSort </span> QuickSort  <span class="keyword">BubbleSort </span> HeapSort</div></pre></td></tr></table></figure>
<hr>
<h1 id="State-BankAccount-typical-2"><a href="#State-BankAccount-typical-2" class="headerlink" title="State-BankAccount-typical-2"></a>State-BankAccount-typical-2</h1><p>状态模式</p>
<p>在面向对象设计中, 在依赖于状态的对象中, 对象的行为依赖于状态.</p>
<p>状态模式将不同状态下的行为封装在不同的类中, 每个类代表一个状态.</p>
<p><strong>优点</strong></p>
<ul>
<li>因为状态相关的代码都被封装在各个状态子类中, 所以容易添加新的状态, 只需要定义并添加新的状态子类和新的状态变化关系即可. 有时其他的类也需要较少的修改.</li>
<li>将不同的状态封装成不同的类使得状态迁移很明确, 并且可以防止Context 类将状态弄混乱了</li>
</ul>
<p><strong>适用</strong></p>
<ul>
<li>当对象的行为依赖于状态, 对象要在运行时改变状态时使用状态模式</li>
<li>当操作带有大量依赖于状态的条件语句时使用该模式. 通常许多操作都含有相同的条件结构, 状态模式将条件结构的每个分支包装成独立分支的类, 使得在不同状态下的行为可以独立变化.</li>
</ul>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-15-02%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="state"></p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BankContext  &lt;-&gt;  State(<span class="built_in">abstract</span>)</div><div class="line"></div><div class="line">NoTransactionFeeState  TransactionFeeState  OverDrawnState</div></pre></td></tr></table></figure>
<hr>
<h1 id="Visitor-ComputerParts"><a href="#Visitor-ComputerParts" class="headerlink" title="Visitor-ComputerParts"></a>Visitor-ComputerParts</h1><p>访问者模式</p>
<p>访问者模式在处理数据结构较稳定, 但是作用于其上的操作需要经常变化的问题是非常有效的.</p>
<p>访问者模式是指作用于一个对象结构体上的元素的操作. 访问者可以使用户在不改变该结构体的类的基础上定义一个新的操作.</p>
<p><strong>优点</strong></p>
<ul>
<li>使得在访问者类中针对复杂类结构中的某个类添加新方法较为容易, 即只需要简单的添加一个新的访问者方法即可. </li>
<li>访问者将相关的方法集中在一个具体的访问者类中, 而将其他相关的方法集中在另外一个具体的访问者类中. 也就是说, 访问者子类是按照方法的类型来分类的.</li>
</ul>
<p><strong>缺点</strong><br>增加一个具体的新ConcreteElement 类比较困难. 因为此时需要在每个ConcreteVisitor 类中添加该ConcreteElement 类的访问方法.(所以其适合数据结构稳定的情况)</p>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-15-22%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="visitor"></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CompositeStructure</div><div class="line"></div><div class="line">ComputerParts</div><div class="line"></div><div class="line">Memory  VideoCard  <span class="literal">Monitor</span></div><div class="line"></div><div class="line">Visitor</div><div class="line"></div><div class="line">PriceVisitor  Parts<span class="literal">Inf</span>oVisitor</div></pre></td></tr></table></figure>
<hr>
<h1 id="Mediator-Tour-Hotel-Flight"><a href="#Mediator-Tour-Hotel-Flight" class="headerlink" title="Mediator-Tour-Hotel-Flight"></a>Mediator-Tour-Hotel-Flight</h1><p>中介者模式</p>
<p>中介者模式将所有对象之间的交互细节抽象到一个独立的类中,对象之间的交互经由这个独立的类完成.</p>
<p><strong>优点</strong></p>
<ul>
<li>所有对象的交互行为都被转入到一个独立的中介者对象中, 使得用户更容易通过中介者修改对象之间的相互关系行为. 当修改一个交互行为的时候, 可以通过修改或者更换其中一个具体的中介者子类来完成. 另外, 将对象的交互转移到一个专门的类中也提高了对象的可重用性.</li>
<li>因为对象之间不直接有交互, 使对象的单元测试更容易.</li>
<li>低耦合使得一个类的修改不会影响到其他的类.</li>
</ul>
<p><img src="http://ob4a6y748.bkt.clouddn.com/2016-10-10%2020-15-46%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="mediator"></p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BusinessMediator</span></div><div class="line"></div><div class="line"><span class="symbol">AirlineGUI</span>  HotelGUI  TourGUI</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[dns相关的小实践]]></title>
      <url>https://beim.github.io/2016/10/07/dns%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B0%8F%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>dig 命令可以跟踪dns 查询的路径.<br>如<code>dig www.baidu.com +trace</code></p>
<p>ubuntu 系统下<code>/etc/resolv.conf</code> 配置文件, 用来设置DNS 服务器的IP 地址及DNS 域名, 还包含了主机的域名搜索顺序.</p>
<p>文件<code>/etc/resolve.conf</code> 内容如下:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Dynamic resolv.<span class="keyword">conf</span>(5) <span class="keyword">file</span> <span class="keyword">for</span> glibc resolver(3) generated <span class="keyword">by</span> resolvconf(8)</div><div class="line">#     <span class="keyword">DO</span> NOT <span class="keyword">EDIT</span> THIS <span class="keyword">FILE</span> <span class="keyword">BY</span> HAND -- YOUR CHANGES WILL BE OVERWRITTEN</div><div class="line">nameserver 127.0.0.1</div><div class="line"><span class="keyword">search</span> lan</div></pre></td></tr></table></figure></p>
<p>执行命令<code>dig www.kicker.com.cn + trace</code></p>
<p>输出结果:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; www.kicker.com.cn +trace</span></div><div class="line"><span class="comment">;; global options: +cmd</span></div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	b.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	k.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	e.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	f.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	c.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	l.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	m.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	a.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	g.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	j.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	d.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	i.root-servers.net.</div><div class="line">.			<span class="number">478606</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	h.root-servers.net.</div><div class="line"><span class="comment">;; Received 239 bytes from 127.0.0.1#53(127.0.0.1) in 2 ms</span></div><div class="line"></div><div class="line">cn.			<span class="number">172800</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	d.dns.cn.</div><div class="line">cn.			<span class="number">172800</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	a.dns.cn.</div><div class="line">cn.			<span class="number">172800</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	e.dns.cn.</div><div class="line">cn.			<span class="number">172800</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	c.dns.cn.</div><div class="line">cn.			<span class="number">172800</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	ns.cernet.net.</div><div class="line">cn.			<span class="number">172800</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	b.dns.cn.</div><div class="line">cn.			<span class="number">86400</span>	<span class="keyword">IN</span>	<span class="keyword">DS</span>	<span class="number">41470 8 2</span> <span class="number">3623</span>FB6E3B1F69C6855DA1E48D3A38236DD2EDF0380FB018FF538650 EAC2C4DD</div><div class="line">cn.			<span class="number">86400</span>	<span class="keyword">IN</span>	<span class="keyword">RRSIG</span>	<span class="keyword">DS</span> <span class="number">8 1 86400</span> <span class="number">20161020020000</span> <span class="number">20161007010000</span> <span class="number">39291</span> . A2tSyIt/guVEItqdJgKF7h765ACBXXhA6zQGVNfYYbpeupuDju37nXm5 Z44h9TlVa2RIkM9Jq8x0SMuH5cm1G4opXU1zHZgUvhC+<span class="number">1</span>feGfEnZ26Py fXZ3hTBT+uNwU/gnRZgvEvfORwU4BNfjKyrHmk/tXKYcARXOMK9Nb3PA BBJ2vshXDn6quUtElmP3CktvXDzpC/<span class="number">7</span>pT6HMgaBOYxWYxao9W0UsEDZQ cxWpXBu7Psj7a/<span class="number">11</span>kMQGZNONU65P13e3QK8zlF6BMDZDMJH9tIBJF8v6 udnjKVx8bnkqJza//<span class="number">19</span>PxtiSDf3KHvFKE7cH5sv0G1Zr3yMLNfG5/aTs qBlX+<span class="keyword">A</span>==</div><div class="line"><span class="comment">;; Received 644 bytes from 199.7.91.13#53(d.root-servers.net) in 370 ms</span></div><div class="line"></div><div class="line">kicker.com.cn.		<span class="number">86400</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	ns.nagor.com.cn.</div><div class="line">kicker.com.cn.		<span class="number">86400</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	ns.nagor.cn.</div><div class="line">GICE14DNTMDN31G43AUGVRKTKALVB8QC.com.cn. <span class="number">21600</span> <span class="keyword">IN</span> <span class="keyword">NSEC</span><span class="number">3	1 1 10</span> AEF123AB MI2OUBFA49Q47917BR600DOL1QGRP79T <span class="keyword">NS</span> <span class="keyword">SOA</span> <span class="keyword">RRSIG</span> <span class="keyword">DNSKEY</span> <span class="keyword">NSEC3PARAM</span></div><div class="line">GICE14DNTMDN31G43AUGVRKTKALVB8QC.com.cn. <span class="number">21600</span> <span class="keyword">IN</span> <span class="keyword">RRSIG</span>	<span class="keyword">NSEC3</span> <span class="number">8 3 21600</span> <span class="number">20161020002013</span> <span class="number">20160920000126</span> <span class="number">15399</span> com.cn. jDuJAUMvAwNM3kPNu3bVyk1VMZInBfUKiD6/lutPeAjrudbIj7qFkTxM F164SK96QaYMWZMg7sHThlA9S5DoDE3rEh9vF01qcsg1pxA7+m9lDFSn Q0dQ8hU078oCPnH4JPzgB5obiSc2OmcgFml5vaIMiWT+Rpe9V3ZCkX7W z7Q=</div><div class="line">MI2OUBFA49Q47917BR600DOL1QGRP79T.com.cn. <span class="number">21600</span> <span class="keyword">IN</span> <span class="keyword">NSEC</span><span class="number">3	1 1 10</span> AEF123AB UQROTQK62NOIM5U43DMF7AMC8JJFRM7T <span class="keyword">TXT</span> <span class="keyword">RRSIG</span></div><div class="line">MI2OUBFA49Q47917BR600DOL1QGRP79T.com.cn. <span class="number">21600</span> <span class="keyword">IN</span> <span class="keyword">RRSIG</span>	<span class="keyword">NSEC3</span> <span class="number">8 3 21600</span> <span class="number">20161019013404</span> <span class="number">20160919011226</span> <span class="number">15399</span> com.cn. Rw7vfPaOa+UB9TpAHniy3XOk8UcZFHo1w7Qlq0gjX/gBBQY1vUR10BeI x0kodMsNRkHkvjvWkHfxAu/A8rR0X4xOuJkYZGBnR0YYVnP/N3YGHoz3 C6QOM47dyogMIOg/zVpnYjubpaILGpNY5ddZaJLF2sKz9SvJ0NXCQIyg lGQ=</div><div class="line"><span class="comment">;; Received 591 bytes from 203.119.25.1#53(a.dns.cn) in 22 ms</span></div><div class="line"></div><div class="line">www.kicker.com.cn.	<span class="number">600</span>	<span class="keyword">IN</span>	<span class="keyword">A</span>	<span class="number">192.161.49.88</span></div><div class="line">kicker.com.cn.		<span class="number">7200</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	ns1.dnsnw.com.</div><div class="line">kicker.com.cn.		<span class="number">7200</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	ns2.dnsnw.com.</div><div class="line">kicker.com.cn.		<span class="number">7200</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	ns.nagor.cn.</div><div class="line">kicker.com.cn.		<span class="number">7200</span>	<span class="keyword">IN</span>	<span class="keyword">NS</span>	ns.nagor.com.cn.</div><div class="line"><span class="comment">;; Received 159 bytes from 218.66.171.170#53(ns.nagor.com.cn) in 54 ms</span></div></pre></td></tr></table></figure></p>
<p>解释一下过程</p>
<ol>
<li><p>访问本地域名服务器(127.0.0.1)(16行), 获得根域名服务器的记录(.)</p>
</li>
<li><p>访问(.)的域名服务器, 获得(cn.)的记录</p>
</li>
<li><p>访问(cn.)的域名服务器, 获得(kicker.com.cn.) 的记录</p>
</li>
<li><p>访问(kicker.com.cn.) 的域名服务器, 获得(www.kicker.com.cn)的ip地址</p>
</li>
</ol>
<p><strong>A记录</strong><br>A记录（即地址记录，也称为主机记录）将一个网域关联到托管该网域服务的计算机的物理IP地址。</p>
<p><strong>NS记录</strong><br>域名服务器(NS)记录用于确定哪些服务器为一个网域传达DNS信息。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cpp-泛型算法参考]]></title>
      <url>https://beim.github.io/2016/10/06/cpp-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%E5%8F%82%E8%80%83/</url>
      <content type="html"><![CDATA[<p>所有的泛型算法(generic algorithm), 除了极少数外, 前两个参数皆为一组iterator, 用来标示欲遍历的容器(container) 元素的范围. 范围系为[iterator1, iterator2)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> array_size = <span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> iarray[array_size] = &#123;<span class="number">1</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">8</span>&#125;;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(iarray, iarray + array_size);</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find(vec.begin(), vec.end(), value);</div><div class="line"><span class="keyword">int</span> *pi = find(iarray, iarray + array_size, value);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>算法通常有重载的两个版本: 版本一使用底层元素所属类型的内置运算符, 包括equality 运算符和less-than 运算符. 版本二接受function object 或function pointer 的传入, 借此提供和内置运算符不同的行为.<br>例如, 默认情形下, sort() 会使用less-than 来排序. 如果要改变这一行为, 我们可以传入预先定义好的greater function object:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sort(<span class="name">vec</span>.begin(), vec.end())<span class="comment">;</span></div><div class="line">sort(<span class="name">vec</span>.begin(), vec.end(), greater&lt;int&gt; ())<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>不过, 另有一些算法以不同的名称区分不同版本,形成两个函数; 以_if 为名称后缀的, 使用的是”可指定特定行为”的那个版本.<br>许多<code>会更改目标容器之内容</code>的算法, 都提供两种版本: 一种称为in-place (就地) 版本, 会改变容器的内容. 另一种称为copy 版本, 不改变传入容器的内容, 而是先为它制作一份副本, 再改变副本的内容, 然后返回该副本.</p>
<ul>
<li>如下array, vector, list 被用来作为下文所列泛型算法的函数参数:</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int ia[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">28</span>, <span class="number">36</span>&#125;;</div><div class="line"><span class="type">vector</span>&lt;int&gt; ivec(ia, ia + <span class="number">8</span>);</div><div class="line"><span class="type">list</span>&lt;int&gt; ilist(ia, ia + <span class="number">8</span>);</div><div class="line"></div><div class="line"><span class="type">string</span> sa[<span class="number">10</span>] = &#123;<span class="string">"The"</span>, <span class="string">"light"</span>, <span class="string">"untonsured"</span>, <span class="string">"hair"</span>, <span class="string">"grained"</span>, <span class="string">"and"</span>, <span class="string">"hued"</span>, <span class="string">"like"</span>, <span class="string">"pale"</span>, <span class="string">"oak"</span>&#125;;</div><div class="line"><span class="type">vector</span>&lt;<span class="type">string</span>&gt; svec(sa, sa + <span class="number">10</span>);</div><div class="line"><span class="type">list</span>&lt;<span class="type">string</span>&gt; slist(sa, sa + <span class="number">10</span>);</div></pre></td></tr></table></figure>
<h2 id="accumulate-元素累加"><a href="#accumulate-元素累加" class="headerlink" title="accumulate() 元素累加"></a>accumulate() 元素累加</h2><p>默认情形下, 它会将容器内的所有元素相加, 再加上第三个参数所指定的初值. 也可以借由传入一个二元运算, 取代默认的”相加”操作.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></div><div class="line"></div><div class="line">iresult = accumulate(ia, ia + <span class="number">8</span>, <span class="number">0</span>);</div><div class="line">iresult = accumulate(ilist.<span class="built_in">begin</span>, ilist.<span class="built_in">end</span>(), <span class="number">0</span>, plus&lt;<span class="keyword">int</span>&gt; ());</div></pre></td></tr></table></figure>
<h2 id="adjacent-difference-相邻元素的差额"><a href="#adjacent-difference-相邻元素的差额" class="headerlink" title="adjacent_difference() 相邻元素的差额"></a>adjacent_difference() 相邻元素的差额</h2><p>默认情形下, 它会产生一个新数列. 此数列中除了第一个元素, 每个元素都是原数列的<code>相同位置</code>及<code>前一位置</code>两元素的差额. 假设原数列为{0, 1, 2, 3, 5, 8}, 那么产生出来的新数列就是{0, 1, 0, 1, 1, 2, 3}. 它可以借由一个二元运算, 取代默认的<code>相减</code>操作. 第三个参数是个iterator, 指向一个容器, 用来放置执行结果.</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#include &lt;numeric&gt;</div><div class="line"></div><div class="line">adjacent_difference(<span class="name">ilist</span>.begin(), ilist.end(), iresult.begin())<span class="comment">;</span></div><div class="line">adjacent_difference(<span class="name">ilist</span>.begin(), ilist.end(), iresult.begin(), multiplies&lt;int&gt; ())<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="adjacent-find-搜寻相邻的重复元素"><a href="#adjacent-find-搜寻相邻的重复元素" class="headerlink" title="adjacent_find()  搜寻相邻的重复元素"></a>adjacent_find()  搜寻相邻的重复元素</h2><p>默认情况下, 它会搜索第一组<code>相邻且其值重复</code>的元素. 可用某个二元运算符取代内置的equality 运算符. 本函数会返回一个iterator, 指向两个重复元素中的第一个.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> TwiceOver &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> val1, <span class="keyword">int</span> val2)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> val1 == val2 / <span class="number">2</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">piter = adjacent_find(ia, ia + <span class="number">8</span>);</div><div class="line">iter = adjacent_find(vec.begin(), vec.end(), TwiceOver());</div></pre></td></tr></table></figure>
<h2 id="binary-search-二元搜索"><a href="#binary-search-二元搜索" class="headerlink" title="binary_search()  二元搜索"></a>binary_search()  二元搜索</h2><p>binary_search() 假设其处理对象已经以less-than 运算符加以排序. 如果该容器以其他方式完成排序, 那么调用binary_search() 时就得传入该二元运算符. 此算法会返回true 或false.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line">found_it =  binary_search(ilist.<span class="built_in">begin</span>(), ilist.<span class="built_in">end</span>(), value);</div><div class="line">found_it = binary_search(vec.<span class="built_in">begin</span>, vec.<span class="built_in">end</span>(), value, greater&lt;<span class="keyword">int</span>&gt; ());</div></pre></td></tr></table></figure>
<h2 id="copy-复制"><a href="#copy-复制" class="headerlink" title="copy() 复制"></a>copy() 复制</h2><p>将第一个容器的元素复制到第二个容器.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line">ostream_iterator&lt;<span class="keyword">int</span>&gt; ofile(cout, <span class="string">" "</span>);</div><div class="line">copy(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), ofile);</div></pre></td></tr></table></figure>
<h2 id="copy-backword-逆向复制"><a href="#copy-backword-逆向复制" class="headerlink" title="copy_backword() 逆向复制"></a>copy_backword() 逆向复制</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line">copy_backword(svec.<span class="built_in">begin</span>(), svec.<span class="built_in">end</span>(), target.<span class="built_in">begin</span>());</div></pre></td></tr></table></figure>
<h2 id="count-计数"><a href="#count-计数" class="headerlink" title="count() 计数"></a>count() 计数</h2><p>返回容器中与制定值相等的元素个数</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line">cout &lt;&lt; value &lt;&lt; <span class="string">" occurs "</span></div><div class="line">     &lt;&lt; count(svec.<span class="built_in">begin</span>(), svec.<span class="built_in">end</span>(), value)</div><div class="line">     &lt;&lt; <span class="string">" times in string vector.\n"</span>;</div></pre></td></tr></table></figure>
<h2 id="count-if-在特定条件下计数"><a href="#count-if-在特定条件下计数" class="headerlink" title="count_if() 在特定条件下计数"></a>count_if() 在特定条件下计数</h2><p>返回容器中<code>元素值被某特定运算符求值为true</code>的元素个数.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> Even &#123;</div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>() (<span class="keyword">int</span> val) &#123;</div><div class="line">            <span class="built_in">return</span> !(val % <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">ires = count_if(ia, ia + <span class="number">8</span>, bind2nd(less&lt;<span class="keyword">int</span>&gt;(), <span class="number">10</span>));</div><div class="line">ires = count_if(ilist.<span class="built_in">begin</span>(), ilist_end(), Even());</div></pre></td></tr></table></figure>
<h2 id="equal-判断相等与否"><a href="#equal-判断相等与否" class="headerlink" title="equal() 判断相等与否"></a>equal() 判断相等与否</h2><p>如果两数列的各元素值都相同, 就返回true. 如果第二数列的元素比较多, 多出来的元素不予考虑. 默认使用equality 运算符, 但也可以传入一个二元的function object 或function pointer, 用以指定另一种比较方式.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> EqualAndOdd &#123;</div><div class="line">    <span class="keyword">public</span>: </div><div class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> ((v1 == v2) &amp;&amp; (v1 % <span class="number">2</span>));</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ia1[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>&#125;;</div><div class="line"><span class="keyword">int</span> ia2[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>&#125;;</div><div class="line">res = equal(ia1, ia1 + <span class="number">7</span>, ia2); <span class="comment">// true</span></div><div class="line">res = equal(ia1, ia1 + <span class="number">7</span>, ia2, equalAndOdd()); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="fill-改填元素值"><a href="#fill-改填元素值" class="headerlink" title="fill() 改填元素值"></a>fill() 改填元素值</h2><p>将容器内的每一个元素一一设定为某特定值.</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">fill</span>(ivec.<span class="built_in">begin</span>(), ivec.<span class="built_in">end</span>(), value);</div></pre></td></tr></table></figure>
<h2 id="fill-n-改填元素值"><a href="#fill-n-改填元素值" class="headerlink" title="fill_n() 改填元素值"></a>fill_n() 改填元素值</h2><p>将容器内的每个元素一一设为某特定值; 只设定n个元素</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;algorithm&gt;</span></div><div class="line"></div><div class="line">fill_n(ia, <span class="built_in">count</span>, value)<span class="comment">;</span></div><div class="line">fill_n(svec.<span class="keyword">begin(), </span><span class="built_in">count</span>, string_value)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="find-搜索"><a href="#find-搜索" class="headerlink" title="find() 搜索"></a>find() 搜索</h2><p>容器内的元素被一一拿出来和特定值比较. 一旦遇到相符的元素, 搜索操作便结束. find() 返回一个iterator, 指向该元素. 如果没有任何相符元素, 就返回容器的end().</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line">piter = <span class="built_in">find</span>(ia, ia + <span class="number">8</span>, value);</div><div class="line">iter = <span class="built_in">find</span>(svec.<span class="built_in">begin</span>(), svec.<span class="built_in">end</span>(), <span class="string">"rosebud"</span>);</div></pre></td></tr></table></figure>
<h2 id="find-end-搜索某个子序列的最后一次出现地点"><a href="#find-end-搜索某个子序列的最后一次出现地点" class="headerlink" title="find_end() 搜索某个子序列的最后一次出现地点"></a>find_end() 搜索某个子序列的最后一次出现地点</h2><p>此算法接受两组iterator. 第一组iterator 标示被搜索的容器范围. 第二组iterator 标示作为比对标准的一组元素序列. find_end() 会找出容器内出现<code>比对元素序列</code>的最后一次位置. 比对方式默认是equality 运算符, 但亦允许另行制定一个二元运算. 如果比对成功, 就返回iterator 指向符合条件的位置. 如果比对失败(找不到吻合序列), 就返回所指定之容器范围的末尾(亦即find_end() 的第二参数). 举个例子, 给定字符序列Mississippi 及第二序列ss, find_end() 会返回一个iterator, 指向Mississippi 中的第二个ss 子序列的第一个s 位置.</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">int ia[<span class="number">17</span>] = &#123;<span class="number">7</span> , <span class="number">3</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</div><div class="line">int seq[<span class="number">3</span>] = &#123;<span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">// found_it 指向ia[10]</span></div><div class="line">found_it = find_end(ia, ia + <span class="number">17</span>, seq, seq + <span class="number">3</span>);</div></pre></td></tr></table></figure>
<h2 id="find-first-of-搜索某些元素的首次出现地点"><a href="#find-first-of-搜索某些元素的首次出现地点" class="headerlink" title="find_first_of() 搜索某些元素的首次出现地点"></a>find_first_of() 搜索某些元素的首次出现地点</h2><p>此算法接受两组iterator. 第一组iterator 标示被搜索的容器范围. 第二组iterator 标示作为比对标准的一组元素序列. 举个例子, 如果我们想找出字符串synesthesia 中的第一个元音字母, 我们把第二字符串定义为aeiou. 如果第一序列中存在第二序列的任一元素, find_first_of() 便返回一个iterator, 指向第一个出现的元素—本例为第一个e. 如果第一序列中并不存在第二序列的任何元素值, 变返回一个iterator, 指向第一序列的末尾. 可选的第五参数, 允许你指定一个二元运算, 借此改用equality 运算符以外的比较方式.</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">string</span> s_array[] = &#123;<span class="string">"Ee"</span>, <span class="string">"eE"</span>, <span class="string">"ee"</span>, <span class="string">"Oo"</span>, <span class="string">"oo"</span>, <span class="string">"ee"</span>&#125;<span class="comment">;</span></div><div class="line"><span class="built_in">string</span> to_find[] = &#123;<span class="string">"oo"</span>, <span class="string">"gg"</span>, <span class="string">"ee"</span>&#125;<span class="comment">;</span></div><div class="line"></div><div class="line">// 返回第一次出现<span class="string">"ee"</span> 的位置. 答案将是&amp;s_array[<span class="number">2</span>]</div><div class="line">found_it = find_first_of&#123;s_array, s_array + <span class="number">6</span>, to_find, to_find + <span class="number">3</span>&#125;<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="find-if-在特定条件下搜索"><a href="#find-if-在特定条件下搜索" class="headerlink" title="find_if() 在特定条件下搜索"></a>find_if() 在特定条件下搜索</h2><p>容器内的元素会被一一施以特定的二元运算, 测试是否符合条件. 如果找到符合条件的元素, 搜索操作便结束, 并返回一个iterator 指向该元素. 如果没有找到符合条件的元素, 就返回容器的end(). </p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> &lt;algorithm&gt;</span></div><div class="line"></div><div class="line">find_if(<span class="built_in">vec</span>.begin(), <span class="built_in">vec</span>.<span class="keyword">end</span>(), LessThanVal(ival));</div></pre></td></tr></table></figure>
<h2 id="for-each-对范围内的第一个元素应用某个操作"><a href="#for-each-对范围内的第一个元素应用某个操作" class="headerlink" title="for_each() 对范围内的第一个元素应用某个操作"></a>for_each() 对范围内的第一个元素应用某个操作</h2><p>for_each() 的第三个参数用来表示<code>将依次应用于每个元素身上</code>的运算. 这个运算不得更改元素值, 如果要更改元素值, 可使用transform(). 指定的运算如果有返回值, 该值会被忽略.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_elements</span><span class="params">(Type elem)</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for_each(ivec.begin(), ivec.end(), print_elements);</div></pre></td></tr></table></figure>
<h2 id="generate-以指定操作的运算结果填充特定范围内的元素"><a href="#generate-以指定操作的运算结果填充特定范围内的元素" class="headerlink" title="generate()  以指定操作的运算结果填充特定范围内的元素"></a>generate()  以指定操作的运算结果填充特定范围内的元素</h2><p>generate() 会将指定操作的运算结果, 填入序列之中.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> GenByTwo &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">static</span> <span class="keyword">int</span> seed = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">return</span> seed +=<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; ilist(<span class="number">10</span>);</div><div class="line"><span class="comment">// 填入ilist 的内容为 1 3 5 7 9 11 13 15 17 19</span></div><div class="line">generate(ilist.begin(), ilist.end(), GenByTwo());</div></pre></td></tr></table></figure>
<h2 id="generate-n-以指定操作的运算结果填充n个元素的内容"><a href="#generate-n-以指定操作的运算结果填充n个元素的内容" class="headerlink" title="generate_n()  以指定操作的运算结果填充n个元素的内容"></a>generate_n()  以指定操作的运算结果填充n个元素的内容</h2><p>generate_n 会连续调用指定操作n次, 并将这n次的结果填入序列的n个元素之中.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">class</span> gen_by_two &#123;</div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        gen_by_two (<span class="keyword">int</span> seed = <span class="number">0</span>) : <span class="number">_</span>seed(seed) &#123;&#125;</div><div class="line">        <span class="function"><span class="keyword">int</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">_</span>seed += <span class="number">2</span>;&#125;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="keyword">int</span> <span class="number">_</span>seed;</div><div class="line">&#125;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec(<span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">// 填入ivec的内容为 102 104 106 108 110 112 114 116 118 120</span></div><div class="line">generate_n(ivec.begin(), ivec.size(), gen_by_two(<span class="number">100</span>));</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[vim-奇技淫巧]]></title>
      <url>https://beim.github.io/2016/10/05/vim-%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p><img src="http://ob4a6y748.bkt.clouddn.com/Vimlogo.svg" alt="vim"></p>
<a id="more"></a>
<h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><table>
<thead>
<tr>
<th>输入</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>w</td>
<td>移动到下一个单词开头</td>
</tr>
<tr>
<td>e</td>
<td>移动到下一个单词结尾</td>
</tr>
<tr>
<td>b</td>
<td>倒退到上一个单词开头</td>
</tr>
<tr>
<td>0</td>
<td>移动到行首</td>
</tr>
<tr>
<td>$</td>
<td>移动到行末</td>
</tr>
<tr>
<td>+</td>
<td>移动到上一行开头</td>
</tr>
<tr>
<td>-</td>
<td>移动到下一行开头</td>
</tr>
<tr>
<td>^</td>
<td>移动到当前行第一个非空格处</td>
</tr>
<tr>
<td></td>
<td>滚动</td>
</tr>
<tr>
<td>ctrl+f</td>
<td>向前滚屏 (front)</td>
</tr>
<tr>
<td>ctrl+b</td>
<td>向后滚屏 (back)</td>
</tr>
<tr>
<td>ctrl+d</td>
<td>向前滚半屏 (down)</td>
</tr>
<tr>
<td>ctrl+u</td>
<td>向后滚半屏 (up)</td>
</tr>
<tr>
<td>ctrl+e</td>
<td>向后滚一行</td>
</tr>
<tr>
<td>ctrl+y</td>
<td>向前滚一行</td>
</tr>
<tr>
<td></td>
<td>z调整滚动</td>
</tr>
<tr>
<td>z<enter></enter></td>
<td>将光标所在行移动到屏幕顶端</td>
</tr>
<tr>
<td>zz</td>
<td>将光标所在行移动到屏幕中间</td>
</tr>
<tr>
<td>z-</td>
<td>将光标所在行移动到屏幕底端</td>
</tr>
<tr>
<td>980zz</td>
<td>将第980行移动到屏幕中间</td>
</tr>
<tr>
<td></td>
<td>在屏幕中移动</td>
</tr>
<tr>
<td>H</td>
<td>移动到屏幕顶端的行 (high)</td>
</tr>
<tr>
<td>M</td>
<td>移动到屏幕中央的行 (middle)</td>
</tr>
<tr>
<td>L</td>
<td>移动到屏幕底端的行 (low)</td>
</tr>
<tr>
<td>nH</td>
<td>移动到屏幕顶端往下第n行</td>
</tr>
<tr>
<td>nL</td>
<td>移动到屏幕顶端往上的第n行</td>
</tr>
<tr>
<td></td>
<td>最强移动</td>
</tr>
<tr>
<td>nG</td>
<td>转至第n行</td>
</tr>
<tr>
<td>G</td>
<td>转至文本末尾</td>
</tr>
<tr>
<td>gg</td>
<td>转至文本开头</td>
</tr>
</tbody>
</table>
<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><table>
<thead>
<tr>
<th>输入</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>光标位置插入</td>
</tr>
<tr>
<td>a</td>
<td>光标位置后插入 (append)</td>
</tr>
<tr>
<td>I</td>
<td>行首插入</td>
</tr>
<tr>
<td>A</td>
<td>行末插入</td>
</tr>
<tr>
<td>o</td>
<td>下一行插入</td>
</tr>
<tr>
<td>O</td>
<td>上一行插入</td>
</tr>
<tr>
<td>cc</td>
<td>当前行根据缩进插入</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[cpp-顺序性容器]]></title>
      <url>https://beim.github.io/2016/10/05/cpp-%E9%A1%BA%E5%BA%8F%E6%80%A7%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>要使用顺序性容器,首先必须包含相关的头文件,也就是以下三者之一:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="定义顺序性容器对象的方式有五种"><a href="#定义顺序性容器对象的方式有五种" class="headerlink" title="定义顺序性容器对象的方式有五种"></a>定义顺序性容器对象的方式有五种</h1><ol>
<li><p>产生空的容器</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; slist;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec;</div></pre></td></tr></table></figure>
</li>
<li><p>产生特定大小的容器.每个元素都以其默认值作为初值.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; ilist(<span class="number">1024</span>);</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; svec(<span class="number">32</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>产生特定大小的容器,并为每个元素赋制定初值</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec(<span class="number">10</span>, <span class="number">-1</span>);</div><div class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; slist(<span class="number">16</span>, <span class="string">"unassigned"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>通过一对iterator 产生容器. 这对iterator 用来标示一整组作为初值的元素的范围;</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int ia[<span class="number">8</span>] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>];</div><div class="line"><span class="type">vector</span>&lt;int&gt; fib(ia, ia + <span class="number">8</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>根据某个容器产生出新容器. 复制原容器内的元素, 作为新容器的初值.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; slist; <span class="comment">// 空容器</span></div><div class="line"><span class="comment">// 填充list...</span></div><div class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; slist2(slist); <span class="comment">// 将slist 复制给slist2</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数:"></a>操作函数:</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">push_back()  // 在末端插入一个元素</div><div class="line">pop_back()  // 在末端删除一个元素, 不返回被删除的元素值.</div><div class="line">push_front()  // 在最前端插入一个元素(list 和deque, 不包括vector)</div><div class="line">pop_front()  // 在最前端删除一个元素(list 和deque, 不包括vector), 不返回被删除的元素值</div><div class="line">front()  // 返回最前端元素的值</div><div class="line">back()  // 返回末端元素的值</div><div class="line"></div><div class="line">iterator <span class="keyword">insert</span>(iterator <span class="keyword">position</span>, elemType <span class="keyword">value</span>) </div><div class="line">将<span class="keyword">value</span> 插入<span class="keyword">position</span> 之前. 它会返回一个iterator, 指向被插入的元素.</div><div class="line"></div><div class="line"><span class="built_in">void</span> <span class="keyword">insert</span>(iterator <span class="keyword">position</span>, <span class="built_in">int</span> <span class="keyword">count</span>, elemType <span class="keyword">value</span>) </div><div class="line">在<span class="keyword">position</span> 之前插入<span class="keyword">count</span> 个元素, 这些元素的值都和<span class="keyword">value</span> 相同.</div><div class="line"></div><div class="line"><span class="built_in">void</span> <span class="keyword">insert</span>(iterator1 <span class="keyword">position</span>, iterator2 <span class="keyword">first</span>, iterator3 <span class="keyword">last</span>)</div><div class="line">可在<span class="keyword">position</span> 之前插入[<span class="keyword">first</span>, <span class="keyword">last</span>) 所标示的各个元素.</div><div class="line"></div><div class="line">// iterator <span class="keyword">insert</span>(iterator <span class="keyword">position</span>) </div><div class="line">// 可在<span class="keyword">position</span> 之前插入元素. 元素的初值为所属类型的默认值.</div><div class="line"></div><div class="line">iterator erase(iterator posit) </div><div class="line">可删除posit 所指的元素</div><div class="line"></div><div class="line">iterator erase(iterator <span class="keyword">first</span>, iterator <span class="keyword">last</span>) </div><div class="line">删除[<span class="keyword">first</span>, <span class="keyword">last</span>) 范围内的元素</div></pre></td></tr></table></figure>
<h1 id="itertor-与-const-iterator-与-const-iterator-区别"><a href="#itertor-与-const-iterator-与-const-iterator-区别" class="headerlink" title="itertor 与 const_iterator 与 const iterator 区别"></a>itertor 与 const_iterator 与 const iterator 区别</h1><p>如果你传递过来一个const 类型的容器, 那么只能用const_iterator 来遍历<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vInt)</span> </span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator iter;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单示例const_iterator 与const iterator<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator citer1 = ivec.begin();</div><div class="line"><span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator citer2 = ivec.begin();</div><div class="line">*citer1 = <span class="number">1</span>; <span class="comment">// error</span></div><div class="line">*citer2 = <span class="number">1</span>; <span class="comment">// right</span></div><div class="line">++citer1; <span class="comment">// right</span></div><div class="line">++citer2; <span class="comment">// error</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>详见 <a href="http://www.cnblogs.com/greatverve/archive/2012/09/12/const-iterator.html" target="_blank" rel="external">博客园</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS-char-code]]></title>
      <url>https://beim.github.io/2016/09/29/JS-char-code/</url>
      <content type="html"><![CDATA[<h2 id="String-fromCharCode"><a href="#String-fromCharCode" class="headerlink" title="String.fromCharCode()"></a>String.fromCharCode()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode" target="_blank" rel="external">MDN</a></p>
<p>String.fromCharCode() 静态方法根据制定的Unicode 编码中的序号值来返回一个字符串<br>由于fromCharCode 是String 的静态方法, 所以应该这样使用: String.fromCharCode(), 而不是作为你创建的String 对象的方法.</p>
<blockquote>
<p>String.fromCharCode(num1, …, numN)</p>
</blockquote>
<p>参数:<br>num1, …, numN<br>    一组序列数字,表示Unicode 值.</p>
<p><code>String.fromCharCode(65, 66, 67) // &quot;ABC&quot;</code></p>
<a id="more"></a>
<hr>
<h2 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint" target="_blank" rel="external">MDN</a></p>
<p>与fromCharCode 功能类似, 但是支持的Unicode 字符更全.<br>由于fromCodePoint() 是String 的一个静态方法, 所以只能通过String.fromCodePoint() 这样的方式来使用, 不能在String 对象的实例上直接调用.</p>
<hr>
<h2 id="String-prototype-charAt"><a href="#String-prototype-charAt" class="headerlink" title="String.prototype.charAt()"></a>String.prototype.charAt()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="external">MDN</a></p>
<p>charAt() 方法返回字符串中指定位置的字符</p>
<blockquote>
<p>str.charAt(index)</p>
</blockquote>
<p>参数:<br>index<br>    0 到 字符串长度-1 的一个整数</p>
<p><code>&#39;abc&#39;.charAt(1) // &#39;b&#39;</code></p>
<hr>
<h2 id="String-prototype-charCodeAt"><a href="#String-prototype-charCodeAt" class="headerlink" title="String.prototype.charCodeAt()"></a>String.prototype.charCodeAt()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank" rel="external">MDN</a></p>
<p>charCodeAt() 方法返回0到65535 之间的整数, 代表索引处字符的UTF-16编码单元, 如果你希望得到整点编码值, 使用codePointAt()</p>
<blockquote>
<p>str.charCodeAt(index)</p>
</blockquote>
<p>参数:<br>index<br>    一个大于等于0, 小于字符串长度的整数. 如果不是一个数值, 则默认为0</p>
<p>如果index 小于0 或不小于字符串的长度, 则返回NaN</p>
<p><code>&quot;ABC&quot;.charCodeAt(0) // 65</code></p>
<hr>
<h2 id="String-prototype-codePointAt"><a href="#String-prototype-codePointAt" class="headerlink" title="String.prototype.codePointAt()"></a>String.prototype.codePointAt()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt" target="_blank" rel="external">MDN</a></p>
<p>codePointAt() 方法返回一个代表unicode 编码的非负整数</p>
<blockquote>
<p>str.codePointAt(pos)</p>
</blockquote>
<p>参数:<br>pos<br>    指向字符串中需要返回编码的元素的位置</p>
<p>如果pos 指向的位置没有元素, 将返回undefined</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'ABC'</span>.codePointAt(<span class="number">1</span>) <span class="comment">// 66</span></div><div class="line"><span class="string">'\uD800\uDC00'</span>.codePointAt(<span class="number">0</span>) <span class="comment">// 65536</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS-正则表达式]]></title>
      <url>https://beim.github.io/2016/09/21/JS-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="RegExp-方法"><a href="#RegExp-方法" class="headerlink" title="RegExp 方法"></a>RegExp 方法</h2><ul>
<li><p>RegExp.prototype.exec()</p>
</li>
<li><p>RegExp.prototype.test()</p>
</li>
<li><p>RegExp.prototype.toSource()</p>
</li>
<li><p>RegExp.prototype.toString()</p>
</li>
</ul>
<h2 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h2><ul>
<li><p>String.prototype.match()</p>
</li>
<li><p>String.prototype.replace()</p>
</li>
</ul>
<a id="more"></a>
<h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> patt = /a/</div><div class="line"><span class="keyword">let</span> <span class="keyword">str</span> = <span class="symbol">'abcabc</span>'</div><div class="line"></div><div class="line">patt.exec(<span class="keyword">str</span>) </div><div class="line"><span class="comment">// [ 'a', index: 0, input: 'abcabc' ]</span></div><div class="line">patt.test(<span class="keyword">str</span>) </div><div class="line"><span class="comment">// true </span></div><div class="line"><span class="keyword">str</span>.<span class="keyword">match</span>(patt) </div><div class="line"><span class="comment">// [ 'a', index: 0, input: 'abcabc' ]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> patt1 = /a/g</div><div class="line">patt1.exec(<span class="keyword">str</span>)</div><div class="line"><span class="comment">// [ 'a', index: 0, input: 'abcabc' ]</span></div><div class="line">patt1.test(<span class="keyword">str</span>)</div><div class="line"><span class="comment">// true</span></div><div class="line"><span class="keyword">str</span>.<span class="keyword">match</span>(patt1)</div><div class="line"><span class="comment">// [ 'a', 'a' ]</span></div></pre></td></tr></table></figure>
<h2 id="更多栗子"><a href="#更多栗子" class="headerlink" title="更多栗子"></a>更多栗子</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> patt = /(GET) (HTTP)/</div><div class="line"><span class="keyword">let</span> str = <span class="string">'test GET HTTP'</span></div><div class="line"></div><div class="line">patt.exec(str)</div><div class="line">// [ <span class="string">'GET HTTP'</span>, <span class="string">'GET'</span>, <span class="string">'HTTP'</span>, <span class="built_in">index</span>: <span class="number">5</span>, inpu<span class="variable">t:</span> <span class="string">'test GET HTTP'</span> ]</div><div class="line"></div><div class="line">patt.test(str)</div><div class="line">// true</div><div class="line"></div><div class="line">str.<span class="keyword">match</span>(patt)</div><div class="line">// [ <span class="string">'GET HTTP'</span>, <span class="string">'GET'</span>, <span class="string">'HTTP'</span>, <span class="built_in">index</span>: <span class="number">5</span>, inpu<span class="variable">t:</span> <span class="string">'test GET HTTP'</span> ]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> patt = /(GET) (HTTP)/g</div><div class="line"><span class="keyword">let</span> str = <span class="string">'test GET HTTP'</span></div><div class="line"></div><div class="line">patt.exec(str)</div><div class="line">// [ <span class="string">'GET HTTP'</span>, <span class="string">'GET'</span>, <span class="string">'HTTP'</span>, <span class="built_in">index</span>: <span class="number">5</span>, inpu<span class="variable">t:</span> <span class="string">'test GET HTTP'</span> ]</div><div class="line"></div><div class="line">patt.test(str)</div><div class="line">// true</div><div class="line"></div><div class="line">patt.<span class="keyword">match</span>(str)</div><div class="line">// [<span class="string">'GET HTTP'</span>]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[编译原理2E-笔记]]></title>
      <url>https://beim.github.io/2016/09/14/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%862E-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://ob4a6y748.bkt.clouddn.com/compilers.jpg" alt="compiler"><br><a id="more"></a></p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="第三章词法分析"><a href="#第三章词法分析" class="headerlink" title="第三章词法分析"></a>第三章词法分析</h2><p><strong>3.1.1</strong></p>
<figure class="highlight bnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">&lt;float&gt;</span> <span class="attribute">&lt;id, limitedSquaare&gt;</span> <span class="attribute">&lt;(&gt;</span> <span class="attribute">&lt;id, x&gt;</span> <span class="attribute">&lt;)&gt;</span> <span class="attribute">&lt;&#123;&gt;</span></div><div class="line">  <span class="attribute">&lt;float&gt;</span> <span class="attribute">&lt;id, x&gt;</span></div><div class="line">  <span class="attribute">&lt;return&gt;</span> <span class="attribute">&lt;(&gt;</span> <span class="attribute">&lt;id, x&gt;</span> <span class="attribute">&lt;op,"&lt;="&gt;</span> <span class="attribute">&lt;num, -10.0&gt;</span> <span class="attribute">&lt;op, "||"&gt;</span> <span class="attribute">&lt;id, x&gt;</span> <span class="attribute">&lt;op, "&gt;</span>="&gt; <span class="attribute">&lt;num, 10.0&gt;</span> <span class="attribute">&lt;)&gt;</span> <span class="attribute">&lt;op, "?"&gt;</span> <span class="attribute">&lt;num, 100&gt;</span> <span class="attribute">&lt;op, ":"&gt;</span> <span class="attribute">&lt;id, x&gt;</span> <span class="attribute">&lt;op, "*"&gt;</span> <span class="attribute">&lt;id, x&gt;</span></div><div class="line"><span class="attribute">&lt;&#125;&gt;</span></div></pre></td></tr></table></figure>
<p><strong>3.1.2</strong></p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;text, "Here is a photo of"&gt;</span> <span class="section">&lt;nodeStart, b&gt;</span> <span class="section">&lt;text, "my house"&gt;</span> <span class="section">&lt;nodeEnd, b&gt;</span></div><div class="line"><span class="section">&lt;nodeStart, p&gt;</span> <span class="section">&lt;selfEndNodeStart, IMG&gt;</span> <span class="section">&lt;SRC, "house.gif"&gt;</span> <span class="section">&lt;selfEndNodeEnd, IMG&gt;</span> <span class="section">&lt;selfEndNode, BR&gt;</span></div><div class="line"><span class="section">&lt;text, "See"&gt;</span> <span class="section">&lt;nodeStart, A&gt;</span> <span class="section">&lt;HREF, "morePix.html"&gt;</span> <span class="section">&lt;selfEndNodeEnd, A&gt;</span> <span class="section">&lt;text, "More Pictures"&gt;</span> <span class="section">&lt;nodeEnd, A&gt;</span> <span class="section">&lt;text, "if you liked that one."&gt;</span></div><div class="line"><span class="section">&lt;nodeEnd, p&gt;</span></div></pre></td></tr></table></figure>
<p><strong>3.3.2</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>) <span class="keyword">a</span>开头<span class="keyword">a</span>结尾,中间是大于等于<span class="number">0</span>个<span class="keyword">a</span>或b组成的字符串 如 abababaaba</div><div class="line"><span class="number">2</span>) 任意<span class="keyword">a</span>与b组成的字符串</div><div class="line"><span class="number">3</span>) 以<span class="keyword">a</span> 连接 <span class="keyword">a</span>或b 连接 <span class="keyword">a</span>或b 结尾的任意<span class="keyword">a</span>与b组成的字串</div><div class="line"><span class="number">4</span>) <span class="number">3</span>个b和任意个<span class="keyword">a</span>组成的字串</div><div class="line"><span class="number">5</span>) 偶数个<span class="keyword">a</span>和b组成的字串</div></pre></td></tr></table></figure>
<p><strong>3.3.3</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>) n + <span class="number">1</span></div><div class="line"><span class="number">2</span>) n + <span class="number">1</span></div><div class="line"><span class="number">3</span>) n</div><div class="line"><span class="number">4</span>) (<span class="number">1</span> + n) / <span class="number">2</span> * n + <span class="number">1</span></div><div class="line"><span class="number">5</span>) <span class="number">2</span>^n</div></pre></td></tr></table></figure>
<p><strong>3.3.4</strong></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/select/i</div><div class="line">select -&gt; [<span class="string">Ss</span>][<span class="symbol">Ee</span>][<span class="string">Ll</span>][<span class="symbol">Ee</span>][<span class="string">Cc</span>][<span class="symbol">Tt</span>]</div></pre></td></tr></table></figure>
<p><strong>3.3.5</strong></p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>) want -&gt; other* a (other|<span class="type">a</span>)* e (other|<span class="type">e</span>)* i (other|<span class="type">i</span>)* o (other|<span class="type">o</span>)* u (other|<span class="type">u</span>)*</div><div class="line">    other -&gt; [bcdfghjklmnpqrstvwxyz]</div><div class="line"><span class="number">2</span>) a*b*...z*</div><div class="line"><span class="number">9</span>) b*a*b?a*</div></pre></td></tr></table></figure>
<p><strong>3.3.6</strong></p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>) [a-jA-J]</div><div class="line"><span class="number">2</span>) [bcdfghjklmnpqrstvwxzy]</div><div class="line"><span class="number">3</span>) [<span class="number">0</span><span class="number">-9</span>a-f]</div><div class="line"><span class="number">4</span>) [.?!]</div></pre></td></tr></table></figure>
<p><strong>3.5.2</strong></p>
<blockquote>
<p>deemo.lex</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">%&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ofstream;</div><div class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"out.txt"</span>)</span></span>;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">delim   [ \t\n]</div><div class="line">ws  &#123;delim&#125;+</div><div class="line"></div><div class="line">%%</div><div class="line">&#123;ws&#125;  out &lt;&lt; <span class="string">" "</span>;</div><div class="line">.  out &lt;&lt; yytext;</div><div class="line">%%</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[]) &#123;</div><div class="line">    yylex();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.5.3</strong></p>
<blockquote>
<p>deemo.lex</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">%&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ofstream;</div><div class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"out.txt"</span>)</span></span>;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">delim   [ \t\n]</div><div class="line">ws  &#123;delim&#125;+</div><div class="line"></div><div class="line">%%</div><div class="line">&#123;ws&#125; &#123;out &lt;&lt; yytext;&#125;</div><div class="line"><span class="keyword">float</span>  &#123;out &lt;&lt; <span class="string">"double"</span>;&#125;</div><div class="line">.  &#123;out &lt;&lt; yytext;&#125;</div><div class="line">%%</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[]) &#123;</div><div class="line">    yylex();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.5.4</strong></p>
<blockquote>
<p>deemo.lex</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">%&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ofstream;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"out.txt"</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &amp;cvec, ofstream &amp;os)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cvec.size(); i++) &#123;</div><div class="line">        os &lt;&lt; cvec[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">delim   [ \t\n]</div><div class="line">ws  &#123;delim&#125;+</div><div class="line">letter  [A-Za-z]</div><div class="line">digit  [<span class="number">0</span><span class="number">-9</span>]</div><div class="line">id &#123;letter&#125;(&#123;letter&#125;|&#123;digit&#125;)*</div><div class="line">number  &#123;digit&#125;+(\.&#123;digit&#125;+)?(E[+-]?&#123;digit&#125;+)?</div><div class="line"></div><div class="line">%%</div><div class="line">&#123;ws&#125; &#123;</div><div class="line">    out &lt;&lt; yytext;</div><div class="line">&#125;</div><div class="line">&#123;letter&#125;+  &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; cvec(yytext, yytext + <span class="built_in">strlen</span>(yytext));</div><div class="line">    <span class="keyword">if</span> (cvec[<span class="number">0</span>] != <span class="string">'a'</span> &amp;&amp; cvec[<span class="number">0</span>] != <span class="string">'e'</span> &amp;&amp; cvec[<span class="number">0</span>] != <span class="string">'i'</span> &amp;&amp; cvec[<span class="number">0</span>] != <span class="string">'o'</span> &amp;&amp; cvec[<span class="number">0</span>] != <span class="string">'u'</span>) &#123;</div><div class="line">        cvec.push_back(cvec[<span class="number">0</span>]);</div><div class="line">        cvec.erase(cvec.begin());</div><div class="line">    &#125;</div><div class="line">    cvec.push_back(<span class="string">'a'</span>);</div><div class="line">    cvec.push_back(<span class="string">'y'</span>);</div><div class="line">    display(cvec, out);</div><div class="line">&#125;</div><div class="line">.  &#123;</div><div class="line">    out &lt;&lt; yytext;</div><div class="line">&#125;</div><div class="line">%%</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[]) &#123;</div><div class="line">    yylex();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3.5.5</strong></p>
<blockquote>
<p>deemo.lex</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">%&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ofstream;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line"><span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">"out.txt"</span>)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; &amp;cvec, ofstream &amp;os)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cvec.size(); i++) &#123;</div><div class="line">        os &lt;&lt; cvec[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">%&#125;</div><div class="line"></div><div class="line">delim   [ \t\n]</div><div class="line">ws  &#123;delim&#125;+</div><div class="line">letter  [A-Za-z]</div><div class="line">digit  [<span class="number">0</span><span class="number">-9</span>]</div><div class="line">id &#123;letter&#125;(&#123;letter&#125;|&#123;digit&#125;)*</div><div class="line">number  &#123;digit&#125;+(\.&#123;digit&#125;+)?(E[+-]?&#123;digit&#125;+)?</div><div class="line"></div><div class="line">%%</div><div class="line">&#123;ws&#125; &#123;</div><div class="line">    out &lt;&lt; yytext;</div><div class="line">&#125;</div><div class="line">[Ss][Ee][Ll][Ee][Cc][Tt]  &#123;</div><div class="line">    out &lt;&lt; <span class="string">"select"</span>;</div><div class="line">&#125;</div><div class="line">[Ff][Rr][Oo][Mm]  &#123;</div><div class="line">    out &lt;&lt; <span class="string">"from"</span>;</div><div class="line">&#125;</div><div class="line">[Ww][Hh][Ee][Rr][Ee]  &#123;</div><div class="line">    out &lt;&lt; <span class="string">"where"</span>;</div><div class="line">&#125;</div><div class="line">&#123;id&#125;  &#123;</div><div class="line">    out &lt;&lt; yytext;</div><div class="line">&#125;</div><div class="line">.  &#123;</div><div class="line">    out &lt;&lt; yytext;</div><div class="line">&#125;</div><div class="line">%%</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">yywrap</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[]) &#123;</div><div class="line">    yylex();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第四章语法分析"><a href="#第四章语法分析" class="headerlink" title="第四章语法分析"></a>第四章语法分析</h2><p><strong>4.2.1</strong></p>
<ol>
<li><p>最左推倒</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">S -&gt; SS*</div><div class="line">  -<span class="ruby">&gt; SS+S*</span></div><div class="line">  -<span class="ruby">&gt; aS+S*</span></div><div class="line">  -<span class="ruby">&gt; aa+S*</span></div><div class="line">  -<span class="ruby">&gt; aa+a*</span></div></pre></td></tr></table></figure>
</li>
<li><p>最右推倒</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">S -&gt; SS*</div><div class="line">  -<span class="ruby">&gt; Sa*</span></div><div class="line">  -<span class="ruby">&gt; SS+a*</span></div><div class="line">  -<span class="ruby">&gt; Sa+a*</span></div><div class="line">  -<span class="ruby">&gt; aa+a*</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>4.2.3</strong></p>
<ol>
<li>S -&gt; 0T1S | 1S | null<br>T -&gt; 1T | 0T | 0</li>
</ol>
<h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><h2 id="LR语法分析算法-算法4-44-p159"><a href="#LR语法分析算法-算法4-44-p159" class="headerlink" title="LR语法分析算法(算法4.44 p159)"></a>LR语法分析算法(算法4.44 p159)</h2><p>输入: 一个输入串w 和一个LR 语法分析表, 这个标描述了文法G 的ACTION 函数和GOTO 函数.</p>
<p>输出: 如果w 在L(G) 中, 则输出w 的自底向上语法分析过程中的归约步骤; 否则给出一个错误指示.</p>
<p>文法:<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>) E -&gt; E + <span class="literal">T</span>      (<span class="number">4</span>) <span class="literal">T</span> -&gt; <span class="literal">F</span></div><div class="line">(<span class="number">2</span>) E -&gt; <span class="literal">T</span>          (<span class="number">5</span>) <span class="literal">F</span> -&gt; (E)</div><div class="line">(<span class="number">3</span>) <span class="literal">T</span> -&gt; <span class="literal">T</span> * <span class="literal">F</span>      (<span class="number">6</span>) <span class="literal">F</span> -&gt; id</div></pre></td></tr></table></figure></p>
<p>LR 语法分析程序<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">令a 为w$ 的第一个符号</div><div class="line"><span class="keyword">while</span><span class="comment">(1)</span> &#123;</div><div class="line">    s = 栈顶的状态</div><div class="line">    <span class="keyword">if</span> <span class="comment">(ACTION[s, a] == 移入t)</span> &#123;</div><div class="line">        将t 压入栈中;</div><div class="line">        令a 为下一个输入符号</div><div class="line">    &#125; else <span class="keyword">if</span> <span class="comment">(ACTION[s, a] == 归约 A -&gt; β)</span> &#123;</div><div class="line">        从栈中弹出|β| 个符号;</div><div class="line">        t = 栈顶的状态</div><div class="line">        将<span class="keyword">GOTO</span>[t, A] 压入栈中</div><div class="line">        输出产生式A -&gt; β</div><div class="line">    &#125; else <span class="keyword">if</span> <span class="comment">(ACTION[s, a] = 接受)</span> &#123;</div><div class="line">        break; <span class="comment">/* 语法分析完成 */</span></div><div class="line">    &#125; else &#123;</div><div class="line">        调用错误恢复例程</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>声明语句的翻译</p>
<p>赋值语句的翻译</p>
<p>控制语句的翻译</p>
<p>回填</p>
<p>switch 语句的翻译</p>
<p>过程调用语句的翻译</p>
<h2 id="存储分配"><a href="#存储分配" class="headerlink" title="存储分配"></a>存储分配</h2><h3 id="静态存储分配-顺序分配法-层次分配法"><a href="#静态存储分配-顺序分配法-层次分配法" class="headerlink" title="静态存储分配(顺序分配法)(层次分配法)"></a>静态存储分配(顺序分配法)(层次分配法)</h3><h3 id="栈式存储分配"><a href="#栈式存储分配" class="headerlink" title="栈式存储分配"></a>栈式存储分配</h3><p>活动树<br>设计活动记录</p>
<p>调用序列<br>返回序列</p>
<p>变长数据</p>
<h2 id="第八章-代码优化"><a href="#第八章-代码优化" class="headerlink" title="第八章 代码优化"></a>第八章 代码优化</h2><p><strong>基本块</strong>(基本块划分算法)<br>根据<code>首指令</code>划分基本块</p>
<p><strong>流图</strong> (表示中间代码的方法)(流图的<code>节点</code>是一些<code>基本块</code>)(流图的<code>边</code> 即基本块到基本块的跳转)</p>
<h3 id="优化方法的分类"><a href="#优化方法的分类" class="headerlink" title="优化方法的分类"></a>优化方法的分类</h3><ul>
<li><p><code>删除公共子表达式</code>(局部)(全局)(也可以消除能消除的临时变量)(只有没有改变的才能替换)</p>
</li>
<li><p><code>删除无用代码</code>(复制传播: 在复制语句x=y之后尽可能的用y代替x,这样能给删除无用代码带来机会)(无用代码: )</p>
</li>
<li><p>常量合并`(编译时刻推导出一个表达式是常量, 则之后可用该常量代替该表达式)(复制传播的一个特例)</p>
</li>
</ul>
<p>-<code>代码移动</code>(<em>循环不变计算</em>: 将循环中计算结果相同的表达式)(循环不变计算的相对性)</p>
<p>-<code>强度削弱</code>(用较快的操作来替代较慢的操作, 如用加代替乘)<br><code>循环中的强度削弱</code>(<em>归纳变量</em>: 对某个常数c, 变量x每次循环都增加常数c, 则x是归纳变量)(对归纳变量进行强度削弱)</p>
<p>-<code>删除归纳变量</code>(循环运行时,如果有<em>一组归纳变量</em>的值变化保持<em>步调一致</em>,常常可以将这组变量删除为只剩一个)</p>
<h3 id="基本块的优化-局部的优化"><a href="#基本块的优化-局部的优化" class="headerlink" title="基本块的优化(局部的优化)"></a>基本块的优化(局部的优化)</h3><p><code>基本块的DAG表示</code></p>
<p><code>基于基本块的DAG 检测局部公共子表达式</code></p>
<p><code>基于基本块的DAG</code> 删除无用代码`(删除没有附加<em>活跃变量</em>的<em>根节点</em>)(活跃变量: 值可能在以后被使用)(根节点: 没有父节点的节点)(重复这个过程, 可以消除对应无用代码的节点)</p>
<p><code>数组下标指令的表示</code>(防止构造DAG时将a[i]误判为公共子表达式)(a=x[i], op:’=[]’, arg1:x, arg2:i, result: a)(被杀死的节点<em>不能再获得任何定值变量</em>, 也就不能成为一个公共子表达式)</p>
<p><code>基本块DAG的构造</code><br>从DAG中获得的信息:(确定哪些标识符在基本块中被<em>引用</em>过)(确定哪些语句计算的值可以在基本块外被引用)</p>
<h3 id="数据流分析"><a href="#数据流分析" class="headerlink" title="数据流分析"></a>数据流分析</h3><p><em>语句</em>的数据流模式 (IN[s] 语句s之前的数据流值)(OUT[s] 语句s之后的数据流值)<br><em>fs</em>: 语句s的传递函数(一个赋值语句s之前和之后的数据流值的关系)(前向传播: OUT[s] = fs(IN[s]))(逆向传播 IN[s] = fs(OUT[s]))</p>
<p><em>基本块</em>上的数据流模式(IN[B]: 紧随基本块B之前的数据流值)(OUT[B]: 紧随基本块B之后的数据流值)<br><em>fB</em>: 基本块B的传递函数(前向数据流问题: OUT[B] = fB(IN[B]) , fB = fsn<em>…</em>fs2<em>fs1)(逆向数据流问题: IN[B] = fB(OUT[B]) , `fB = fs1</em>fs2<em>…</em>fsn`)</p>
<h4 id="到达定值分析"><a href="#到达定值分析" class="headerlink" title="到达定值分析"></a>到达定值分析</h4><p><code>定值</code><br><code>到达定值</code><br>用途: (循环不变计算的检测)(常数合并)(判定变量x在p点上是否<em>未经定值</em>就被<em>引用</em>)</p>
<p><em>生成</em>与<em>杀死</em></p>
<p><code>到达定值的传递函数</code><br>(fd: 定值d: u = v + w的传递函数)(fd(x) = gend U (x - killd))(gend: 由语句d生成的定值的集合)(killd: 由语句杀死的定值的集合)(x d之前生成的定值的集合)<br>(fB: 基本块B的传递函数)(fB(x) = genB U (x - killB))(killB = kill1 U kill2 U … U killn 被基本块B中各个语句杀死的定值的集合)(genB = genn U (genn-1 - killn) U … U (gen1 - kill1 - … - killn) 基本块中没有被块中各个语句杀死的定值的集合)</p>
<p><code>到达定值的数据流方程</code></p>
<p><strong>引用定值链(Use-Definition Chains)</strong><br>引用定值链是一个<em>列表</em>, 对于变量的每一次<em>引用</em>, <em>到达该引用的所有定值</em>都在该列表中.</p>
<h4 id="活跃变量分析"><a href="#活跃变量分析" class="headerlink" title="活跃变量分析"></a>活跃变量分析</h4><p><code>活跃变量</code>(用途: <em>删除无用赋值</em>, <em>为基本块分配寄存器</em>)</p>
<p><strong>定值-引用链(definition-use chains)</strong><br>设变量x有一个定值d, 该定值所有能够到达的引用u的集合称为x在d处的<code>定值-引用链</code></p>
<h4 id="可用表达式分析"><a href="#可用表达式分析" class="headerlink" title="可用表达式分析"></a>可用表达式分析</h4><p>用途:(消除全局公共子表达式)(进行复制传播)</p>
<h3 id="流图中的循环"><a href="#流图中的循环" class="headerlink" title="流图中的循环"></a>流图中的循环</h3><p><strong>支配节点</strong></p>
<p><strong>回边</strong></p>
<p><strong>自然循环</strong></p>
<h3 id="全局优化"><a href="#全局优化" class="headerlink" title="全局优化"></a>全局优化</h3><p><strong>删除全局公共子表达式</strong><br><strong>删除复制语句</strong><br><strong>代码移动</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[计算机网络-笔记]]></title>
      <url>https://beim.github.io/2016/09/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="0"><a href="#0" class="headerlink" title="0"></a>0</h1><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> (<span class="number">09</span> 年考研 <span class="number">34</span> 题)在无噪声情况下,若某通信链路的带宽为 <span class="number">3</span>kHz,采</div><div class="line">用 <span class="number">4</span> 个相位,每个相位具有 <span class="number">4</span> 种振幅的 QAM 调制技术,则该通信链路的最大数</div><div class="line">据传输速率是</div><div class="line">A. <span class="number">12</span> kbps</div><div class="line">B. <span class="number">24</span> kbps</div><div class="line"><span class="keyword">C</span>. <span class="number">48</span> kbps</div><div class="line"><span class="keyword">D</span>. <span class="number">96</span> kbps</div><div class="line">【解答】选 B。由奈氏准则公式:<span class="keyword">C</span>=<span class="number">2</span>Wlog <span class="number">2</span> <span class="keyword">N</span>=<span class="number">2</span> * <span class="number">3</span><span class="keyword">K</span> * log <span class="number">2</span> (<span class="number">4</span>*<span class="number">4</span>)=<span class="number">24</span>Kbps,</div><div class="line">即该信道的最大数据传输速率是 <span class="number">24</span>Kbps。</div><div class="line">【考查知识点】奈氏准则。理想低通信道的最高码元传输速率=<span class="number">2</span>W <span class="keyword">Band</span>。W</div><div class="line">是低通信道的带宽,单位为 Hz,<span class="keyword">Band</span> 是波特,是码元传输速率的单位。一个码</div><div class="line">元携带 <span class="keyword">N</span> bit 信息量,波形速率为 M <span class="keyword">Band</span>,则最高速率为 M*<span class="keyword">N</span> bit/s.</div><div class="line">香农定理指出:在有随机热噪声的信道上传输数据信号时,数据传输速率 <span class="keyword">C</span></div><div class="line">与信道带宽 W、信噪比 S/<span class="keyword">N</span> 的关系为:<span class="keyword">C</span>=W*log <span class="number">2</span> (<span class="number">1</span>+S/<span class="keyword">N</span>))。式中,<span class="keyword">C</span> 单位为</div><div class="line">bps,带宽 W 单位为 Hz,信噪比 S/<span class="keyword">N</span> 通常以 dB(分贝)数表示。</div><div class="line"></div><div class="line"><span class="number">2.</span> (<span class="number">11</span> 年考研 <span class="number">34</span> 题)若某通信链路的数据传输速率为 <span class="number">2400</span>bps,采用 <span class="number">4</span></div><div class="line">相位调制,则该链路的波特率是</div><div class="line">A. <span class="number">600</span> 波特</div><div class="line">B. <span class="number">1200</span> 波特</div><div class="line"><span class="keyword">C</span>. <span class="number">4800</span> 波特</div><div class="line"><span class="keyword">D</span>. <span class="number">9600</span> 波特</div><div class="line">【解答】选 B。有 <span class="number">4</span> 种相位,则一个码元需要由 log <span class="number">2</span> <span class="number">4</span>=<span class="number">2</span> 个 bit 表示,则波</div><div class="line">特率=比特率/<span class="number">2</span>=<span class="number">1200</span> 波特。</div><div class="line">【考查知识点】考察波特与比特率的关系;比特率和波特率之间的换算关系</div><div class="line">如下:比特率 = 波特率 * log <span class="number">2</span> n 。比特率是数字信号的传输速率——单位时间</div><div class="line">内所传输的二进制代码的有效位数。单位——比特/秒(bps)或千比特/秒(kbps)。</div><div class="line">波特率是调制速率(又称波形速率)——线路中每秒传送的波形的个数。单位—</div><div class="line">—波特(band)。</div></pre></td></tr></table></figure>
<p>路由器的体系结构包括四个部分, 分别是<code>处理器/cpu</code>, <code>输入端口</code>, <code>输出端口</code>, 和<code>交换接口</code></p>
<p>在Internet中可以将一个自治系统分为多个区的自治系统内路由协议为<code>OSPF</code></p>
<p>10BaseT以太网采用的比特编码机制是<code>曼彻斯特编码</code></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">下列物理介质中, 易受电磁干扰的导向介质是<span class="keyword">A</span></div><div class="line"><span class="keyword">A</span>.双绞线, B 红外线 C 光纤 D 微波</div></pre></td></tr></table></figure>
<p>帧同步的方法有: <code>字节计数法</code>, <code>字符填充的首尾定界符法</code>, <code>比特填充的首尾标识法</code>, <code>违法编码法</code></p>
<p>解决无穷计数问题的方法有: <code>抑制规则(定义最大有效度量值)</code>, <code>毒性逆转的水平分割</code>, <code>触发更新</code>, <code>阻碍时钟</code>等</p>
<p>OSPF使用IP, RIP使用UDP, BGP使用TCP</p>
<p>以太网10BaseT和100BaseT使用的物理介质是<code>双绞线</code></p>
<p>计算机网络常用的有限物理介质有<code>双绞线</code>, <code>光纤</code>, <code>同轴电缆</code></p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NRZL, 曼彻斯特, 差分曼彻斯特编码</div><div class="line"><span class="symbol">NRZL:</span> 高电平为<span class="number">1</span>, 低电平为<span class="number">0</span></div><div class="line">曼彻斯特: 低到高为<span class="number">1</span>, 高到低为<span class="number">0</span></div><div class="line">差分曼彻斯特: 在信号开始时改变信号极性表示逻辑<span class="number">0</span>, 否则表示逻辑<span class="number">1</span></div></pre></td></tr></table></figure>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Internet中域名, <span class="built_in">IP</span>地址和MAC地址关系如何? 它们之间如何进行映射</div><div class="line">域名, <span class="built_in">IP</span>地址和MAC地址都可以用于标识Internet中通信节点(或接口)</div><div class="line">域名主要用于应用层, <span class="built_in">IP</span>地址主要在网络层, MAC地址主要在数据链路层</div><div class="line">域名通过DNS解析获得<span class="built_in">IP</span>地址</div><div class="line"><span class="built_in">IP</span>地址通过ARP协议获得MAC地址</div><div class="line">DNS to <span class="built_in">IP</span>: DNS resolve</div></pre></td></tr></table></figure>
<p>两种典型的分组交换网络是<code>数据报网络</code>, <code>虚电路网络</code></p>
<p>802.11无线局域网的两种典型的网络模式是<code>基础设施模式</code>和<code>特定网模式/Ad hoc模式</code></p>
<p><a href="http://baike.baidu.com/view/672386.htm" target="_blank" rel="external">网络接入</a></p>
<p>分组交换网络传输分组的基本工作方式是<code>存储-转发</code></p>
<p>网络应用体系结构主要包括<code>client/server</code>, <code>P2P</code>, <code>端口号</code></p>
<p>流量控制关注的是<code>接收端的数据接收和缓存能力</code>, 拥塞控制关注的是<code>网络传输能力</code> </p>
<p>Web应用中引入的Cookies技术可以支持<code>身份鉴别</code>, <code>购物车</code>, <code>推荐服务</code>, 和<code>用户会话状态信息维护</code>等</p>
<p>FTP传输命令通过<code>控制</code>连接, 服务器默认端口号为<code>21</code>; 传输文件通过<code>数据连接</code>, 服务器端默认的端口号为<code>20</code></p>
<p>SMTP协议基于的传输层协议是<code>TCP</code>, 服务器默认端口号是<code>25</code>, 传输的邮件内容必须是<code>7比特的ASCII码</code></p>
<p>典型的邮件接收协议有<code>POP</code>, <code>IMAP</code>, <code>HTTP</code>等</p>
<p>DNS协议运行在UDP协议之上，使用端口号53。</p>
<p>UDP头包括<code>源端口号</code>, <code>目的端口号</code>, <code>长度</code>, <code>校验和</code>四个字段</p>
<p>UDP计算校验和时包括<code>伪头</code>, <code>UDP段头</code>, 和<code>应用层数据</code> 3部分内容</p>
<p>实现可靠传输的主要机制包括<code>差错编码</code>, <code>重传</code>, <code>计时器</code>, <code>确认</code>和 <code>序列号</code></p>
<p>滑动窗口协议的发送窗口大小为Ws, 接收窗口大小为Wr, 数据分组序列号域的比特长度为L, 则<code>Ws + Wr &lt; L</code></p>
<p>TCP和UDP校验和都要加上<code>伪头部</code>, 和<code>应用层数据</code><br>IP校验和只计算<code>首部</code></p>
<p>若不包含前导码,则以太网数据帧的最大帧长为( 1518 )字节,最小帧长为( 64 )字节,数据域最少为( 46 )字节、最大为( 1500 )字节,以太网的 MTU 为( 1500 )字节。</p>
<p><strong>tcp报文中的 Timestamp option</strong><br><a href="http://stackoverflow.com/questions/2524511/what-is-the-meaning-of-the-tsv-and-tser-fields-in-an-ethereal-dump" target="_blank" rel="external">Timestamp value 和 Timestamp echo 作用</a></p>
<p><code>网络协议的三要素</code>(语法,语义,同步)</p>
<p><code>网络工程中常用的线缆标准为568A</code>(直通线568A-568A)(交叉线568A-568B)</p>
<p><code>IEEE 802.3 CMSA/CD, IEEE 802.4 Token Bus, IEEE 802.5 Token Ring</code><br>多路访问协议(multi-access protocol)</p>
<ul>
<li>信道划分协议(TDM, FDM)</li>
<li>随机接入协议<ul>
<li>ALOHA (纯ALOHA, 分槽ALOHA(slotted ALOHA))</li>
<li>载波侦听多路访问协议(CSMA) (坚持)(非坚持)(带冲突检测的CSMA: CSMA/CD)</li>
</ul>
</li>
<li>轮流协议 <ul>
<li>polling</li>
<li>令牌传递(token passing)(令牌总线, 令牌环)</li>
</ul>
</li>
</ul>
<p><code>[ATM](https://zh.wikipedia.org/wiki/%E5%BC%82%E6%AD%A5%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%BC%8F)(Asynchronous Transfer Mode)异步传输模式</code>, 又叫信元中继, ATM采用电路交换的模式, 能够支持有连接和无连接的业务, 能比较理想的实现各种QoS</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E5%90%91%E9%8C%AF%E8%AA%A4%E6%9B%B4%E6%AD%A3" target="_blank" rel="external">前向纠错(forward err correction)</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%86%97%E9%A4%98%E6%A0%A1%E9%A9%97" target="_blank" rel="external">循环冗余校验(CRC: Cyclic redundancy check)</a></p>
<p><a href="http://baike.baidu.com/view/793550.htm" target="_blank" rel="external">混合差错控制</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6" target="_blank" rel="external">HDLC: High-Level Data Link Control高级数据链路控制–数据链路层</a></p>
<p>局域网3要素: 传输介质, 拓扑结构, 介质访问控制方法</p>
<p>路由选择算法分为两大类, 分别为<code>适应性</code>和<code>非适应性</code>.<br>理想的路由算法应该具有的特点<em>正确性</em>, <em>简单性</em>, <em>坚定性</em>, 稳定性<em>, 公平性</em>, <em>最佳性</em>.<br>数据报服务中, 网络节点要为每个<em>分组</em>选择路由, 在虚电路服务中, 网络节点只在连接<em>建立</em>时选择路由<br>网络互联时一般要使用网络互联器, 根据网络互联器进行协议和功能转换对象的不同可以分为: <code>中继器 网桥 路由器 协议转换器</code> 四种</p>
<p><a href="https://en.wikipedia.org/wiki/Exponential_backoff#Binary_exponential_backoff_.2F_truncated_exponential_backoff" target="_blank" rel="external">CSMA/CD采用的二进制指数退避算法</a><br><a href="http://baike.baidu.com/item/%E6%88%AA%E6%96%AD%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8C%87%E6%95%B0%E9%80%80%E9%81%BF%E7%AE%97%E6%B3%95" target="_blank" rel="external">截断二进制指数退避算法</a></p>
<p><a href="https://en.wikipedia.org/wiki/Synchronous_Data_Link_Control" target="_blank" rel="external">SDLC: Synchronous Data Link Control – layer 2, 现在已经逐渐被IP协议取代</a></p>
<p><a href="http://www.cnblogs.com/aixin0813/p/3310040.html" target="_blank" rel="external">以太网帧最小帧长与最大帧长</a><br>以太网的帧开销是18字节，是“目的MAC（6）＋源MAC（6）＋Type（2）＋CRC（4）”。以太网最小帧长为64字节，那么IP报文最小为46字节，而局域网规定IP最大传输单元1500字节，实际上加上以太网帧的18字节，就是1518字节。<br>IEEE定义了这个标准，一个碰撞域内，最远的两台机器之间的round-trip time 要小于512bit time。(来回时间小于512位时，所谓位时就是传输一个比特需要的时间）。这也是我们常说的一个碰撞域的直径。</p>
<p><strong>ICMP差错报文</strong></p>
<ul>
<li>对于携带ICMP差错报文的数据包, 不再产生ICMP差错报文</li>
<li>对于分段的数据报文, 如果不是第一个分段则不产生ICMP差错报文</li>
<li>对于多播地址的数据报文, 不产生ICMP差错报文</li>
<li>具有特殊地址的数据报文, 如127.0.0.0或0.0.0.0, 不产生ICMP差错报文</li>
</ul>
<p><strong>唯一标识一个UDP套接字的是</strong>目的端口号和目的IP地址.</p>
<p><strong>NAT</strong>服务的路由器转发一个源IP地址为10.0.0.1的IP数据分组时,可能重写的IP分组首部字段是</p>
<ul>
<li>总长度</li>
<li>源IP地址</li>
<li>源端口</li>
<li>checksum</li>
<li>TTL<br>不会改变的是</li>
<li>ID</li>
<li>目的IP地址</li>
<li>协议</li>
</ul>
<p><strong>用于实现可靠数据传输的机制有</strong></p>
<ul>
<li>确认</li>
<li>差错检测</li>
<li>重传</li>
<li>计时器</li>
<li>序列号</li>
</ul>
<p>直通交换方式是指以太网交换机可以在各端口间交换数据。它在输入端口检测到一个数据包时，检查该包的包头，获取包的目的地址，启动内部的动态查找表转换成相应的输出端口，在输入与输出交叉处接通，把数据包直通到相应的端口，实现交换功能。通常情况下，直通交换方式只检查数据包的包头即前14个字节，由于不需要考虑前导码，只需要检测目的地址的6B，所以最短的传输延迟是0.48μs。</p>
<p>由于快速以太网的最短帧长为64字节，去除首部18字节，即数据部分最短46字节。从表1中可以看出，第3号和第5号分组的总长度为40（28H）字节，小于46字节，其他分组总长度均大于46字节，所以3号和5号分组在通过快速以太网传输时需要填充。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">快速以太网最短帧长为<span class="number">64</span>字节, 首部<span class="number">18</span>字节, 因此数据部分最短<span class="number">46</span>字节.</div><div class="line"><span class="number">64</span>*<span class="number">8</span> = <span class="number">512</span>, <span class="number">10</span>Mbps以太网中按照二进制指数退避算法的退避时间单元为<span class="number">512</span>b / <span class="number">10</span>Mbps = <span class="number">51.2</span>us</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">5.</span> (<span class="number">14</span>年考研<span class="number">37</span>题)站点A、B、C通过CDMA共享链路，A、B、C的码片序列(chipping sequence)分别是(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)、(<span class="number">1</span>，<span class="number">-1</span>,<span class="number">1</span>，<span class="number">-1</span>)和(<span class="number">1</span>，<span class="number">1</span>,<span class="number">-1</span>，<span class="number">-1</span>)，若C从链路上收到的序列是(<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>)，则C收到A发送的数据是</div><div class="line">A. <span class="number">000</span></div><div class="line">B. <span class="number">101</span></div><div class="line">C. <span class="number">110</span></div><div class="line">D. <span class="number">111</span></div><div class="line">【解答】选B。用A的码片与链路上的序列做规格化内积，得<span class="number">1</span>，<span class="number">-1</span>，<span class="number">1</span>对应的数据为<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>。</div><div class="line">【考查知识点】CDMA码分多址</div></pre></td></tr></table></figure>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>单选(<span class="number">2</span>分)</div><div class="line">不采用FDM技术的接入网络是 (D)</div><div class="line">A.</div><div class="line">IEEE802.<span class="number">11</span>（WiFi）</div><div class="line">B.</div><div class="line">HFC</div><div class="line">C.</div><div class="line">ADSL</div><div class="line">D.</div><div class="line">以太网</div></pre></td></tr></table></figure>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="number">28</span>.下列关于<span class="built_in">IP</span>路由器功能的描述中，正确的是（C ）</div><div class="line">Ⅰ.运行路由协议，设备路由表</div><div class="line">Ⅱ.检测到拥塞时，合理丢弃<span class="built_in">IP</span>分组</div><div class="line">Ⅲ.对收到的<span class="built_in">IP</span>分组头进行差错校验，确保传输的<span class="built_in">IP</span>分组不丢失</div><div class="line">Ⅳ.根据收到的<span class="built_in">IP</span>分组的目的<span class="built_in">IP</span>地址，将其转发至合适的输出线路上</div><div class="line">A.仅Ⅲ， Ⅳ</div><div class="line">B.仅Ⅰ， Ⅱ， Ⅲ</div><div class="line">C.仅Ⅰ， Ⅱ， Ⅳ</div><div class="line">D. Ⅰ， Ⅱ， Ⅲ ， Ⅳ</div><div class="line">解析：</div><div class="line">路由器的主要作用包括：</div><div class="line"><span class="number">1.</span><span class="built_in">IP</span>路由器运行路由协议，更新设备路由表。</div><div class="line"><span class="number">2</span>.当检测到网络发生拥塞时，合理丢弃<span class="built_in">IP</span>分组。</div><div class="line"><span class="number">3</span>.路由器根据收到的<span class="built_in">IP</span>分组的目的<span class="built_in">IP</span>地址，将其转发至合适的输出线路上。</div><div class="line"><span class="number">4.</span><span class="built_in">IP</span>路由器只是尽可能最大努力交付数据包，不会进行差错校验，也不能确保传输的<span class="built_in">IP</span>数据不丢失。</div></pre></td></tr></table></figure>
<p><code>DNS资源记录类型</code>(Resource Records)<br>(name, value, type, ttl)</p>
<ul>
<li><code>Type=A</code>; Name: 主机域名; Value: IP地址; (<code>jwts.hit.edu.cn.   28800   IN  A   219.217.228.102</code>)</li>
<li><code>Type=NS</code>; Name: 域(edu.cn); Value: 该域权威域名解析服务器的主机域名(edu.cn.          172800  IN  NS  dns.edu.cn.)</li>
<li><code>Type=CNAME</code>; Name: 某一真实域名的别名; Value: 真实域名 (beim.github.io.      3600    IN  CNAME   github.map.fastly.net.)</li>
<li><code>Type=MX</code>; Value是与name相对应的邮件服务器</li>
</ul>
<p>主机甲与主机乙之间使用后退N帧协议（GBN）传输数据，甲的发送窗口尺寸为1000，数据帧长为1500字节，信道带宽为100 Mbps，乙每收到一个数据帧立即利用一个短帧（忽略其传输延迟）进行确认。若甲乙之间的单向传播延迟是50 ms，则甲可以达到的最大平均数据传输速率约为<br><a href="http://www.wenku1.com/news/A7DBB26CD189B41D.html" target="_blank" rel="external">与该题类似的题的答案 - 7</a></p>
<p>FTP 协议是基于传输层 TCP 协议的。FTP 的控制连接使用端口 21,用来传输控制信息<br>(如连接请求,传送请求等)<br>;数据连接使用端口 20,用来传输数据</p>
<p><a href="https://zh.wikipedia.org/wiki/%E6%B3%A2%E7%89%B9%E7%8E%87" target="_blank" rel="external">波特率-wiki</a></p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">9.</span>在物理层接口特性中，用于描述完成每种功能的时间发生顺序的是（ <span class="keyword">C</span>）。</div><div class="line">A.机械特性       B.功能特性      <span class="keyword">C</span>.过程特性     <span class="keyword">D</span>.电气特性</div><div class="line">解析：</div><div class="line">选项A：机械特性：指明引脚数目和排列</div><div class="line">选项B：功能特性：指明电压表示何种意义</div><div class="line">选项<span class="keyword">C</span>：过程特性：指明完成每种功能的时间发生顺序</div><div class="line">选项<span class="keyword">D</span>：电气特性：指明电压的范围。</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">10.</span>HDLC协议对<span class="number">01111100</span> <span class="number">01111110</span>组帧后对应的比特串为（A）。</div><div class="line">A<span class="number">.01111100</span> <span class="number">00111110</span> <span class="number">10</span>            B<span class="number">.01111100</span> <span class="number">01111101</span> <span class="number">01111110</span></div><div class="line">C<span class="number">.01111100</span> <span class="number">01111101</span> <span class="number">0</span>             D<span class="number">.01111100</span> <span class="number">01111110</span> <span class="number">01111101</span></div><div class="line">解析：</div><div class="line">     HDLC协议对比特串进行组帧时，HDLC数据帧以位值<span class="number">0111</span> <span class="number">1110</span> 标识，每一个帧的开始和结束，</div><div class="line">因此，在帧数据中凡是出现连续五个<span class="number">1</span>时，就在输出位流末尾加<span class="number">0</span></div><div class="line">     扫描整个帧，但发现连续<span class="number">5</span>个<span class="number">1</span>时，就立即补充一个<span class="number">0</span>，显然处理后不可能出现连续的<span class="number">6</span>个<span class="number">1.</span></div></pre></td></tr></table></figure>
<p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6" target="_blank" rel="external">HDLC</a></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">8. (13年考研34题)若下图为10BaseT网卡接收到的信号波形，则该网卡收到的比特串是</span>](<span class="link">http://www.ppkao.com/shiti/4259875/</span>)</div><div class="line">A. 0011 0110 B. 1010 1101 C. 0101 0010 D. 1100 0101 【解答】选A。以太网编码采用曼彻斯特编码方式，电平由低电平到高电平跳变表示数字“0”，由高电平到低电平跳变表示数字“1”，因此网卡收到的比特串是00110110。</div></pre></td></tr></table></figure>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">2.</span> (<span class="number">10</span>年考研<span class="number">36</span>题)若路由器R因为拥塞丢弃IP分组，则此时R可以向发出该IP分组的源主机发送的ICMP报文件类型是</div><div class="line">A. 路由重定向</div><div class="line">B. 目的不可达</div><div class="line">C. 源抑制</div><div class="line">D. 超时</div><div class="line">【解答】选C。ICMP差错控制报文的<span class="number">5</span>种报告：<span class="number">1.</span>目的不可达——当路由器和主机不能交付数据报时就向源点发送终点不可达报文;<span class="number">2.</span>源点抑制——当路由器和主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，是源点知道应当把数据报的发送速率放慢;<span class="number">3.</span>时间超时——当路由器收到生存时间为<span class="number">0</span>的数据报时，除了丢弃该数据报外，还要向源点发送时间超时报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据包片都丢弃，并向源点发送时间超时报文;<span class="number">4.</span>参数问题——当路由器或目的主机收到的数据报的首部中有的字段值不正确时，就丢弃该数据报，并向源点发送参数问题报文;<span class="number">5.</span>路由重定向——路由器把改变路由发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更好的路由)。很明显选C。</div></pre></td></tr></table></figure>
<p><a href="http://m.kaoyanbashi.com/zhuanyeke/jsj/5374.html" target="_blank" rel="external">考研题</a></p>
<h2 id="答案暂存"><a href="#答案暂存" class="headerlink" title="答案暂存"></a>答案暂存</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span><span class="number">-5</span> B A A A C</div><div class="line"><span class="number">6</span><span class="number">-10</span> C D C C B</div><div class="line"><span class="number">11</span><span class="number">-15</span> D B A A B</div><div class="line"><span class="number">16</span><span class="number">-20</span> D A C D C </div><div class="line"></div><div class="line"><span class="number">36</span>页开始</div><div class="line"></div><div class="line">一,填空题</div><div class="line"><span class="number">1.</span> 自治系统内路由, 自治系统外路由. 自适应性, 鲁棒性, </div><div class="line"><span class="number">2.</span> 报文, 建立.</div><div class="line"><span class="number">3.</span> 语法, 语义, 时序</div><div class="line"><span class="number">4.</span> 物理层, 链路层, 网络层</div><div class="line"><span class="number">5.</span> 总线, 交换机, 网桥, 路由器</div><div class="line">二, 选择题</div><div class="line"><span class="number">1</span><span class="number">-5</span> A D B B C</div><div class="line"><span class="number">6</span><span class="number">-10</span> C A B</div><div class="line">三, 简答题</div><div class="line"><span class="number">1.</span> <span class="number">1</span>, <span class="number">0</span>-L, L, 传输失败</div><div class="line"><span class="number">2.</span> <span class="number">5</span>微秒, <span class="number">10</span>微秒</div><div class="line">四, 计算题</div><div class="line"><span class="number">1.</span> <span class="number">2400</span> * <span class="number">30</span> = <span class="number">7.2</span> * <span class="number">10</span>^<span class="number">4</span>, 每个汉字<span class="number">16</span>bit, <span class="number">4.5</span>*<span class="number">10</span>^<span class="number">3</span></div><div class="line"><span class="number">2.</span> <span class="number">194.47</span><span class="number">.21</span><span class="number">.136</span>  C类 <span class="number">254</span>台</div></pre></td></tr></table></figure>
<hr>
<h1 id="计算机网络5E"><a href="#计算机网络5E" class="headerlink" title="计算机网络5E"></a>计算机网络5E</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul>
<li><p><strong>IP</strong> (Internet Protocol) 因特网协议</p>
</li>
<li><p><strong>ICMP</strong> (Internet Control Message Protocol) 因特网控制报文协议</p>
</li>
<li><p><strong>TCP</strong> (Transport Control Protocol) 传输控制协议</p>
</li>
<li><p><strong>UDP</strong> (User Datagram Protocol) 用户数据报协议</p>
</li>
<li><p><strong>Internet</strong> 因特网</p>
</li>
<li><p><strong>internet</strong> 互联网</p>
</li>
<li><p><strong>NAP</strong> (Network Access Point) 网络接入点</p>
</li>
<li><p><strong>DSL</strong> (Digital Subscriber Line) 数字用户线</p>
</li>
<li><p><strong>SMTP</strong> (Simple Mail Transfer Protocol) 简单邮件传输协议</p>
</li>
<li><p><strong>POP3</strong> (Post Office Protocol) 邮局协议版本3</p>
</li>
<li><p><strong>HTTP</strong> (HyperText Transfer Protocol) 超文本传输协议</p>
</li>
<li><p><strong>URL</strong> (Uniform Resource Locator) 统一资源定位符</p>
</li>
<li><p><strong>CDN</strong> (Content Dilivery Network) 内容分发网络</p>
</li>
<li><p><strong>P2P</strong> (Peer-to-Peer) 对等网络</p>
</li>
</ul>
<hr>
<h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><p><strong>TCP</strong><br>// 单位bit<br>source port(16) dest port(16)<br>sequence number(32)<br>ack number(32)<br>headlen(4) reserved(3) Nonce(1) CWR ECN-Echo Urgent ACK PUSH RST SYN FIN (16) Receive-window-size(16)<br>checksum(16) urgent-pointer(16)<br>Options(variable length)</p>
<p>// seq num和ack num通过bytes of data来计算<br>// 标识位中SYN值为2, ACK值为16, FIN值为1; <code>因此SYN为02H, SYN,ACK为12H, ACK为10H, 可以通过这个来判断三次握手是否完成</code><br>// <code>常用</code> seq-num, ack-num, SYN, ACK</p>
<p><strong>IP</strong><br>// 单位bit<br>版本号(4) 首部长度(4) 服务类型(TOS)(8) 总长度(16)<br>标识ID(16) 标识位(3) 片偏移(15)<br>生存时间TTL(8) 协议(8) 首部校验和(16)<br>源IP地址(32)<br>目的IP地址(32)<br>可变: 选项字段 填充<br>数据<br>// 最大IP分组总长度65535B, 最小IP分组首部20B, IP分组可以封装的最大数据65535-20=65515B<br>// 分片不改变标识(ID)<br>// 标识位占3位, (保留)(DF)(MF)<br>// 片偏移量占13位, 以8字节为单位<br>// 协议, 06为TCP, 17为UDP<br>// 首部校验和计算时该字段全置0, 采用反码算数运算求和, 和的反码作为首部校验和字段, 逐跳计算, 逐跳校验<br>// <code>常用</code>, 总长度, TTL, 上层协议, 源和目的IP地址</p>
<p><strong>ICMP</strong><br>Type(1) Code(1) Checksum(2)<br>(这4 个字节取决于ICMP 报文的类型)<br>(ICMP 的数据部分, (长度取决于类型))</p>
<p><strong>Ethernet frame</strong><br>// 单位Byte<br>preamble(8) des-address(6) source-address(6) type(2) data(payload)(46-1500) CRC(4)</p>
<p><strong>PPP Data Frame</strong><br>flag(1) address(1) control(1) protocol(1 or 2) info(variable) check(2 or 4) flag(1)</p>
<p>flag: delimiter<br>Address: does nothing<br>Control: does nothing, in the future possible multiple control fields<br>Protocol: upper layer protocol<br>info: upper layer data being carried<br>check: cyclic redundancy check for error detection<br>地址和控制字段可以经过协商省略<br>协议和校验字段可以经过协商决定长度</p>
<p><strong>ARP</strong><br>Hardware type: Ethernet<br>protocol type: IPv4<br>Hardware size: 6<br>Protocol size: 4<br>Opcode: request<br>Sender MAC address: d4:ee:07:0e:b7:ec<br>Sender IP address: 192.168.10.122<br>Target MAC address: 00:00:00:00:00:00<br>Target IP address: 192.168.10.10</p>
<hr>
<h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><ul>
<li><p><strong>物理层(physical layer)</strong> 关注在一条通信信道上传输原始比特。</p>
</li>
<li><p><strong>数据链路层(data link layer)</strong> 的主要任务是将一个原始的传输设施转变成一条没有漏检传输错误的线路。将真实的错误掩盖，使网络层看不到。为此，发送方将输入的数据拆分成<strong>数据帧(data frame)</strong>，则接受方必须确认正确收到每一帧，即给发送方返回一个<strong>确认帧(acknowledgement frame)</strong>。</p>
</li>
<li><p><strong>网络层(network layer)</strong> 的主要功能是控制子网的运行。关键问题是将数据包从源端路由到接受方。处理拥塞也是网络层的责任，一般还要和高层协议结合起来处理拥塞才有效。</p>
</li>
<li><p><strong>传输层(transport layer)</strong> 的基本功能是接受来自上一层的数据，在必要的时候把这些数据分隔成较小的单元，然后把这些数据单元传递给网络层，并且确保这些数据单元正确地到达另一端。</p>
</li>
<li><p><strong>会话层(session layer)</strong> 允许不同机器上的用户建立会话。会话通常提供各种服务，包括<strong>对话控制(dialog control)</strong>(记录该由谁来传递数据)、<strong>令牌管理(token management)</strong>(禁止双方同时执行同一个关键操作)，以及<strong>同步功能(synchronization)</strong>(在一个长传输过程中设置一些断点，以便在系统崩溃之后还能回复到崩溃前的状态继续运行)。</p>
</li>
<li><p><strong>表示层(presentation layer)</strong> 表示层以下的各层关注如何传递数据位，而表示层关注的是所传递信息的语法和语义。不同的计算机可能有不同的内部数据表示法，为了让这些计算机能够进行通信，它们所交换的数据结构必须以一种抽象的方式来定义，同时还应定义一种“线上”使用的标准编码方法。表示层管理这些抽象的数据结构，并允许定义和交换更高层的数据结构（比如银行账户记录）。</p>
</li>
<li><p><strong>应用层(application layer)</strong> 包含了用户通常需要的各种各样的协议。一个得到广泛使用的应用协议是<strong>超文本传输协议(HTTP, HyperText Transfer Protocol)</strong>，它是<strong>万维网</strong>的基础。其他一些应用协议可用于文件传输、电子邮件以及网络新闻等。</p>
</li>
</ul>
<hr>
<h2 id="TCP-IP-参考模型"><a href="#TCP-IP-参考模型" class="headerlink" title="TCP/IP 参考模型"></a>TCP/IP 参考模型</h2><h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><ul>
<li>以无缝的方式将多个网络链接起来。</li>
<li>即使在损失子网硬件的情况下网络还能够继续工作，原有的会话不能被打断。</li>
</ul>
<h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><ul>
<li><p><strong>链路层(link layer)</strong> 该层描述了链路必须王城什么功能才能满足无连接的互连网络层的需求，比如串行线和经典以太网链路。在分层协议的上下文中，链路层并不是通常意义上的一层。它是一个接口（位于网络层和数据链路层之间）。</p>
</li>
<li><p><strong>互联网层(internet layer)</strong> 是将整个网络体系结构贯穿在一起的关键层。它大致对应OSI 的网络层。互联网层的任务是将IP 分组投递到它们该去的地方。数据包的路由是这里最主要的问题，同时该层还要考虑拥塞控制问题。</p>
</li>
<li><p><strong>传输层(transport layer)</strong> 的设计目标是允许源主机和目标主机上的对等实体进行对话，犹如OSI 的传输层一样。这里定义了两个端到端的协议TCP 和UDP。</p>
</li>
<li><p><strong>应用层(application layer)</strong> 包含了所有的高层协议。如虚拟终端协议（TELNET）、文件传输协议（FTP）、电子邮件协议（SMTP）、DNS（Domain Name System）、HTTP以及用于传送实时媒体的RTP 等。</p>
</li>
</ul>
<h3 id="TCP-IP-模型及协议"><a href="#TCP-IP-模型及协议" class="headerlink" title="TCP/IP 模型及协议"></a>TCP/IP 模型及协议</h3><ul>
<li><p><strong>应用层</strong>  HTTP  SMTP  RTP  DNS</p>
</li>
<li><p><strong>传输层</strong>  TCP  UDP</p>
</li>
<li><p><strong>互联网层</strong> IP ICMP</p>
</li>
<li><p><strong>链路层</strong>  DSL  SONET  802.11  Ethernet</p>
</li>
</ul>
<hr>
<h2 id="套接字编程实例-Internet-文件服务器"><a href="#套接字编程实例-Internet-文件服务器" class="headerlink" title="套接字编程实例: Internet 文件服务器"></a>套接字编程实例: Internet 文件服务器</h2><blockquote>
<p>server.c</p>
</blockquote>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">void</span> fatal (<span class="keyword">char</span> *<span class="keyword">string</span>) &#123;</div><div class="line">    printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>);</div><div class="line">    exit(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 12345</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 4096</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_SIZE 10</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main (<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</div><div class="line">    <span class="keyword">int</span> s, b, l, fd, sa, bytes, on = <span class="number">1</span>;</div><div class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</div><div class="line">    <span class="keyword">struct</span> sockaddr_in channel;</div><div class="line"></div><div class="line">    memset(&amp;channel, <span class="number">0</span>, <span class="keyword">sizeof</span>(channel));</div><div class="line">    channel.sin_family = AF_INET;</div><div class="line">    channel.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class="line">    channel.sin_port = htons(SERVER_PORT);</div><div class="line"></div><div class="line">    s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</div><div class="line">    <span class="built_in">if</span> (s &lt; <span class="number">0</span>)  fatal(<span class="string">"socket failed"</span>);</div><div class="line">    setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (<span class="keyword">char</span> *) &amp;on, <span class="keyword">sizeof</span>(on));</div><div class="line">    b = bind(s, (<span class="keyword">struct</span> sockaddr *) &amp;channel, <span class="keyword">sizeof</span>(channel));</div><div class="line">    <span class="built_in">if</span> (b &lt; <span class="number">0</span>) fatal(<span class="string">"bind failed"</span>);</div><div class="line"></div><div class="line">    l = <span class="built_in">listen</span>(s, QUEUE_SIZE);</div><div class="line">    <span class="built_in">if</span> (l &lt; <span class="number">0</span>) fatal(<span class="string">"listen failed"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        sa = accept(s, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        <span class="built_in">if</span> (sa &lt; <span class="number">0</span>) fatal(<span class="string">"accept failed"</span>);</div><div class="line">        <span class="built_in">read</span>(sa, buf, BUF_SIZE);</div><div class="line"></div><div class="line">        fd = <span class="built_in">open</span>(buf, O_RDONLY);</div><div class="line">        <span class="built_in">if</span> (fd &lt; <span class="number">0</span>) &#123;</div><div class="line">            fatal(<span class="string">"open failed"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">while</span> (<span class="number">1</span>) &#123;</div><div class="line">            bytes = <span class="built_in">read</span>(fd, buf, BUF_SIZE);</div><div class="line">            <span class="built_in">if</span> (bytes &lt;= <span class="number">0</span>) <span class="built_in">break</span>;</div><div class="line">            <span class="built_in">write</span>(sa, buf, bytes);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">close</span>(fd);</div><div class="line">        <span class="built_in">close</span>(sa);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>client.c</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fatal</span> <span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">string</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 12345</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE  4096</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> c, s, bytes;</div><div class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</div><div class="line">    <span class="keyword">struct</span> hostent *h;</div><div class="line">    <span class="keyword">struct</span> sockaddr_in channel;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) fatal(<span class="string">"Usage: client server-name filename"</span>);</div><div class="line">    h = gethostbyname(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (!h) fatal(<span class="string">"gethostbyname failed"</span>);</div><div class="line">    s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</div><div class="line">    <span class="keyword">if</span> (s &lt; <span class="number">0</span>) fatal(<span class="string">"socket"</span>);</div><div class="line">    <span class="built_in">memset</span>(&amp;channel, <span class="number">0</span>, <span class="keyword">sizeof</span>(channel));</div><div class="line">    channel.sin_family = AF_INET;</div><div class="line">    <span class="built_in">memcpy</span>(&amp;channel.sin_addr.s_addr, h-&gt;h_addr, h-&gt;h_length);</div><div class="line">    channel.sin_port = htons(SERVER_PORT);</div><div class="line"></div><div class="line">    c = connect(s, (<span class="keyword">struct</span> sockaddr *) &amp;channel, <span class="keyword">sizeof</span>(channel));</div><div class="line">    <span class="keyword">if</span> (c &lt; <span class="number">0</span>) fatal(<span class="string">"connect failed"</span>);</div><div class="line"></div><div class="line">    write(s, argv[<span class="number">2</span>], <span class="built_in">strlen</span>(argv[<span class="number">2</span>]) + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        bytes = read(s, buf, BUF_SIZE);</div><div class="line">        <span class="keyword">if</span> (bytes &lt;= <span class="number">0</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">        write(<span class="number">1</span>, buf, bytes);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><p><strong>最短路径算法</strong></p>
<p><strong>泛洪算法</strong><br>对多数情况是不适用的, 但是还有某些重要用途.<br>如广播和无线网络.</p>
<p><strong>距离矢量路由算法</strong>(Bellman-Ford算法)<br>无穷计算问题</p>
<p><strong>链路状态路由算法</strong>(Dijkstra算法)<br>被广泛应用与实际网络中</p>
<p><strong>层次路由</strong></p>
<p><strong>广播路由</strong><br>逆向路径转发</p>
<p><strong>组播路由</strong></p>
<hr>
<h1 id="计算机网络课程"><a href="#计算机网络课程" class="headerlink" title="计算机网络课程"></a>计算机网络课程</h1><h2 id="第二周-1-4计算机网络性能"><a href="#第二周-1-4计算机网络性能" class="headerlink" title="第二周-1.4计算机网络性能"></a>第二周-1.4计算机网络性能</h2><p><strong>速率</strong>即数据率(data rate) 或称数据传输率或比特率(bit rate)<br>单位 b/s(或bps), kb/s, Mb/s, Gb/s<br>k = 10^3, M = 10^ 6, G = 10^9<br>速率往往是指<strong>额定速率</strong>或<strong>标称速率</strong></p>
<p><strong>带宽</strong>(bandwidth) 是指信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹(Hz)<br>网络中的<strong>带宽</strong>是数字型号所能传送的<strong>最高数据率</strong>, 单位 b/s(bps)<br>常用的带宽单位:<br>kb/s(10^3 b/s), Mb/s, Gb/s, Tb/s</p>
<p>Q: 分组交换为什么会发生丢包和时延?<br>A: 分组在路由器缓存中排队</p>
<h3 id="四种分组延迟"><a href="#四种分组延迟" class="headerlink" title="四种分组延迟"></a>四种分组延迟</h3><ul>
<li><code>结点处理延迟</code>(nodal processing delay)</li>
<li><code>排队延迟</code>(queueing delay)<br>R: 链路带宽(bps)<br>L: 分组长度(bits)<br>a: 平均分组到达速率<br>流量强度: La / R (接近1: 平均排队延迟大, 约等于0: 平均排队延迟很小, 大于1: 超出服务能力,平均排队延迟无限大)</li>
<li><code>传输延迟</code>(transmission delay)<br>L: 分组长度(bits)<br>R: 链路带宽(bps)<br>d = L / R</li>
<li><code>传播延迟</code>(propagation delay)<br>d: 物理链路长度<br>s: 信号传播速度(~2 * 10^8 m/sec)<br>dprop = d / s</li>
</ul>
<p><strong>时延带宽积</strong> = 传播时延 * 带宽 = d * R (bits)<br>链路的时延带宽积又称为<code>以比特为单位的链路长度</code></p>
<p><strong>分组丢失(丢包)</strong> <code>丢包率</code> = 丢包数 / 已发分组总数</p>
<ul>
<li>队列缓存容量有限</li>
<li>分组到达已满队列将被丢弃</li>
<li>丢弃分组可能由前序节点或源重发(也可能不重发)</li>
</ul>
<p><strong>吞吐量/率(Throughput)</strong> : 表示在发送端与接受端之间传送数据速率(b/s)</p>
<ul>
<li>即时吞吐量: 给定时刻的速率</li>
<li>平均吞吐量: 一段时间的平均速率</li>
</ul>
<h2 id="第5周-传输层-上"><a href="#第5周-传输层-上" class="headerlink" title="第5周 传输层(上)"></a>第5周 传输层(上)</h2><p><strong>接收端进行多路分用</strong><br>传输层依据头部信息将收到的Segment 交给正确的Socket ,即不同的进程.</p>
<p><strong>发送端进行多路复用</strong><br>从多个Socket 接收数据,为每个数据封装上头部信息,生成Segment ,交给网络层.</p>
<h3 id="UDP-校验和-checksum"><a href="#UDP-校验和-checksum" class="headerlink" title="UDP 校验和(checksum)"></a>UDP 校验和(checksum)</h3><p><a href="http://m.blog.csdn.net/article/details?id=48268927" target="_blank" rel="external">csdn-二进制反码求和校验酸反</a></p>
<p><strong>发送方</strong><br>将段的内容视为16-bit 整数<br>计算所有整数的和,进位加在和的后面,将得到的值按位取反,得到校验和<br>发送方将校验和放入校验和字段</p>
<p><strong>接收方</strong><br>计算所收到段的校验和<br>将其与校验和字段进行对比<br>不相等: 检测出错误<br>相等: 没有检测出错误(但可能有错误)</p>
<p><strong>栗子</strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">两个整数</div><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></div><div class="line"></div><div class="line">求和得到</div><div class="line"><span class="number">1</span>(进位) <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></div><div class="line"></div><div class="line">将进位的<span class="number">1</span> 加到末位得到</div><div class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </div><div class="line"></div><div class="line">按位取反得到checksum</div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p><strong>可靠数据传输</strong><br>不错\不丢\不乱</p>
<h2 id="第6周-传输层-下"><a href="#第6周-传输层-下" class="headerlink" title="第6周 传输层(下)"></a>第6周 传输层(下)</h2><p><a href="https://blog.json.tw/introduction-to-computer-network-gbn-sr-tcp-compare" target="_blank" rel="external">GBN, SR, TCP 重传机制的比较</a></p>
<p>TCP - Tahoe : </p>
<pre><code>1. slow-start, 每收到一个ACK, 拥塞窗口cwnd值加一, 因此每过一个RTT, cwnd翻倍
2. 当cwnd超过慢启动阙值(slow start threshold)ssthresh时, cwnd停止slow-start, 开始线性增长.
3. 当发生超时或者快速重传(收到三次重复确认)时, ssthresh = cwnd / 2, cwnd = 1; 重新开始slow-start 过程
</code></pre><p>TCP - Reno</p>
<pre><code>1. slow-start
2. 当cwnd超过ssthresh时, cwnd停止slow-start, 开始线性增长
3. 当发生快速重传时, 进入快速恢复(fast recovery), ssthresh = cwnd / 2; cwnd = ssthresh; 
4. 当发生超时, ssthresh = cwnd / 2; cwnd = 1; 重新开始slow-start 过程
</code></pre><h2 id="第7周-网络层-上"><a href="#第7周-网络层-上" class="headerlink" title="第7周 网络层(上)"></a>第7周 网络层(上)</h2><p><strong>IP分组格式</strong></p>
<p>标志位 占3位, [保留, DF, MF]<br>DF(Don’t Fragment) {1: 禁止分片, 0: 允许分片}<br>MF(More Fragment) {1: 非最后一片, 0: 最后一片(或未分片)}</p>
<p>片偏移 字段占13位: 一个IP分组分片封装原IP 分组数据的相对偏移量<br>片偏移字段以<code>8 字节为单位</code></p>
<p>假设原IP 分组总长度L, 待转发链路的MTU(最大传输单元)为M<br>若L&gt;M, 且DF = 0, 则可以/需要分片<br>分片时每个分片的标识复制原IP 分组的标识<br>通常分片时, 除了最后一个分片, 其他分片均为MTU 允许的最大分片<br>一个最大分片可封装的数据应该是8 的倍数, 因此, 一个最大分片可以封装的数据为<br><code>d = [(M - 20) / 8] * 8    // 向下取整</code><br>需要的总片数为<br><code>n = [(L - 20) / d]   // 向上取整</code><br>每片的片偏移量字段的取值为<br><code>Fi = d / 8 * (i - 1) , 1 &lt;= i &lt;= n</code><br>每片总长度字段为<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Li = &#123;</div><div class="line">    d + <span class="number">20</span> , <span class="number">1</span> &lt;= <span class="selector-tag">i</span> &lt; n</div><div class="line">    L - (n - <span class="number">1</span>)d , <span class="selector-tag">i</span> = n</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>特殊IP地址</strong> (ipv4)</p>
<table>
<thead>
<tr>
<th>NetID</th>
<th>HostID</th>
<th>作为IP 分组源地址</th>
<th>作为IP 分组目的地址</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>全0</td>
<td>全0</td>
<td>可以</td>
<td>不可以</td>
<td>在本网范围内表示本机, 在路由表中用于表示默认路由(相当于表示整个Internet网络)</td>
</tr>
<tr>
<td>全0</td>
<td>特定值</td>
<td>不可以</td>
<td>可以</td>
<td>表示本网内某个特定主机</td>
</tr>
<tr>
<td>全1</td>
<td>全1</td>
<td>不可以</td>
<td>可以</td>
<td>本网广播地址(路由器不转发)</td>
</tr>
<tr>
<td>特定值</td>
<td>全0</td>
<td>不可以</td>
<td>不可以</td>
<td>网络地址, 表示一个网络</td>
</tr>
<tr>
<td>特定值</td>
<td>全1</td>
<td>不可以</td>
<td>可以</td>
<td>直接广播地址, 对特定网络上所有主机进行广播</td>
</tr>
<tr>
<td>127</td>
<td>非全0 或非全1 的任何数</td>
<td>可以</td>
<td>可以</td>
<td>用于本地软件环回测试, 称为环回测试</td>
</tr>
</tbody>
</table>
<p><strong>私有IP地址</strong> (ipv4)</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>NetIDs</th>
<th>Blocks</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>10</td>
<td>1</td>
</tr>
<tr>
<td>B</td>
<td>172.16 to 172.31</td>
<td>16</td>
</tr>
<tr>
<td>C</td>
<td>192.168.0 to 192.168.255</td>
<td>256</td>
</tr>
</tbody>
</table>
<p><strong>子网掩码的应用</strong></p>
<p>将IP分组的目的IP地址与子网掩码按位与运算, 提取子网地址<br>例如:目的地址: 172.32.1.112, 子网掩码: 255.255.254.0<br>172.32.1.112 =   10101100 00100000 00000001 01110000<br>255.255.254.0 =  11111111 11111111 11111110 00000000<br>与运算 = 10101100 00100000 00000000 00000000 = 172.32.0.0</p>
<p>所以:<br>子网地址: 172.32.0.0 (子网掩码: 255.255.254.0)<br>地址范围: 172.32.0.0 ~ 172.32.1.255<br>可分配地址范围: 172.32.0.1 ~ 172.32.1.254<br>广播地址: 172.32.1.255</p>
<h2 id="第8周-网络层-下"><a href="#第8周-网络层-下" class="headerlink" title="第8周 网络层(下)"></a>第8周 网络层(下)</h2><p>主机如何获得IP地址</p>
<ul>
<li>硬编码 - 静态配置</li>
<li>动态主机配置协议 DHCP - 从服务器动态获取</li>
</ul>
<p>网络地址转换<strong>NAT</strong><br>内部网络设备对外界网络不可见</p>
<p>NAT穿透问题解决方案</p>
<ul>
<li>静态配置NAT, 将特定端口的连接请求转发给服务器</li>
<li>利用UPnP(Universal Plug and Play)互联网网关设备协议(IGD- Internet Gateway Device), 自动配置: 学习到NAT公共IP地址</li>
<li>中继(如 skype)</li>
</ul>
<p>互联网控制报文协议(<strong>ICMP</strong>)</p>
<ul>
<li>差错(或异常)报告</li>
<li>网络探寻</li>
</ul>
<p><strong>距离向量路由算法</strong></p>
<p><strong>链路状态路由算法</strong></p>
<p><strong>RIP协议(Routing Information Protocol)</strong>(AS内)(使用距离向量路由算法)(使用UDP)</p>
<p><strong>OSPF协议(Open Shortest Path First)</strong>(AS内)(使用链路状态路由算法)</p>
<p><strong>BGP协议(Border Gateway Protocol)</strong>(AS间)(使用TCP)<br>AS间: eBGP<br>AS内: iBGP<br>前缀: 到达某些AS需要经过的路径<br>前缀的属性: AS-PATH, NEXT-HOP<br>BGP路由选择: 输入策略(import policy)(如: 政策问题禁止将流量路由到某个AS)<br>为什么AS间和AS内的路由协议不同?(<code>策略</code>policy, <code>规模</code>scale, <code>性能</code>performance)</p>
<h2 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h2><h3 id="链路层服务"><a href="#链路层服务" class="headerlink" title="链路层服务:"></a>链路层服务:</h3><ul>
<li><code>组侦framing</code>(封装数据报构成数据帧, 加首部和尾部)( 帧同步); </li>
<li><code>链路接入link access</code>(如果是共享介质, 需要解决信道接入channel access)(帧首部的MAC地址, 用于表示帧的源和目的)</li>
<li><code>相邻结点间可靠交付</code>(在低误码率的有线链路上很少采用, 如光纤,某些双绞线等)(无线链路: 误码率高,需要可靠交付)</li>
<li><code>流量控制</code>(协调相邻的发送节点和接收)</li>
<li><code>差错检测</code>(信号衰减和噪声会引起差错)</li>
<li><code>差错纠正</code></li>
<li><code>全双工和半双工通信控制</code></li>
</ul>
<h3 id="差错编码"><a href="#差错编码" class="headerlink" title="差错编码"></a>差错编码</h3><p>原理: D -&gt; DR R为差错检测与纠正比特(冗余比特)<br>差错编码可分为<em>检错码</em>和<em>纠错码</em><br><code>检错码</code>的检错能力: 对于检错码, 如果编码集的<a href="https://zh.wikipedia.org/wiki/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB" target="_blank" rel="external">汉明距离</a><code>ds=r+1</code>, 则该差错编码可以检测<code>r</code> 位的差错.<br>例如: {0000, 0101, 1010, 1111}的汉明距离为2, 可以100%检测1比特的差错(1比特的差错一定会变成一个无效编码)<br><code>纠错码</code>的纠错能力: 对于纠错码, 如果编码及的汉明距离<code>ds=2r+1</code>, 则该差错编码可以纠正<code>r</code>位的差错.<br>例如: {000000, 010101, 101010, 111111}的汉明距离为3, 可以纠正1比特的差错(如100010纠正为101010, (纠正成离他最近的正确编码)).</p>
<h4 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E4%BD%8D" target="_blank" rel="external">wikipedia</a><br><code>1比特校验位</code> (检测奇数位差错(检错率50%))<br><code>二维奇偶校验</code>(检测奇数位差错, 部分偶数位差错)(纠正在同一行/列的奇数位差错)</p>
<h4 id="internet校验和-checksum"><a href="#internet校验和-checksum" class="headerlink" title="internet校验和(checksum)"></a>internet校验和(checksum)</h4><p>详见传输层-UDP校验和<br>一般放入(UDP, TCP, IP)的校验和字段</p>
<h4 id="循环冗余校验码-CRC"><a href="#循环冗余校验码-CRC" class="headerlink" title="循环冗余校验码(CRC)"></a>循环冗余校验码(CRC)</h4><p>广泛应用于数据链路层,检错能力强大<br><a href="http://fdcwqmst.blog.163.com/blog/static/16406145520109712150424/" target="_blank" rel="external">模2运算</a></p>
<p><code>D</code>: 数据比特<br><code>G</code>: <code>r+1</code>位的比特模式(生成比特模式)<br><code>R</code>: <code>r</code>位的CRC比特</p>
<p>发送方和接收方使用相同的<code>G</code>, 可以检测出所有长度小于r+1的差错<br><code>发送方</code>: 构造出的编码结果要能被G整除, 根据D和G计算出R, 将D和R拼接成<code>&lt; D,R&gt;</code>, 即编码结果<br><code>接收方</code>: 将<code>&lt; D,R&gt;</code> 除以G(模2), 余式为0则无错, 否则出错.</p>
<p><code>&lt; D, R&gt;</code>的构造方法&gt;</p>
<ol>
<li>将D左移r位, D * 2^r</li>
<li>D左移r位的结果除以G(模2), 得到结果whatever和余数R</li>
<li>将D左移r位的结果 减去余数(模2), 得到(D * 2^r - R), 也就是(D * r^r XOR R), 也就是D与R拼接得到&lt; D,R&gt;, 这个结果可以被G整除(被除数减掉余数的结果肯定能被除数除尽)</li>
</ol>
<p>举例:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">被校验的数据M(x)=<span class="number">1000</span>，</div><div class="line">其选择生成多项式为G(x)=x^<span class="number">3</span>+x+<span class="number">1</span>,</div><div class="line">该数据的循环冗余校验和应为多少？</div><div class="line"></div><div class="line">G(x)=x^<span class="number">3</span>+x+<span class="number">1</span>对应的二进制数为<span class="number">1011</span>，</div><div class="line">且G(x)中含<span class="number">3</span>个项式，</div><div class="line">生成多项式为<span class="number">4</span>位二进制，</div><div class="line">由CRC规则应该取(<span class="number">4</span><span class="number">-1</span>)=<span class="number">3</span>位(校验和)，</div><div class="line">所以可以预加上<span class="number">3</span>位得到<span class="number">1000</span>B*<span class="number">2</span>^<span class="number">3</span>=<span class="number">1000</span> <span class="number">000</span>B;</div><div class="line"></div><div class="line"><span class="number">1000</span> <span class="number">000</span>B（被除数）对<span class="number">1011</span>（除数）做模<span class="number">2</span>除法，</div><div class="line">得到的余数便是<span class="number">101</span>B(即CRC校验和)，</div><div class="line">所以该数据的循环冗余校验后的数据应为<span class="number">1000</span> <span class="number">000</span>B+<span class="number">101</span>B=<span class="number">1000101</span>B。</div></pre></td></tr></table></figure></p>
<h3 id="Multiple-access-links-protocols"><a href="#Multiple-access-links-protocols" class="headerlink" title="Multiple access links , protocols"></a>Multiple access links , protocols</h3><p>two types of links</p>
<ul>
<li>point-to-point</li>
<li>broadcast(shared wire or medium)</li>
</ul>
<p>multiple access protocol</p>
<ul>
<li>distributed algorithm that determines how nodes share channel.</li>
</ul>
<p><strong>MAC protocols: taxonomy</strong></p>
<ul>
<li><p><strong>channel partitioning</strong><br>TDMA: time division multiple access<br>FDMA: frequency division multiple access</p>
</li>
<li><p><strong>random access</strong><br><strong>Slotted ALOHA</strong> (只能在某个时期开始时发, 如果两个节点冲突, 则下次两个节点都以概率p发送, 必须满足时钟同步, 节点必须能够检测到冲突, 效率0.37)<br><strong>Pure(unslotted) ALOHA</strong> (不分时期, 能直接发送, 效率比slotted Aloha更低, 0.18)<br><strong>CSMA</strong>(carrier sense multiple access)(listen before transmit, 也可能冲突)<br><strong>CSMA/CD</strong>(collision detection)(发送数据过程中检测冲突)(Ethernet CSMA/CD algorithm)<br>Lmin / R = 2 <em> S / V<br>800bit / 1Gbps = 2 </em> 80m / 200000Kmps</p>
</li>
<li><p><strong>taking turns</strong><br><strong>polling</strong> (master node invites slave nodes to transmit in turn)<br><strong>token passing</strong> (control token passed from one node to next sequentially)</p>
</li>
</ul>
<h3 id="Lan"><a href="#Lan" class="headerlink" title="Lan"></a>Lan</h3><p><strong>MAC address and ARP</strong></p>
<p>ARP表: LAN 中每个IP节点(主机, 路由器)维护一个表(存储某些LAN节点的IP/MAC地址映射关系)</p>
<p>A想要给<code>同一局域网</code>内的B发送数据包(B的MAC地址不在A的ARP表中)<br>则A<code>广播</code>ARP查询分组, 其中包含B的IP地址(广播的MAC地址=FF-FF-FF-FF-FF-FF)</p>
<h4 id="Ethernet"><a href="#Ethernet" class="headerlink" title="Ethernet"></a>Ethernet</h4><p><strong>bus(总线)</strong> (all nodes in same collision domain)</p>
<p><strong>star(星型)</strong> (each ‘spoke’ runs a Ethernet protocol (nodes do not collid with each other))</p>
<p>以太网: 无连接(没有握手), 不可靠(没有确认)</p>
<p><strong>Ethernet fram structure</strong>(见上 以太网帧结构)<br>preamble(8) des-add(6) sour-add(6) type(2) data(46-1500) CRC(4)<br>Lmin = 64B , data(min) = 64 - 6 - 6 - 2 - 4 = 46B</p>
<h4 id="switches-交换机"><a href="#switches-交换机" class="headerlink" title="switches(交换机)"></a>switches(交换机)</h4><p>存储, 转发以太网帧</p>
<p>识别帧中的MAC 地址, 选择性地转发</p>
<p>Ethernet protocol used on each incoming link, but no collisions; full duplex (each link is its own collision domain)</p>
<p><code>switch table</code> (each entry: MAC address of host, interface to reach host, time stamp)</p>
<p><code>switch: self-learning</code> </p>
<p>网络层路由器设备隔离广播域, 广播的范围为一个IP子网<br><code>注意区分冲突域 和广播域</code></p>
<p><code>交换机 vs 路由器</code><br>都有存储转发<br>路由器: 网络层, routing algorithms, IP addresses<br>交换机: 数据链路层 , learn forwarding table using flooding, learning, MAC addresses</p>
<p><code>summary comparison</code></p>
<table>
<thead>
<tr>
<th>-</th>
<th>hubs</th>
<th>switches</th>
<th>bridges</th>
<th>routers</th>
</tr>
</thead>
<tbody>
<tr>
<td>layer</td>
<td>1</td>
<td>2</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>traffic isolation</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>yes </td>
</tr>
<tr>
<td>storm isolation</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>plug and play</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>optimal routing</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>cut through</td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
<td>no</td>
</tr>
</tbody>
</table>
<h4 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h4><p>基于端口的VLAN<br><code>流量隔离</code> (come/from 端口1-8的帧只到达端口1-8)<br><code>动态成员</code> (端口可以动态分配给不同的成员)<br><code>在VLAN间转发</code>(通过路由, 就像在独立的交换机之间)(实践中, 厂商会将交换机和路由器集成在一起,因此不需要另外接路由器)</p>
<p><code>跨越多交换机的VLAN</code><br>多线缆连接(每个线缆连接一个VLAN)<br>中继端口(在跨越多个物理交换机定义的VLAN承载帧)(为多个VLAN转发802.1帧容易产生歧义(必须携带VLAN ID信息))(802.1q协议为经过中继端口转发的帧增加/去除 额外的首部域)</p>
<h3 id="PPP"><a href="#PPP" class="headerlink" title="PPP"></a>PPP</h3><p>one Sender and one Receiver, one link,<br>no Media Access Control,<br>no need for MAC address</p>
<p><strong>packet framing</strong><br><strong>bit transparency</strong><br><strong>error detection</strong><br><strong>connection liveness</strong><br><strong>network layer address negotiation</strong></p>
<p>no error correction/cecovery<br>no flow control<br>out of order delivery OK<br>no need to support multiple links</p>
<p><strong>Byte Stuffing</strong>字节填充<br>帧定界(标识帧的开始或者结束), 标识字节<code>&lt; 0 111 111 0&gt;</code><br>因此在发送数据时要进行字节填充, 扫描数据, 若发现<code>0 111 111 0</code>或<code>0 111 110 1</code>, 则在前面添加额外的字节<code>0 111 110 1</code></p>
<p>交换网络层数据之前, PPP数据链路两端需要:</p>
<ul>
<li>配置PPP链路</li>
<li>学习/配置网络层信息(如对于IP协议, 通过交换IPCP协议报文, 完成IP地址等相关信息的配置)</li>
</ul>
<h3 id="link-virtualization-MPLS"><a href="#link-virtualization-MPLS" class="headerlink" title="link virtualization: MPLS"></a>link virtualization: MPLS</h3><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p><strong>channel capacity</strong>(the maximum rate at which data can be transmitted over a given communication path(channel))</p>
<p>Data rate(in bits per second)<br>Bandwidth(in cycles per second of Hertz)</p>
<p>// 比特率和波特率的关系<br><strong>C = Blog2M</strong>(C bps, B baud rate, Bd, B = 2H, (H Hz))</p>
<p>// 比特率和带宽的关系<br><strong>C = 2Blog2M</strong> (C bps, B Hz)<br>C-channel capacity, B-bandwidth, M-the number of discrete signal<br>example: 带宽3KHz, 采用4个相位, 每个相位4种振幅的QAM调制技术, 则该通信链路的最大数据传输速率是: <strong>24 kbps</strong><br>2 <em> 4 </em> log2 16 = 24</p>
<p><strong>Shannon Capacity Formulation</strong><br><strong>C=Blog2 (1 + S / N)</strong><br>S/N - signal-to-noise ratio信噪比</p>
<p>S/N is often reported in descibels (<strong>dB</strong>)<br>(S/N)db = 10log10 (S / N)</p>
<p><code>Data Rate(Bit rate-R)</code>(Rate of data transmission in bits per second)<br><code>Modulation rate(Baud rate-B)</code>(Rate at width the signal level changes)<br><code>R = Blog2 M</code>(M-Number of states of code element)</p>
<p><code>Pulse Code Modulation(PCM)</code>(脉冲编码调制)</p>
<p><code>Spread Spectrum</code> (扩频)</p>
<p><code>异步/同步 传输</code>(异步: start bits, stop bits)(同步: 单独的时钟线, 或者将时钟信号嵌入到数据中)</p>
<p><code>Media</code></p>
<p><code>Interfacing</code></p>
<hr>
<h2 id="无线与移动网络"><a href="#无线与移动网络" class="headerlink" title="无线与移动网络"></a>无线与移动网络</h2><h3 id="wireless"><a href="#wireless" class="headerlink" title="wireless"></a>wireless</h3><p><code>wireless link</code>(无线链路)<br>(信号随距离衰减)(容易受干扰)()</p>
<p>信噪比低, 误码率高(SNR versus BER tradeoffs)</p>
<p>multiple access 可能遇到的问题<br><code>Hidden terminal problem</code>(障碍物导致的隐藏终端问题)<br><code>Signal attenuation</code>(信号衰减导致的问题)</p>
<p><code>CDMA</code>(码分多址)(每个用户分配不同的码片序列)</p>
<h4 id="802-11"><a href="#802-11" class="headerlink" title="802.11"></a>802.11</h4><p><strong>IEEE 802.11 Wireless LAN</strong>(WiFi)</p>
<ul>
<li>802.11b</li>
<li>802.11a</li>
<li>802.11g</li>
<li>802.11n (multiple antennae)(2.4-2.5 GHz range)(up to 600Mbs)</li>
</ul>
<blockquote>
<p>MIMO (多输入多输出)</p>
<p>OFDM (正交频分多路)</p>
</blockquote>
<p>base station = access point (ap)</p>
<p><code>BSS</code>(basic service set)(基站子系统)</p>
<p><code>SSID</code></p>
<p>host: must <em>associate</em> with an AP</p>
<p><strong>multiple access</strong>(可能产生的冲突问题)<br>CSMA - sense before transmitting<br>no collision dection(not CSMA/CD), use CSMA/CA(collision avoidance)(不能完全避免冲突, 能避免数据帧冲突)<br>发送端: 监听信道, 如果信道空闲, 且空闲了<strong>DIFS(分布式帧间间隙, 根据优先级有不同的时间间隙)</strong>时间, 则发送数据; 如果信道忙, 则启动随机的backoff time, 等信道空闲则启动倒计时, 倒计时结束后信道空闲则发送数据.<br>接收端: 如果接收到数据完成, 等待<strong>SIFS</strong>时间后返回ACK<br>避免冲突: 发送方先给BS发送一个<strong>RTS</strong>(request-to-send)包(使用CSMA), BS广播一个<strong>CTS</strong>作为RTS的回应; CTS被所有的节点监听到, 这样其他的节点就不会发送数据</p>
<p><code>AP不需要IP地址, 其为链路层设备</code></p>
<p>802.11 frame MTU 2312</p>
<h4 id="Cellular-Internet-access"><a href="#Cellular-Internet-access" class="headerlink" title="Cellular Internet access"></a>Cellular Internet access</h4><h3 id="mobility"><a href="#mobility" class="headerlink" title="mobility"></a>mobility</h3><p>mobile IP<br><code>home network</code> <code>home agent</code> <code>permanent address</code><br><code>visited network</code> <code>foreign agent</code> <code>care-of-address</code></p>
<p>GSM<br><code>home network</code> <code>home location register (HLR)</code> <code>visited network</code> <code>visitor location register(VLR)</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS 超长数字的坑]]></title>
      <url>https://beim.github.io/2016/09/06/JS-%E8%B6%85%E9%95%BF%E6%95%B0%E5%AD%97%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> num1 = <span class="number">1234567890123456</span></div><div class="line"><span class="keyword">const</span> num2 = <span class="number">12345678901234567</span></div><div class="line"><span class="keyword">const</span> str1 = <span class="string">'1234567890123456'</span></div><div class="line"><span class="keyword">const</span> str2 = <span class="string">`12345678901234567`</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(num1 === str1) <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;num1&#125;</span>`</span> === str1) <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(num2 === str2) <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;num2&#125;</span>`</span> === str2) <span class="comment">// false</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2011-午夜巴黎]]></title>
      <url>https://beim.github.io/2016/08/25/2011-%E5%8D%88%E5%A4%9C%E5%B7%B4%E9%BB%8E/</url>
      <content type="html"><![CDATA[<p><img src="http://img21.mtime.cn/pi/2011/04/04/161411.40182295_1000X1000.jpg" alt="1"></p>
<a id="more"></a>
<p><img src="http://img21.mtime.cn/pi/2011/06/03/141830.39636076_1000X1000.jpg" alt="1"></p>
<p><img src="http://img21.mtime.cn/pi/2011/04/04/161416.77653536_1000X1000.jpg" alt="1"></p>
<p><img src="http://img21.mtime.cn/pi/2011/04/04/161416.35864935_1000X1000.jpg" alt="1"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React-Native Startup]]></title>
      <url>https://beim.github.io/2016/08/08/React-Native-Startup/</url>
      <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>先<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">下载</a>JDK<br>解压到/usr/lib/jvm 下</p>
<p>修改环境变量<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ vi ~<span class="regexp">/.bashrc</span></div><div class="line"></div><div class="line"># 在末尾增加以下内容</div><div class="line">export JAVA_HOME=/usr<span class="regexp">/lib/jvm</span><span class="regexp">/jdk1.8.0_101</span></div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/<span class="class"><span class="keyword">lib</span>:$&#123;<span class="title">JRE_HOME</span>&#125;/<span class="title">lib</span></span></div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/<span class="symbol">bin:</span>$PATH</div><div class="line"></div><div class="line"><span class="comment"># 使环境变量生效</span></div><div class="line">$ source ~<span class="regexp">/.bashrc</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="Android-Studio-https-developer-android-com-studio-install-html"><a href="#Android-Studio-https-developer-android-com-studio-install-html" class="headerlink" title="Android Studio(https://developer.android.com/studio/install.html)"></a>Android Studio(<a href="https://developer.android.com/studio/install.html" target="_blank" rel="external">https://developer.android.com/studio/install.html</a>)</h3><p>先<a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">下载</a>Android Studio<br>解压到/usr/local/src 下</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 设置软链接</span></div><div class="line">$ sudo ln -s /usr/local/src/android-studio/bin/studio.sh /usr/local/bin/studio</div><div class="line"></div><div class="line"><span class="meta"># 64位的ubuntu需要安装以下库</span></div><div class="line">$ sudo apt-<span class="keyword">get</span> install lib32z1 lib32ncurses5 lib32bz2<span class="number">-1.0</span> lib32stdc++<span class="number">6</span></div><div class="line"></div><div class="line"><span class="meta"># 执行安装引导</span></div><div class="line">$ studio</div><div class="line"><span class="meta"># Sdk安装到了~/Android/Sdk</span></div><div class="line"></div><div class="line">$ vi ~/.bashrc</div><div class="line"><span class="meta"># 在文件末尾添加</span></div><div class="line"><span class="meta"># ANDROID_HOME环境变量</span></div><div class="line">export ANDROID_HOME=/home/beim/Android/Sdk</div><div class="line"><span class="meta"># Android SDK 的Tools 目录添加到PATH 变量中</span></div><div class="line">PATH=<span class="string">"~/Android/Sdk/tools:~/Android/Sdk/platform-tools:$&#123;PATH&#125;"</span></div><div class="line">export PATH</div><div class="line"></div><div class="line"><span class="meta"># 使环境变量生效</span></div><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure>
<h3 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h3><p><code>$ studio</code> 进入Android Studio<br>在<code>SDK Platform</code> 窗口中，选择<code>Show Package Details</code>, 然后在<code>Android 6.0 (Marshmallow)</code>中勾选<code>Google APIs</code>、<code>Intel x86 Atom System Image</code>、<code>Intel x86 Atom_64 System Image</code>以及<code>Google APIs Intel x86 Atom_64 System Image</code>。<br>在<code>SDK Tools</code>窗口中，选择<code>Show Package Details</code>，然后在<code>Android SDK Build Tools</code>中勾选<code>Android SDK Build-Tools 23.0.1</code>。（必须是这个版本）<br>然后点击<code>apply</code>,等待下载和应用变更。</p>
<h3 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 系统adb的版本要和android sdk platform-tools 的版本相同</span></div><div class="line">$ adb <span class="built_in">version</span> 检查版本</div><div class="line"></div><div class="line"><span class="comment"># 设置软链接</span></div><div class="line">$ sudo <span class="built_in">ln</span> -s ~/Android/Sdk/<span class="built_in">platform</span>-tools/adb /usr/<span class="built_in">local</span>/bin/adb</div></pre></td></tr></table></figure>
<h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h3><p><code>sudo npm install -g react-native-cli</code></p>
<h3 id="genymotion"><a href="#genymotion" class="headerlink" title="genymotion"></a>genymotion</h3><p>安卓模拟器（如果用真机可以不安装）<br><a href="https://www.genymotion.com/download/?utm_source=website&amp;utm_medium=slider&amp;utm_term=Get%20it%20now&amp;utm_campaign=Genymotion-2-7-2-release#" target="_blank" rel="external">下载</a><br>将下载下来的bin文件放置到用户目录下（/home/beim)</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 更改权限</div><div class="line">$ chmod <span class="number">777</span> /home/beim/genymotion<span class="number">-2.7</span><span class="number">.2</span>-linux_x64.bin</div><div class="line"># 安装</div><div class="line">$ ./genymotion<span class="number">-2.7</span><span class="number">.2</span>-linux_x64.bin</div></pre></td></tr></table></figure>
<p>…<br>安装完成之后打开genymotion<br>选择<code>settings</code>-<code>ADB</code>-<code>Use custom Android SDK tools</code><br>填入之前安装Sdk的路径（/home/beim/Android/Sdk)</p>
<p>选择<code>Add</code><br>寻找合适（API23）的虚拟机下载并测试打开。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># 进入放置项目文件的目录</span></div><div class="line">$ react-native init AwesomeProject</div><div class="line"><span class="meta"># 耗费一定时间，需要科学上网。也可到github 上找别人打包好的文件</span></div><div class="line">$ cd AwesomeProject</div><div class="line">$ react-native start # 或者 npm start</div><div class="line"></div><div class="line"><span class="meta"># 确保真机或者虚拟机设备已经连接</span></div><div class="line">$ adb devices</div><div class="line"></div><div class="line"><span class="meta"># 另开一个终端</span></div><div class="line">$ react-native run-android</div><div class="line"></div><div class="line"><span class="meta"># 这时候可以看到真机/虚拟机打开了应用</span></div><div class="line"><span class="meta"># 如果出现红屏提示无法连接到服务器</span></div><div class="line"><span class="meta"># `按menu 键`或者 `摇一摇` 或者 `adb shell input keyevent 82` 打开开发者菜单</span></div><div class="line"><span class="meta"># 点击进入 ` Dev Settings`</span></div><div class="line"><span class="meta"># 点击`Debug server host for device`</span></div><div class="line"><span class="meta"># 如果是真机，输入你电脑的ip地址和端口号（如192.168.1.101:8081); 如果在虚拟机，输入`0.0.0.0:8081`</span></div><div class="line"><span class="meta"># 返回`开发者菜单`，选择`Reload JS`</span></div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://reactnative.cn/docs/0.31/getting-started.html#content" target="_blank" rel="external">React-Native中文网-搭建开发环境</a><br><a href="http://reactnative.cn/docs/0.31/running-on-device-android.html" target="_blank" rel="external">React-Native中文网-在设备上运行</a><br><a href="https://facebook.github.io/react-native/docs/getting-started.html#content" target="_blank" rel="external">React-Native官网</a><br><a href="http://stackoverflow.com/questions/38512025/react-native-run-android-mismatch-version-adb-server-version" target="_blank" rel="external">Stack Overflow adb server version (32) doesn’t match this client (36); killing …</a><br><a href="http://www.cnblogs.com/suxun/p/5220564.html" target="_blank" rel="external">史上最全Windows版本安装React Native环境配置</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 启动初始化]]></title>
      <url>https://beim.github.io/2016/08/05/ubuntu-%E5%90%AF%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="首先看这几个目录："><a href="#首先看这几个目录：" class="headerlink" title="首先看这几个目录："></a>首先看这几个目录：</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># sysvinit 的文件</span></div><div class="line">/etc/init.d <span class="comment"># sysvinit 启动服务的脚本</span></div><div class="line">/etc/rc$&#123;runlevel&#125;.d <span class="comment"># 指向sysvinit 目录下脚本的软链接，系统通过区分不同目录来加载对应运行级别的程序。</span></div><div class="line"></div><div class="line"><span class="comment"># upstart 的文件</span></div><div class="line">/etc/init <span class="comment"># upstart 的启动配置文件。</span></div><div class="line"></div><div class="line"><span class="comment"># systemd 的文件</span></div><div class="line">/etc/systemd/system <span class="comment"># 指向/lib/systemd/system 的软链接，可以通过增删软链接来启用或者禁用启动服务。</span></div><div class="line">/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span> <span class="comment"># systemd 的启动配置文件。</span></span></div></pre></td></tr></table></figure>
<p>ubuntu 16采用的是systemd 初始化系统<br>ubuntu 14采用的是upstart 初始化系统<br>sysvinit 则是更早版本的启动服务<br><a id="more"></a></p>
<p>为了兼容性，systemd 和upstart 都会支持sysvinit</p>
<h2 id="一些工具"><a href="#一些工具" class="headerlink" title="一些工具"></a>一些工具</h2><p>sysvinit 启动的服务可以通过service 来控制</p>
<ul>
<li><code>$ service --status-all</code> 查看服务启动的状态，列出的服务和/etc/init.d 目录下的脚本是一一对应的。</li>
<li><code>$ service serviceName start/stop</code> 启用或者关闭服务。</li>
</ul>
<p>进入<code>/etc/rc2.d</code> 目录<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd /etc/rc2.d</div><div class="line"><span class="variable">$ </span>ll</div></pre></td></tr></table></figure></p>
<p>可以看到除了README 外，其他程序都是S || K + 数字 + 程序名的形式。S表示Start，也就是启动，K表示Kill（从其他运行级别切换过来需要关闭的程序）。后面的数字表示处理顺序，数字越小越早处理，数字相同时按照程序名的字母顺序启动。<br>可以通过修改S 或者K 来管理服务启动项。更建议使用工具来修改：<a href="http://wiki.ubuntu.org.cn/%E5%90%AF%E5%8A%A8#sysv-rc-conf" target="_blank" rel="external">sysv-rc-conf</a>(修改不同运行级别的启动项)，<a href="http://wiki.ubuntu.org.cn/%E5%90%AF%E5%8A%A8#rcconf" target="_blank" rel="external">rcconf</a>（修改当前运行级别的启动项）。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="external">Linux 的启动流程_阮一峰</a>（初始化部分与ubuntu 不同，ubuntu 现在采用的是Upstart 启动服务）</li>
<li><a href="http://www.cnblogs.com/cassvin/archive/2011/12/25/ubuntu_init_analysis.html" target="_blank" rel="external">Ubuntu init启动流程分析</a>(解释了System V initialization 和 Upstart 两种方式)</li>
<li><a href="http://wiki.ubuntu.org.cn/%E5%90%AF%E5%8A%A8#rcconf" target="_blank" rel="external">ubuntuwiki启动</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/linux/1407_liuming_init2/" target="_blank" rel="external">浅析 Linux 初始化 init 系统，第 2 部分: UpStart</a></li>
<li><a href="http://blog.fens.me/linux-upstart/" target="_blank" rel="external">upstart把应用封装成系统服务</a></li>
<li><a href="http://wiki.ubuntu.org.cn/%E5%90%AF%E5%8A%A8#rcconf" target="_blank" rel="external">upstart_cookbook</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="external">Systemd 入门教程：命令篇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html" target="_blank" rel="external">Systemd 入门教程：实战篇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/03/node-systemd-tutorial.html" target="_blank" rel="external">Node 应用的 Systemd 启动</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/index.html" target="_blank" rel="external">浅析 Linux 初始化 init 系统，第 3 部分: Systemd</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git命令之 git tag]]></title>
      <url>https://beim.github.io/2016/08/05/git%E5%91%BD%E4%BB%A4%E4%B9%8B-git-tag/</url>
      <content type="html"><![CDATA[<h2 id="列出标签"><a href="#列出标签" class="headerlink" title="列出标签"></a>列出标签</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">tag</span></div></pre></td></tr></table></figure>
<h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#创建轻量标签</span></div><div class="line">git <span class="keyword">tag</span> <span class="title">v0</span>.<span class="number">1.2</span></div><div class="line"></div><div class="line"><span class="comment">#创建附注标签</span></div><div class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v0.<span class="number">1.2</span> -m '<span class="number">0.1</span>.<span class="number">2</span>版本'</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="切换到标签"><a href="#切换到标签" class="headerlink" title="切换到标签"></a>切换到标签</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git</span> checkout tagname</div></pre></td></tr></table></figure>
<h2 id="查看标签信息"><a href="#查看标签信息" class="headerlink" title="查看标签信息"></a>查看标签信息</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">show </span><span class="built_in">v0</span>.<span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">tag</span> <span class="title">-d</span> v0.<span class="number">1.2</span></div></pre></td></tr></table></figure>
<h2 id="给指定的commit打标签"><a href="#给指定的commit打标签" class="headerlink" title="给指定的commit打标签"></a>给指定的commit打标签</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v0.<span class="number">1.1</span> <span class="number">0</span>fbc3d0</div></pre></td></tr></table></figure>
<h2 id="标签发布到git服务器"><a href="#标签发布到git服务器" class="headerlink" title="标签发布到git服务器"></a>标签发布到git服务器</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> v0.1.2</div><div class="line"></div><div class="line">#一次性提交所有标签到<span class="built_in">origin</span></div><div class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> --tags</div></pre></td></tr></table></figure>
<h2 id="删除远程tag"><a href="#删除远程tag" class="headerlink" title="删除远程tag"></a>删除远程tag</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git push origin <span class="symbol">:refs/tags/tag-name</span></div><div class="line"><span class="comment">#其实分支也是这样</span></div><div class="line">git push origin <span class="symbol">:branch-name</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Node.js的内部结构]]></title>
      <url>https://beim.github.io/2016/08/05/Node-js%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>首先, 关于JavaScript的一些话……</p>
<p>Jeff Atwood, Stack Overflow的联合创始人之一, 曾经在它的博客Coding Horror中写道:</p>
<p>any application that can be written in JavaScript, will eventually be written in JavaScript</p>
<a id="more"></a>
<p>JavaScript影响范围在过去几年中有相当大的增长, 以至于它现在已经成为最受欢迎的编程语言之一. 实际上, 在2016 SO Deverloper Survey中, JavaScript在Most Popular Technology和 Top Tech on Stack Overflow上都排名第一, 并且在其他几个调查结果的排名都不错.</p>
<p>Node.js是一个服务端JavaScript运行环境, 它奠定了服务端重要功能的基础,如二进制数据操作, 文件系统I/O操作, 数据库访问, 计算机网络等等. 它独特的特性让它在现有的久经考验的框架中突显出来,(如Django(Python), Laravel(PHP), RoR(Ruby)等).也正是这些特性让科技公司如PayPal, Tinder, Medium, LinkedIn 和 Netflix 接受了它, 有些甚至在Node.js达到1.0版本之前就开始使用.</p>
<p>我最近回答了一个<a href="http://stackoverflow.com/questions/36766696/which-is-correct-node-js-architecture/37512766#37512766" target="_blank" rel="external">关于Node.js内部结构的问题</a>,正是这个问题激励我写下这篇文章.</p>
<hr>
<p>官方文档对于理解Node.js究竟是什么并没有什么帮助:</p>
<blockquote>
<p>a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model ……</p>
</blockquote>
<p>为了理解这则声明,和它有多强大, 让我们将Node.js的组件分解, 解释其中关键的术语, 然后解释这些组件是怎样互相影响并让Node.js如此强大.</p>
<p><img src="/images/nodejsstructure.png" alt="nodejsstructure"></p>
<h2 id="COMPONENTS-DEPENDENCIES-组件-依赖"><a href="#COMPONENTS-DEPENDENCIES-组件-依赖" class="headerlink" title="COMPONENTS/DEPENDENCIES(组件/依赖)"></a>COMPONENTS/DEPENDENCIES(组件/依赖)</h2><p><strong>V8</strong>: Google开源,以C++实现的高性能JavaScript引擎. 这和你的Chrome浏览器的引擎是一样的. V8会处理你的JavaScript代码, 并将它编译成机器码(因此它飞一样快), 并执行. V8到底有多快? 查看这个<a href="http://stackoverflow.com/a/41932/4603550" target="_blank" rel="external">SO答案</a></p>
<p><strong>libuv</strong>: 提供异步特性的C library. 它用来支持event loop(事件循环), a thread pool(线程池), file system events(文件系统事件), 和 child processes(子进程), 还有其他关键功能.</p>
<p><strong>Other C/C++ Components/Dependencies</strong>: 例如 c-ares, crypto(OpenSSL), http-parser, 和zlib. 这些依赖提供了与服务器的较低层次的交互, 建立一些重要的功能如networking(网络),compressing(压缩),encrypting(加密)等等.</p>
<p><strong>Application/Modules</strong>这是所有的JavaScript 代码存在的地方: 你的程序代码, Node.js核心模块, 你从npm下载的模块, 和你自己写的模块. 你大部分的工作都在这个部分.</p>
<p><strong>Bindings</strong>: 你可能已经注意到, Node.js是用JavaScript和C/C++写成的. 用这么多C/C++代码或者libraries的原因很简单:他们很快啊! 然后你写的JavaScript代码是怎么平滑地转换成C/C++代码的呢? 难道他们不是两种不同的语言吗? 对确实是. 并且通常来说用不同语言写代码不能互相通信. 但是有bindings(绑定)就不一样了. Bindings(绑定), 正像它名字一样, 是将一种语言和另一种语言”绑定”起来的胶水代码, 这样的话他们就能够进行交互了. 在这种情况下(Node.js), bindings只将C/C++写的Node.js核心内部库(c-ares, zlib, OpenSSL, http-parser, 等等)暴露给JavaScript. 写bindings的动机之一是代码复用: 如果想要的功能已经实现了,为什么要再重新写一遍呢?只是因为它们是不同的语言吗?只是连接他们不就好了? 另一个动机是性能: 像C/C++这样的系统编程语言的性能通常比其他高级语言更好(如 Python, JavaScript, Ruby等). 因此对于像CPU密集型这样的操作让C/C++写的代码去做就好了.</p>
<p><strong>C/C++ Addons</strong>: bindings只提供Node.js的核心内部库的胶水代码(如 zlib, OpenSSL, c-ares, http-parser等等). 如果你想要在你的程序中加入第三方或者你自己的C/C++库, 你自己要为你的库写胶水代码. 你写的这些胶水代码被叫做addons(插件). 你可以把bindings和addons看做你的JavaScript代码和Node.js的C/C++代码沟通的桥梁.</p>
<h2 id="TERMINOLOGIES-术语"><a href="#TERMINOLOGIES-术语" class="headerlink" title="TERMINOLOGIES(术语)"></a>TERMINOLOGIES(术语)</h2><p><strong>I/O</strong>: Input/Output的缩写. 它基本代表了系统的I/O子系统的所有操作. I/O-bound(I/O密集型)操作通常涉及与硬盘/驱动器的交互. 例如数据库访问和文件系统操作. 其他相关的概念有CPU-bound, memory-bound等等. 检测一个操作是否属于I/O-bound, CPU-bound,或者其他类型, 需要增加特定操作所用的资源, 看哪个会获得更好的性能. 例如,如果CPU计算能力增强, 该操作会明显变快, 那么它属于CPU-bound.</p>
<p><strong>Non-blocking/Asynchronous(非阻塞/异步)</strong>: 通常来说, 当一个请求进来时, 程序会处理这个请求并在这个请求处理完成之前停止其他所有操作. 这立刻暴露出一个问题: 当大量请求同时到来时, 每个请求都得等之前的请求处理完. 换句话说, 先前的操作会阻塞它之后的操作. 情况还可能更糟, 如果先前的操作响应时间很长(例如,计算前1000个质数,或者从数据库中读取3GB的数据),其他所有的请求都会被终止/阻塞很长事件. 为了解决这个问题, 你可以采取多进程 和/或 多线程的解决方法, 它们各有优缺点. Node.js的处理方式不同, 它并没有为每个新请求开一个新进程, 所有的请求都使用单线程处理, 这几乎就是它做的所有事情: 处理请求–请求中所有(I/O)操作(例如文件系统访问,数据库读写)都送到worker线程,也就是背后的libuv(上面有提到). 换句话说, 请求中所有的I/O操作都是异步处理, 并不在主线程中处理.这种方法使得主线程永远不会被阻塞, 因为繁重的操作都转移到了其他的地方. 你(还有你的程序代码)只需要在主线程中工作. 所有libuv的线程池里的worker线程对你都是透明的. 你永远也不需要直接操作它们(也不需要担心). Node.js会帮你照顾它们. 这个结构使得I/O操作变得非常高效. 然而,这也不是没有缺点的. 操作不止包含I/O-bound,而且还有CPU-bound, memory-bound等等. Node.js只给你提供了I/O任务的异步方法, 当热也有办法来解决CPU密集型操作. 然而这不在本文讨论范围内.</p>
<p><strong>Event-Driven(事件驱动的)</strong>: 一般的, 几乎所有的现代系统中, 在主程序开始以后, 进程通过传入的请求来初始化. 然而就是从这里开始产生区别, 有时候不同技术的区别是巨大的. 通常的实现是按程序处理请求: 为一个请求开一个线程; 操作一个接一个的完成; 如果哪个操作慢了, 它之后的操作都会在那个操作被暂停; 当所有的操作都完成, 再返回响应. 然而,在Node.js中, 所有的操作都作为事件注册到Node.js中, 等待被触发, 它们可能被主程序或者请求触发.</p>
<p><strong>Runtime(System)</strong>: Node.js运行环境是整个代码库(上面提到的组件), 包括低级和高级, 同时为Node.js程序的执行提供支持.</p>
<h2 id="PUTTING-EVERYTHING-TOGETHER-整合"><a href="#PUTTING-EVERYTHING-TOGETHER-整合" class="headerlink" title="PUTTING EVERYTHING TOGETHER(整合)"></a>PUTTING EVERYTHING TOGETHER(整合)</h2><p>现在我们对Node.js的组件有了大致概念, 接下来看它的工作流程, 之后你将对它的结构和不同组件间如何交互有更好的了解.</p>
<p>当Node.js程序开始运行的时候, V8引擎会运行你写的陈旭代码. 你程序中的对象会保持一系列<code>observers</code>(观察者)(注册到events的方法). 当它们预期的事件发出之后,这些observers将会得到通知.</p>
<p>当一个事件发出, 它的回调函数将会排入event queue(事件队列). 只要队列中还有事件,event loop(事件循环)就会将队列中的事件出列并添加到call stack(调用堆栈), 需要注意的是, 只有之间的事件被处理完(调用堆栈清空后), event loop才会将下一个事件放到call stack.</p>
<p>在call stack中, 当遇到I/O操作, 它将会被交给libuv去处理. 默认的, libuv保持4个worker线程的线程池, 这个默认值可以被修改. worker线程会根据I/O操作的类型, 和Node.js的低层次库交互,来决定执行的具体操作如数据库读写, 文件系统访问,网络等待. 当处理完毕之后, libuv会将这个事件enqueue(出列)并放回到event queue(事件队列)中, 等待主线程处理. 这时, libuv异步处理了I/O操作, 主线程并没有等待操作的结果而是继续进行. 被libuv返回的事件在event loop(事件循环)再次将它放到call stack(调用堆栈)的时候被主线程处理. 这样就完成了一个Node.js程序事件的生命周期.</p>
<p><a href="http://stackoverflow.com/users/370756/mbq" target="_blank" rel="external">mbq</a>曾经以餐馆对Node.js作了绝妙的比喻. 我将借用它的范例并稍作修改来让Node.js周期更容易理解. 把Node.js程序看做星巴克. 一个高效,训练有素的服务员(唯一的主线程)来下订单. 当大量客户同时进入咖啡厅, 他们将会等待服务员的服务(事件队列的入队). 当服务员接待一个客户之后, 他会把客户的订单交给一个管理员(libuv), 管理员会给每个订单交给一个咖啡师(worker thread). 咖啡师会根据顾客的要求用不同的配料和机器(底层的C/C++组件)来制作不同种的饮料.一般情况下会有4个咖啡师值班(thread pool). 然而,在高峰期, 可以让更多的咖啡师来工作(然而这应该在一天刚开始的时候来做, 而不是午休期间). 当服务员将订单提交给管理员之后, 他并没有等咖啡做好之后再服务下一位顾客, 而是叫下一位顾客(event loop将下一个事件出列,并放到call stack). 你可以把call stack中的事件看做是正在柜台被服务的顾客. 当咖啡做好之后, 咖啡将会被送到顾客队列的末尾. 当咖啡移动到柜台的时候, 服务员会叫顾客的名字,然后顾客拿到咖啡.(这在现实生活中可能有点怪, 然而你从程序的进程的角度来想的话就合理了)</p>
<hr>
<p>这样就完成了Node.js的内部代码库和它的事件生命周期的高度概览. 然而这是很概括性的,并没有包括很多问题和细节, 例如CPU-bound操作处理, Node.js设计模式等.</p>
<hr>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a><a href="https://medium.com/yet-another-node-js-blog/architecture-of-node-js-internal-codebase-57cd8376b71f#.sl5sna17t" target="_blank" rel="external">原文</a></h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[跨域请求之JSONP与CORS]]></title>
      <url>https://beim.github.io/2016/08/05/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E4%B9%8BJSONP%E4%B8%8ECORS/</url>
      <content type="html"><![CDATA[<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>在使用wikipedia的API的时候，直接发送ajax请求得到以下信息：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XMLHttpRequest cannot <span class="keyword">load</span> https://en.wikipedia.org/w/api.php?<span class="keyword">action</span>=<span class="keyword">query</span>&amp;<span class="keyword">format</span>=<span class="keyword">json</span>&amp;<span class="keyword">list</span>=<span class="keyword">search</span>&amp;srsearch=<span class="number">1.</span> Response <span class="keyword">to</span> preflight request doesn’t pass <span class="keyword">access</span> control <span class="keyword">check</span>: <span class="keyword">No</span> ‘<span class="keyword">Access</span>-Control-<span class="keyword">Allow</span>-Origin’ header <span class="keyword">is</span> <span class="keyword">present</span> <span class="keyword">on</span> the requested resource. Origin ‘<span class="keyword">http</span>://s.codepen.io’ <span class="keyword">is</span> therefore <span class="keyword">not</span> allowed access.</div></pre></td></tr></table></figure>
<p>这是由于XMLHttpRequest对象受限于<a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">同源策略(same origin-policy)</a>。这个策略使得页面只能从同一个源(origin)获取数据。源是由协议(protocol)，主机(host)，端口号(port number)决定的。例如<code>https://www.sitepoint.com/jsonp-examples/</code> 的源就是<code>https, www.sitepoint.com</code>, <code>80</code>。</p>
<p>同源策略是一个安全机制。它避免了脚本从你的域读取数据并发送到别的服务器上。</p>
<a id="more"></a>
<p>下面介绍两种解决方法：</p>
<h2 id="JSONP-JSON-with-Padding"><a href="#JSONP-JSON-with-Padding" class="headerlink" title="JSONP(JSON with Padding)"></a>JSONP(JSON with Padding)</h2><p>script标签可以从另一个域中载入数据，<script src="xxx"></script>。因此我们可以新建一个script标签，设置src属性，然后插入到页面中</p>
<p>JSONP就建立在这种技术之上，它给我们提供了一种处理返回数据的方法。它将服务器返回的JSON数据包裹在一个回调函数中(即padding)。这个回调函数必须在处理JSONP返回数据的页面中。</p>
<p>例如：</p>
<figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> JSON_CALLBACK = <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(res)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> <span class="built_in">url</span> = <span class="string">'https://en.wikipedia.org/w/api.php?action=query&amp;format=json&amp;list=search&amp;srsearch='</span> + <span class="keyword">this</span>.state.svalue + <span class="string">'&amp;callback=JSON_CALLBACK'</span></div><div class="line"><span class="comment">//JSON_CALLBACK即回调函数名称</span></div><div class="line"><span class="keyword">let</span> scriptTag = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</div><div class="line">scriptTag.setAttribute(<span class="string">'src'</span>, <span class="built_in">url</span>)</div><div class="line"><span class="built_in">document</span>.body.appendChild(scriptTag)</div></pre></td></tr></table></figure>
<p>这种方法只在跨域 GET请求有用。</p>
<h2 id="CORS-Cross-Origin-Resource-Sharing跨域资源共享"><a href="#CORS-Cross-Origin-Resource-Sharing跨域资源共享" class="headerlink" title="CORS(Cross-Origin Resource Sharing跨域资源共享)"></a>CORS(Cross-Origin Resource Sharing跨域资源共享)</h2><p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank" rel="external">CORS</a>是允许请求跨域资源的机制。</p>
<p>对于AJAX和HTTP请求，浏览器会先对请求预检(preflight)，向目标服务器发送HTTP OPTIONS 请求头， 然后从服务器获得许可(approval)，再发送实际的HTTP请求。</p>
<blockquote>
<p>以下情况将会发送预请求</p>
<ul>
<li>请求以 GET, HEAD 或者 POST 以外的方法发起请求。或者，使用 POST，但请求数据为 application/x-www-form-urlencoded, multipart/form-data 或者 text/plain 以外的数据类型。比如说，用 POST 发送数据类型为 application/xml 或者 text/xml 的 XML 数据的请求。</li>
<li>使用自定义请求头（比如添加诸如 X-PINGOTHER）</li>
</ul>
</blockquote>
<p>举个栗子：</p>
<ul>
<li>浏览器发送OPTIONS请求，带有Origin HTTP头。 这个请求头的值即当前页面的域。当<a href="http://www.foo.com的页面尝试获取" target="_blank" rel="external">http://www.foo.com的页面尝试获取</a> bar.com的数据时，会给bar.com 发送下列请求头：<code>Origin: http://www.foo.com</code></li>
<li>服务器可能会返回</li>
</ul>
<blockquote>
<ul>
<li>Access-Control-Allow-Origin: <a href="http://www.foo.com。（ACAO)响应头表明允许的源站点。" target="_blank" rel="external">http://www.foo.com。（ACAO)响应头表明允许的源站点。</a></li>
<li>如果服务器不支持跨域请求，将会返回错误。</li>
<li>Access-Control-Allow-Origin: *。(ACAO)响应头表明允许所有域。</li>
</ul>
</blockquote>
<h2 id="JSONP-vs-CORS"><a href="#JSONP-vs-CORS" class="headerlink" title="JSONP vs CORS"></a>JSONP vs CORS</h2><p>两种方法都需要服务器支持。</p>
<p>JSONP只支持GET请求方法。JSONP可能造成XSS问题。</p>
<p>CORS可以看做现代的JSONP替代方案。CORS还能支持GET以外的HTTP请求，对错误处理和安全支持也更好。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://stackoverflow.com/questions/33297190/response-for-preflight-has-invalid-http-status-code-404-angular-js" target="_blank" rel="external">stackoverflow</a></p>
<p><a href="http://stackoverflow.com/questions/11001817/allow-cors-rest-request-to-a-express-node-js-application-on-heroku" target="_blank" rel="external">stackoverflow</a><br>解决了项目中POST 请求的问题，<br>由于在发送真正的POST 请求之前会发送一个OPTIONS 请求，将这个请求的status 置为200，则下一步发送真正的POST 请求。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">MDN</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js中的类Class]]></title>
      <url>https://beim.github.io/2016/08/05/js%E4%B8%AD%E7%9A%84%E7%B1%BBClass/</url>
      <content type="html"><![CDATA[<h2 id="构造函数法"><a href="#构造函数法" class="headerlink" title="构造函数法"></a>构造函数法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">like</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> nickName = <span class="string">'myNickName'</span></div><div class="line">    <span class="keyword">this</span>.callNickName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> nickName;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'myName'</span></div><div class="line">    <span class="keyword">this</span>.like = like</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">'dog'</span>)</div><div class="line"><span class="built_in">console</span>.log(cat1.name) <span class="comment">// myName</span></div><div class="line"><span class="built_in">console</span>.log(cat1.nickName) <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(cat1.callNickName()) <span class="comment">// myNickName</span></div><div class="line"><span class="built_in">console</span>.log(cat1.like) <span class="comment">// dog</span></div><div class="line"><span class="comment">// 属性和方法也可以定义在function对象的prototype对象上</span></div><div class="line">Cat.prototype.makeSound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'miao'</span>)</div><div class="line">&#125;</div><div class="line">cat1.makeSound() <span class="comment">// miao</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Cat = &#123;</div><div class="line">    name: <span class="string">'myName'</span>,</div><div class="line">    makeSound: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'miao'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> cat1 = <span class="built_in">Object</span>.create(Cat)  </div><div class="line"><span class="built_in">console</span>.log(cat1.name) <span class="comment">// myName </span></div><div class="line">cat1.makeSound() <span class="comment">// miao</span></div></pre></td></tr></table></figure>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(x, y) &#123;</div><div class="line">        <span class="keyword">this</span>.x = x</div><div class="line">        <span class="keyword">this</span>.y = y</div><div class="line">    &#125;</div><div class="line">    toString() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span></div><div class="line">    &#125;</div><div class="line">    say() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'say something'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Point) <span class="comment">// function</span></div><div class="line"><span class="built_in">console</span>.log(Point === Point.prototype.constructor) <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(Point.toString()) <span class="comment">// class Point &#123; ... &#125;</span></div><div class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="built_in">console</span>.log(point.toString()) <span class="comment">// (1, 2)</span></div><div class="line">point.say() <span class="comment">// say something</span></div><div class="line">Point.say() <span class="comment">// Error!</span></div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/07/three_ways_to_define_a_javascript_class.html" target="_blank" rel="external">前两种方法</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="external">第三种方法</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[测试框架AVA]]></title>
      <url>https://beim.github.io/2016/08/05/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6AVA/</url>
      <content type="html"><![CDATA[<p><img src="/images/ceshiheader.png" alt="ava"></p>
<blockquote>
<p>面向未来的测试运行器</p>
</blockquote>
<a id="more"></a>
<ul>
<li><a href="https://cnodejs.org/topic/57464cd8da0dea851e308101" target="_blank" rel="external">关于AVA的介绍</a></li>
<li><a href="https://github.com/avajs/ava" target="_blank" rel="external">github</a></li>
</ul>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="全局安装AVA，在项目中用-–init-参数运行命令，会将AVA添加到package-json"><a href="#全局安装AVA，在项目中用-–init-参数运行命令，会将AVA添加到package-json" class="headerlink" title="全局安装AVA，在项目中用 –init 参数运行命令，会将AVA添加到package.json"></a>全局安装AVA，在项目中用 –init 参数运行命令，会将AVA添加到package.json</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ npm install --global ava</div><div class="line">$ ava --init</div><div class="line"><span class="section">#package.json</span></div><div class="line">&#123;</div><div class="line"><span class="code">    "name": "awesome-package",</span></div><div class="line"><span class="code">    "scripts": &#123;</span></div><div class="line"><span class="code">        "test": "ava"</span></div><div class="line"><span class="code">    &#125;,</span></div><div class="line"><span class="code">    "devDependencies": &#123;</span></div><div class="line"><span class="code">        "ava": "^0.11.0"</span></div><div class="line"><span class="code">    &#125;</span></div><div class="line">&#125;![<span class="string">ava</span>](<span class="link">/images/ceshiheader</span>)</div></pre></td></tr></table></figure>
<h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nstall --save-dev ava</div><div class="line"></div><div class="line">#再对 <span class="string">``</span><span class="keyword">package</span>.json<span class="string">``</span> 配置 <span class="string">``</span>test<span class="string">``</span> 脚本 （如上）</div></pre></td></tr></table></figure>
<h2 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#main.js</span></div><div class="line">let a = <span class="function"><span class="params">(x)</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> x * x</div><div class="line">    <span class="keyword">return</span> x</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = a</div><div class="line"><span class="comment">#test.js</span></div><div class="line">const test = <span class="built_in">require</span>(<span class="string">'ava'</span>)</div><div class="line">const a = <span class="built_in">require</span>(<span class="string">'./main.js'</span>)</div><div class="line">test(<span class="string">'give 3 should return 9'</span>, t =&gt; &#123;</div><div class="line">    t.<span class="keyword">is</span>(a(<span class="number">3</span>), <span class="number">9</span>)</div><div class="line">&#125;)</div><div class="line">test(<span class="string">'git -3 should return -3'</span>, t =&gt; &#123;</div><div class="line">    t.<span class="keyword">is</span>(a(<span class="number">-3</span>), <span class="number">-3</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">beim<span class="variable">@Idea:</span>~/temp/ava$ ava -v</div><div class="line">  ✔ give <span class="number">3</span> should return <span class="number">9</span></div><div class="line">  ✔ git -<span class="number">3</span> should return -<span class="number">3</span></div><div class="line">  <span class="number">2</span> tests passed [<span class="number">10</span>:<span class="number">19</span>:<span class="number">26</span> GMT+<span class="number">0800</span> (CST)]</div></pre></td></tr></table></figure>
<h2 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h2><p>官方推荐使用<a href="https://github.com/istanbuljs/nyc" target="_blank" rel="external">nyc</a></p>
<h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> nyc --save-dev</div><div class="line"><span class="comment">#或全局安装</span></div><div class="line">$ npm <span class="keyword">install</span> nyc -g</div><div class="line"><span class="comment">#修改package.json 的test 脚本</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"script"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"nyc ava ./test/*.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试一下-1"><a href="#测试一下-1" class="headerlink" title="测试一下"></a>测试一下</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#修改之前的package<span class="selector-class">.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"nyc ava -v"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">beim<span class="meta">@Idea:~/temp/ava$</span> npm test</div><div class="line">&gt; @ test /home/beim/temp/ava</div><div class="line">&gt; nyc ava -v</div><div class="line">  ✔ give 3 should return 9</div><div class="line">  ✔ git -3 should return -3</div><div class="line">  2 tests passed [10:23:53 GMT+0800 (CST)]</div><div class="line">----------|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------------</span>|</div><div class="line">File      |<span class="string">  % Stmts </span>|<span class="string"> % Branch </span>|<span class="string">  % Funcs </span>|<span class="string">  % Lines </span>|<span class="string">Uncovered Lines </span>|</div><div class="line">----------|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------------</span>|</div><div class="line">All files |<span class="string">      100 </span>|<span class="string">      100 </span>|<span class="string">      100 </span>|<span class="string">      100 </span>|<span class="string">                </span>|</div><div class="line"> main.js  |<span class="string">      100 </span>|<span class="string">      100 </span>|<span class="string">      100 </span>|<span class="string">      100 </span>|<span class="string">                </span>|</div><div class="line">----------|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------</span>|<span class="string">----------------</span>|</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016_日常]]></title>
      <url>https://beim.github.io/2016/08/01/2016-%E6%97%A5%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p><img src="/images/house.jpg" alt="header"><br><a id="more"></a></p>
<h1 id="Aug"><a href="#Aug" class="headerlink" title="Aug"></a>Aug</h1><hr>
<p><strong>白日梦</strong>：<br>兔子和我说了好多话，第四条里她访问了一个网址，<br>然后不知怎的我的笔记本接到了请求，genymotion 模拟器启动，8081端口反向代理，adb连接。<br>模拟器里的人影若隐若现，<br><code>Thu Aug 11 22:13</code></p>
<hr>
<p><strong>白日梦</strong>：<br>我坐在船上，船行在海上。还有鲸豚。<br>我尝试着换了个方向行驶。<br>船桅折了。<br><code>Sun Aug 14 22:37</code></p>
<hr>
<p><strong>武功山</strong>：<br><img src="http://ob4a6y748.bkt.clouddn.com/yun1.jpg" alt="武功山"><br><img src="http://ob4a6y748.bkt.clouddn.com/yun2.jpg" alt="武功山"><br>晚上7点，到了海拔1918m的金顶。<br>在纸上写棍棍和兔子的名字，放进了云里。<br><code>Tue Aug 16 17:25</code></p>
<hr>
<p><strong>摆渡人</strong>:<br>崔斯坦没有消失。<br>真是太好了。<br>太好了。<br><code>Tue Aug 16 21:48</code></p>
<hr>
<p><strong>白日梦</strong>:<br>做了一个让我笑醒的梦<br>好想和你说<br><code>Thu Aug 18 22:19</code></p>
<hr>
<p><strong>浪矢杂货店</strong>:<br>很多时候<br>你一直都知道自己想要的是什么<br>只是不敢承认<br>所以我喜欢抛硬币来解决问题<br>在抛出的一瞬间 答案就明了了<br><code>Mon Aug 22 23:45</code></p>
<hr>
<p><strong>张家界</strong><br><img src="http://ob4a6y748.bkt.clouddn.com/yun3.jpg" alt="玻璃桥"><br>心心念念的玻璃桥<br><code>Sun Aug 28 15:19</code></p>
<hr>
<h1 id="Sep"><a href="#Sep" class="headerlink" title="Sep"></a>Sep</h1><hr>
<p><strong>NCU</strong><br>走的时候没有向林純瓊老师道别真是有点遗憾呐<br><code>Tue Sep 13 15:45</code></p>
<hr>
<p><strong>迅羽</strong><br>一年了<br>羽毛想你啊<br><code>Sun Sep 25 22:10</code></p>
<hr>
<p><strong>RE0</strong><br>雷姆雷姆<br>剑圣剑鬼<br><code>Mon Sep 26 11:00</code></p>
<hr>
<h1 id="Oct"><a href="#Oct" class="headerlink" title="Oct"></a>Oct</h1><hr>
<p><strong>白日梦</strong><br>假期白天不睡觉<br>大挑战<br><code>Wed Oct 5 16:23</code></p>
<hr>
<p><strong>十月</strong><br>兔子<br>这里下雪了~<br><code>Sat Oct 22 11:39</code></p>
<hr>
<h1 id="Nov"><a href="#Nov" class="headerlink" title="Nov"></a>Nov</h1><hr>
<p><strong>十一月</strong><br>没有工作日 没有休息日 没有万圣节<br>只有两只蜂 计 和 编<br>嗡嗡嗡嗡嗡嗡</p>
<p>ys收到村上春树的书了, 两年的约定兑现了呢.<br><code>Tue Nov 1 23:00</code></p>
<hr>
<p><strong>科学的电磁炮</strong><br><img src="http://ob4a6y748.bkt.clouddn.com/dcp.png" alt="dcp"><br>yoooo</p>
<p><24小时学会电磁炮><br><code>Wed Nov 2 16:01</code></24小时学会电磁炮></p>
<hr>
<p><strong>白日梦</strong><br>特别怀念在台湾那些闲散的时光<br>有阳光和树影<br><code>Thu Nov 3 11:29</code></p>
<hr>
<p><strong>白日梦</strong><br>从未知到一知半解是很容易的, 从一知半解再到已知却需要花费大量的精力.<br>而人都会有规避危险的意识, 就像走在高压电箱前会停下, 因为怕被电到.<br>于是就保持着一知半解的状态,止步不前.<br><code>Fri Nov 11 14:34</code></p>
<hr>
<p><strong>白日梦</strong><br><a href="http://music.163.com/#/song?id=29043460" target="_blank" rel="external">プラスティックとレイン</a><br>很想回去<br><code>Sat Nov 12 19:04</code></p>
<hr>
<p><strong>大清早</strong><br>和00聊了会儿<br>好久不见她<br>貌似发生了什么事情<br>希望她好起来吧<br><code>Wed Nov 16 08:17</code></p>
<hr>
<p><strong>白日梦</strong><br>下午和清河阿尔法小溪跑车了<br>兔子.好想你<br><code>Fri Nov 18 20:15</code></p>
<hr>
<p><strong>雪</strong><br><img src="http://ob4a6y748.bkt.clouddn.com/xx11768779376.jpg" alt="x"><br><img src="http://ob4a6y748.bkt.clouddn.com/xx2-1829678333.jpg" alt="x"><br><img src="http://ob4a6y748.bkt.clouddn.com/xx3-1207002342.jpg" alt="x"><br><img src="http://ob4a6y748.bkt.clouddn.com/xx4-2091906432.jpg" alt="x"><br><code>Sat Nov 19 17:44</code></p>
<hr>
<p><strong>浮生未歇</strong><br><a href="http://music.163.com/#/song/409650845?userid=111365099" target="_blank" rel="external">不如就此相忘于尘世间</a></p>
<p><embed src="http://music.163.com/style/swf/widget.swf?sid=409650845&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all"><br><code>Sun Nov 20 10:58</code></p>
<hr>
<p><strong>酱油</strong><br>昨天下午酱油找我帮他媳妇做题<br>哼这家伙 和他媳妇还挺同步的<br>真好啊<br>然后<br>然后<br>我问他知不知道兔子在哪<br>他居然不知道兔子是谁~(白痴兔hhh)<br>然后告诉他是酱油他才知道2333<br>他说<br>他帮我问吧<br>等他回复的时候, 我期待他问不到的. (真是奇怪)<br>还是想等兔子告诉我啊<br>等不到吧<br>= =<br>晚安<br><code>Mon Nov 21 01:20</code></p>
<hr>
<p><strong>兔子,你在哪</strong><br>又下大雪了呢<br>你那里呢<br><code>Mon Nov 21 01:28</code></p>
<hr>
]]></content>
    </entry>
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[2017-收藏]]></title>
      <url>%2F3017%2F01%2F01%2F2017-%E6%94%B6%E8%97%8F%2F</url>
      <content type="text"><![CDATA[语言相关Node javascript 严格模式 - 阮一峰 passportJs - 验证 pm2入门 sequelize doc yaml 入门 lodash - javascript 工具库 C gdb 调试 webbench 源码分析 C 工具库 - qlibc what does void * mean - stack overflow char *str 和 char str[] 的区别 stackoverflow 上的解释 C++ std::string::find_first_not_of python python 核心编程 - gitbook Djiango book - 中文翻译 Requests - doc 小白运维站 安装scrapy 失败 - 缺少依赖libssl-dev 语言无关 ibm-REST Service ABNF规范 - wiki postgresql 常用操作 Ubuntu 安装 eclipse 解决Ubuntu和Windows的文件乱码问题 git 详解 shadowsocks.com.hk - 2017-2-9 主页 便携多功能防水垫 godaddy - 域名 sss - 90-92分钟 - 跑跑 网易云课堂 - 哈工大]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[C-来自张总的教诲]]></title>
      <url>%2F2017%2F03%2F29%2FC-%E6%9D%A5%E8%87%AA%E5%BC%A0%E6%80%BB%E7%9A%84%E6%95%99%E8%AF%B2%2F</url>
      <content type="text"><![CDATA[代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int func1(int num1, int num2) &#123; num1 = num1 ^ num2; return num1;&#125;int func2(int num1, int num2) &#123; int num3 = num1 ^ num2; return num3;&#125;int func3(int num1, int num2) &#123; return num1 ^ num2;&#125;#define func4(num1, num2) (num1 ^ num2)#define N 1000000000int main(int argc, char *args[]) &#123; if (argc &lt; 2) &#123; printf("need arguments\n"); exit(0); &#125; int num1 = 1; int num2 = 2; int num3; if (args[1][0] == '0') &#123; for (int i = 0; i &lt; N; i++) num3 = func1(num1, num2); &#125; else if (args[1][0] == '1') &#123; for (int i = 0; i &lt; N; i++) num3 = func2(num1, num2); &#125; else if (args[1][0] == '2') &#123; for (int i = 0; i &lt; N; i++) num3 = func3(num1, num2); &#125; else &#123; for (int i = 0; i &lt; N; i++) num3 = func4(num1, num2); &#125;&#125; 运行结果123456789101112131415161718192021222324252627282930~/user/temp$ time r 0real 0m2.854suser 0m2.852ssys 0m0.004s~/user/temp$ time r 1real 0m2.854suser 0m2.852ssys 0m0.000s~/user/temp$ time r 2real 0m2.600suser 0m2.596ssys 0m0.000s~/user/temp$ time r 3real 0m1.920suser 0m1.916ssys 0m0.000s~/user/temp$ 分析：堆和栈，函数调用的开销]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[huawei-yunpingtai]]></title>
      <url>%2F2017%2F03%2F23%2Fhuawei-yunpingtai%2F</url>
      <content type="text"><![CDATA[SQLSELECTSELECT * FROM dept; // 算术运算SELECT ename, sal, 12*sal+100 FROM emp; // 别名SELECT ename as &quot;Name&quot;, sal*12 &quot;Annual Salary&quot; FROM emp; // 级联操作符||，结果是两列的拼接SELECT ename, job, ename || job as &quot;Employees&quot; FROM emp; // DISTINCT 消除重复SELECT DISTINCT deptno FROM emp; WHERE 条件// WHERESELECT ename FROM emp WHERE deptno=30;// 字符串和日期使用单引号；字符值区分大小写，日期值对格式敏感SELECT job FROM emp WHERE ename=&#39;RACHEL&#39;; 比较条件： = &gt; &gt;= &lt; &lt;= &lt;&gt; BETWEEN...AND... IN(set)匹配任意值 LIKE IS NULLSELECT name FROM users WHERE id BETWEEN 1 AND 10;SELECT name FROM users WHERE id IN(1, 2, 3);SELECT name FROM users WHERE name LIKE &#39;user\_%&#39;; %替代一个或多个， _替代一个, \_转义 逻辑条件：AND OR NOT 优先级：算数操作符 &gt; 连接操作符 &gt; 条件比较 &gt; IS [NOT] NULL, LIKE, [NOT] IN &gt; [NOT] BETWEEN &gt; NOT &gt; AND &gt; OR ORDER BY 子句作排序：ASC升序(默认)，DESC降序SELECT name,id FROM users WHERE name LIKE &#39;user\_%&#39; ORDER BY id;SELECT name,id FROM users WHERE name LIKE &#39;user\_%&#39; ORDER BY id DESC;// ORDER BY 可以有多列，从左到右依次排序SELECT ename,job FROM emp ORDER BY deptno,sal DESC; 单行函数字符函数 大小写操作函数12345LOWER('SQL Course') 转小写 sql courseUPPER('SQL Course') 转大写 SQL COURSEINITCAP('SQL Course') 仅首字母大写 Sql CourseSELECT ename, deptno FROM emp WHERE LOWER(ename)='jones'; 字符操作函数123456CONCAT('Hello', 'World') 字符连接 HelloWorldSUBSTR('HelloWorld', 1, 5) 取子串 HelloLENGTH('HelloWrold') 取字符串长度 10INSTR('HelloWorld', 'W') 返回子字符串在字符串中的位置 SELECT ename, concat(ename,job) infor FROM emp; 数字函数1234ROUND(45.926, 2) 四舍五入到指定位 45.93TRUNC(45.926, 2) 截取到指定位 45.92SELECT ROUND(45.926, 2), TRUNC(45.926, 2) FROM dual; 日期函数1234567891011121314151617SYSDATE 返回系统当前日期SELECT SYSDATE FROM dual;SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') FROM dual;日期算法：加上或减去一个数字得到一个日期值两个日期相减得到两个日期之间的天数将小时与日期相加，需要将小时数除以24SELECT ename, HIREDATE, (sysdate-hiredate)/7 AS WEEKS, hiredate+1, hiredate-24/24 FROM emp;常用日期函数MONTHS_BETWEEN(x, y) 两个日期之间的月数ADD_MONTHS(x, y) 添加日历月y到日期xNEXT_DAY(x, day) 指定日期x的下一day的时间值，例如day是MONDAYLAST_DAY(x) 指定日期当前月的最后一天SELECT ename, hiredate, MONTHS BETWEEN(SYSDATE, hiredate) months, ADD_MONTHS(hiredate, 2) add2mon, NEXT_DAY(hireday, 'MONDAY'), LAST_DAY(hiredate) FROM emp; 转换函数：隐式数据类型转换，显式数据类型转换123456789101112131415161718192021222324252627隐式：VARCHAR2 or CHAR -&gt; NUMBERVARCHAR2 or CHAR -&gt; DATESELECT ename, hiredate FROM emp WHERE hiredate &gt; '20-APR-15';转换函数：常用TO_CHAR函数处理日期，格式format_model 需要满足：- 必须包含在单引号，并且是大小写敏感- 可以包括任何有效的日期格式元素- 由逗号分开的日期值SELECT ename, TO_CHAR(hiredate, 'YYYY-MM-DD') FROM emp;常用TO_CHAR函数处理数字9 代表一个数字0 强制显示一个0$ 放置一个浮动的美元符号L 使用浮动的本地流通货币符号. 打印一个小数点, 打印一个”一千“指标符SELECT ename, sal, TO_CHAR(sal, '$99,999.00') FROM emp;TO_NUMBER 将字符转成数字SELECT TO_NUMBER('0001122') FROM dual;TO_DATE 将字符串转换为日期格式SELECT TO_DATE('2015-07-28 19:15:39', 'yyyy-mm-dd hh24:mi:ss') FROM dual;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[内存字节对齐]]></title>
      <url>%2F2017%2F03%2F22%2F%E5%86%85%E5%AD%98%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%2F</url>
      <content type="text"><![CDATA[５分钟搞定内存字节对齐 1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;#include &lt;cstdio&gt;// #pragma pack(8)struct st &#123; int b; // 0-3 char c; // 4 double a; // 8-15&#125;;struct st1 &#123; int b; // 0-3 double a; // 8-15 char c; // 16&#125;;struct st2 &#123; int a; // 0-3 int b; // 4-7 int c; // 8-11 st s; // 16-31&#125;;int main (void)&#123; printf("%lu %lu %lu\n", sizeof(st), sizeof(st1), sizeof(st2)); // 16 24 32 // 若#pragma pack(1) -&gt; 13 13 25 // 若#pragma pack(2) -&gt; 14 14 26 // 若#pragma pack(4) -&gt; 16 16 28 // 若#pragma pack(8) -&gt; 16 24 32&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[UML-note]]></title>
      <url>%2F2017%2F03%2F22%2FUML-note%2F</url>
      <content type="text"><![CDATA[UML简介UML 是一种对软件密集型系统的制品进行下列工作的语言，这些工作包括： 可视化 visualizing 详述 specifying 构造 constructing 文档化 documenting UML 的构成 视图 views 图 diagrams 模型元素 通用机制 视图Use-Case ViewLogical ViewProcess ViewComponent ViewDeployment View 图类图 class diagram对象图 object diagram用例图 use case diagram时序图 sequence diagram协作图 conllaboration diagram状态图 statechart diagram活动图 activity diagram组件图 component diagram部署图 deployment diagram 模型元素事物 things 结构事物 structural things类接口协作用例活动类组件节点 行为事物 behavioral things交互状态机 分组事物 grouping things分组事物只有一种： 包包是一种将有组织的元素分组的机制 注释事物 annotational things UML 中的关系 relationships 关联 association 依赖 dependency 泛化 generalization 实现 realization 聚合 polymerization 通用机制 修饰 注释 规格说明 通用划分 扩展机制 UML 的扩展组件 构造型 标记值 约束 用例图用例图的组成；参与者；用例；事件流；用例间的关系 用例图分为业务用例图和系统用例图 用例图主要包含以下6个元素 参与者 (系统外部的一个实体)(启动者和支持者) 用例 (外部可见的系统功能单元)(简单名，路径名) 关联关系: （实线箭头）表示参与者与用例之间的关系 包含关系: （虚线箭头include）一个用例可以包含其他用例的行为；客户用例包含提供者用例；包含关系把几个客户用例的公共部分提取出来作为单独的用例（提供者用例）。 扩展关系: （虚线箭头extend）扩展关系把新行为加入到已有的用例中；扩展用例扩展基础用例；扩展用例是基础用例的增量扩展；扩展关系与包含关系的区别：客户用例执行时提供者用例一定执行；而基础用例被执行时，扩展用例不一定执行。 泛化关系: （实线三角箭头）父用例可以被列举为多个子用例（继承行为和属性，还可以添加行为或覆盖，改变继承的行为） 事件流事件流的描述是独立于实现方法的，描述系统“做什么”，而不是“怎么做”事件流文件的组成：简要说明，前提条件，后置条件，事件流程 类图类图的元素， 类， 接口， 类之间的关系， 分析阶段的类图， 设计阶段的类图 类图是描述类，接口以及他们之间关系的图 类图的元素 类 包括名称(name), 属性(attribute), 和操作(operation)类的属性可见性：public(+) private(-) protected(#) package(~) 接口 依赖关系 客户以某种形式依赖于提供者依赖关系的分类： 使用依赖(usage), 抽象依赖(abstraction), 授权依赖(permission), 绑定依赖(binding) 泛化关系 关联关系: 名称name，角色role，多重性multiplicity，聚合关系aggregation，组合关系composition，导航性navigation名称：使用一个动词或动词短语来命名关联，关联的名称非必须; 用户—使用&gt;—计算机角色：一个类对另一个类表现出来的职责; 学生–+学习者—-+教学者–学校多重性：指有多少个对象可以参与关联; 学校n–+教学者—-+学习者–1..n学生聚合关系：表示整体与部分关系的关联; 大学〇1—-1..n学院组合关系：组合是聚合关系中一种特殊情况，是更强形式的聚合 实现关系 接口依赖关系泛化关系关联关系聚合关系组合关系 交互图序列图简介，序列图组成，用例图、类图、序列图之间的关系BCE 模式，Frame，组合片段，协作图 交互图描述系统中对象之间通过消息通信的图，交互图包括：序列图（时序图，顺序图），协作图（通信图） 序列图包含4个元素： 对象(将对象至于顶部说明交互开始的时候对象就已经存在了，若不在顶部则说明对象在交互的过程中被创建)对象的创建（见下图）；对象的注销（在生命线终止点放置一个‘X’号，见下图） 生命线 消息（消息是对象之间某种形式的通信，可以是信号，也可以是调用，消息可以用于在对象间传递参数）消息的类型：call send return create destroy消息的编号：顺序编号（从1开始）；嵌套编号 激活 序列图的元素创建对象的两种表示方法（序列图）注销对象消息的类型 BCE模式(Robustness 分析法，在系统分析阶段采用的分析模式)B: Boundary; C: Control; E: Entity 边界类：隔离系统内部和外部，负责接受参与者的消息 控制类：控制类对应用例，用来控制用例执行期间的复杂运算或者业务逻辑; 分析阶段通常针对一个用例生成一个控制类 实体类：对应于类图中领域概念中的类，封装了数据结构和数据存储有关的类 增加书籍序列图1增加书籍序列图2 组合片段表示循环和分支, 引入交互片段，区域和操作符的概念一个交互片段可以包含多个区域，每个区域拥有一个监护条件和一个复合语句操作符：opt，alt, loop, break, par, critical, ref Frame组合片段 协作图也成为通信图，描述系统中对象间通过消息进行的交互，强调了对象在交互行为中承担的角色 协作图包含 对象(Object) 链（Link） 消息（Message） 协作图增加书籍协作图1增加书籍协作图2 序列图描述交互过程中时间顺序，协作图描述对象之间的关系；两种图的语义是等价的 状态图状态图主要用来描述一个对象在生存期间的动态行为，表现为一个对象所经历的状态序列，引起状态转移的事件Event，以及因状态转移而伴随的动作Action 状态图元素 状态State(圆角矩形)指在对象的生命周期中某个条件或者状态 初始状态Initial State(实心圆点，通常带有已经过初始化的含义) 终止状态Final State（圆形内嵌圆点） 转移Transaction(带箭头的实线)两个状态间的关系，表示对象在源状态中执行一定的动作，并在某个特定事件发生而且某个特定的警界条件满足时进入目标状态触发事件是转移的诱因警戒条件警戒条件满足时，事件才会引发状态转移结果Effect对象状态转移的后果动作Actions动作是可执行的原子操作,执行时间可忽略不计 组合状态 进入节点 退出节点 历史状态 初始状态，终止状态转移图书-借阅者的状态图图书的状态图 活动图活动图简介，活动图元素，图书馆活动图，活动图和状态图的区别，活动图和流动图的区别 活动图描述活动的顺序，展现从一个活动到另一个活动的控制流；活动图在本质上是一种流程图，着重表现从一个活动到另一个活动的控制流 活动图元素 活动状态 Action State 开始点 结束点 分支与合并 分叉与会和 用于将控制图分为两个或者多个并发运行的分支 泳道 对象流 活动图简介对象流 活动图表现从一个活动到另一个活动的控制流, 是内部处理驱动的过程状态图描述从一个状态到另一个状态的流程，主要有外部事件的参与 组件图组建图描述软件的各种组件以及它们之间的依赖关系组件图中通常包含3个元素：组件Component，接口Interface，依赖关系Dependency 组件是系统中遵从一组接口且提供其实现的物理的、可替换的部分 组件图的例子组件和接口之间的关系 部署图部署图也称配置图，实施图；用来描述系统硬件的物理拓扑结构以及在此结构上执行的软构件 部署图的基本概念： Node（节点）处理器设备 Connection（连接） 部署图的例子 部署图的例子在上图中，构造型指出了浏览器和应用服务器之间的连接使用 HTTP 协议，而应用服务器与数据服务器之间的连接使用 Java 的远程方法调用（RMI）协议]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[systemd-note]]></title>
      <url>%2F2017%2F03%2F22%2Fsystemd-note%2F</url>
      <content type="text"><![CDATA[Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置。 ubuntu 从15 开始采用Systemd systemd配置文件存放在/lib/systemd/system 下系统从/etc/systemd/system/ 下的软链接寻找配置文件并启动服务 1234567891011121314151617181920212223242526272829303132333435363738394041424344# 启动一个服务$ systemctl start ssh.service# 停止一个服务$ systemctl stop ssh.service# 重启一个服务$ systemctl restart ssh.service# 杀死一个服务的所有紫禁城$ systemctl kill ssh.service# 重新加载一个服务的配置文件$ systemctl reload ssh.service# 重新加载所有修改过的配置文件$ systemctl daemon-reload# 显示某个Unit 的所有底层参数$ systemctl show ssh.service# 列出所有配置文件以及状态$ systemctl list-unit-files# 查看某个Unit 的运行状态$ systemctl status ssh.service # 查看配置文件的内容$ systemctl cat ssh.service# 启用一个服务$ systemctl enable ssh.service# 禁用一个服务$ systemctl disable ssh.service# 查看启动时默认的Target$ systemctl get-default# 设置启动时默认的Target$ systemctl set-default multi-user target# 查看日志$ journalctl -xe 修改配置文件之后要重新加载配置文件，再重新启动，否则修改不会生效。 Unit 区块是配置文件的第一个区块，定义Unit 的描述和其他Unit 的关系 Install 通常是最后一个区块，用来定义如何启动，是否开机启动。 Service 是Service 的配置（如启动服务的命令，重启的配置），只有Service 类型的Unit 才有这个区块]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JS-原型]]></title>
      <url>%2F2017%2F03%2F15%2FJS-%E5%8E%9F%E5%9E%8B%2F</url>
      <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455function Person () &#123; this.name = &#123; first: 'liu', second: 'xin' &#125;&#125;p = new Person()p.__proto__ === Person.prototype // trueObject.getPrototypeOf(p) === Person.prototype // truep.constructor === Person // truep.constructor === Person.prototype.constructor // truefunction Man () &#123; this.who = 'man'&#125;Man.prototype = new Person()m = new Man()m.constructor === Man // falsem.constructor === Person // truem.__proto__ === Person // false m.__proto__ 是之前创建的new Person() 对象m.__proto__.__proto__ === Person.prototype // truefunction Shape () &#123; this.x = 0; this.y = 0;&#125;Shape.prototype.display = () =&gt; console.log('x is', this.x)s = new Shape()s.display() // x is 0function Rect () &#123; this.name = 'im a rect'&#125;r = new Rect()Rect.prototype = Object.create(Shape.prototype)r.display() // x is undefinedr.__proto__ === Shape.prototype // trueclass Bottle &#123; constructor() &#123; this.name = 'bottle' &#125;&#125;b = new Bottle()b.constructor === Bottleb.__proto__ === Bottle.prototype]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[实习面试]]></title>
      <url>%2F2017%2F03%2F12%2F%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%2F</url>
      <content type="text"><![CDATA[记录一下面试遇到过的问题 2017-03-11 蚂蚁金服 分布式计算(30+)计算机网络： TCP 和UDP 的区别有序数据传输重发丢失的数据包舍弃重复的数据包无错误数据传输阻塞/流量控制面向连接（确认有创建三方交握，连接已创建才作传输。） TCP 报文内容源端口 目的端口序列号确认号头大小 标志位 窗口大小校验和 紧急指针选项字段数据 TIME_WAIT 是什么主动关闭端接收到FIN后，就发送ACK包，等待足够时间以确保被动关闭端收到了终止请求的确认包。【按照RFC 793，一个连接可以在TIME-WAIT保证最大四分钟，即最大分段寿命（maximum segment lifetime）的2倍】 TIME_WAIT 存在的理由博客园可靠地实现TCP全双工连接的终止， 允许老的重复分节在网络中消逝 操作系统 进程和线程的区别一个程序至少有一个进程，一个进程至少有一个线程。线程的划分尺度小于进程，使得多线程程序的并发性高。进程在执行的过程中有独立的内存单元，而多个线程共享内存，从而提高了程序的运行效率。进程是具有一定独立个功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配和调度的独立单位。线程是CPU调度的最小单位，新建线程的时候会申请thread ID, program counter, register set, stack; 与其他同一进程的线程共享code section, data section, open files and signals。进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。 python 的线程和c 的线程一样吗，python 线程是不是只能占用一个核 C 语言 函数指针的作用 算法 单链表求环代码实现(快慢指针) 项目 项目中遇到的问题，怎么解决 2017-03-13 阿里 研发工程师C/C++(50+)项目 项目架构 负责的部分(权限认证，批量授权怎么解决) 操作系统 线程的状态create ready running blocking terminating 为什么需要线程同步线程之间可能共享一些资源，当多个线程同时读写同一份资源的时候可能会引起冲突。线程同步的方法：互斥量，条件变量，屏障，信号量 数据结构 双向链表删除节点 哈希碰撞散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的，但也可能不同，这种情况称为“哈希碰撞”，这通常是两个不同长度的输入值，刻意计算出相同的输出值。 计算机网络 TCP 三次握手过程[SYN Seq=A]客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三路握手的一部分。客户端把这段连接的序号设定为随机数A。[SYN, ACK Seq=B, Ack=A+1]服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK的确认码应为A+1，SYN/ACK包本身又有一个随机序号B。[ACK Seq=A+1, Ack=B+1]最后，客户端再发送一个ACK。当服务端受到这个ACK的时候，就完成了三路握手，并进入了连接创建状态。此时包序号被设定为收到的确认号A+1，而响应则为B+1。 TCP 报文内容WiKI源端口 目的端口序列号确认号头长度 标志位 窗口大小校验和 紧急指针选项字段数据 HTTP 字段含义WIKI200 OK 204 No Content301 资源移动到新位置 302 重定向 304 Not Modified400 Bad Request 请求语法错误 401 Unauthorized 403 Forbidden 404 Not Found 405 Method Not Allowed500 服务器错误 501 Not Implemented服务器无法识别请求的方法 504 Gateway Timeout 数据库 索引的方式唯一索引，主键索引，聚集索引 2017-03-17 腾讯SNG事业部 测试开发方向(1h+)项目： 遇到的困难 收获 网站能支持的访问量 语言： 最熟悉的语言，语言的难点，怎么解决 nodejs promise 原理 数据结构与算法 场景：给出根目录，根目录下有很多日志文件和文件夹，文件夹下有各自的日志文件和子文件夹；日志文件有不同级别的记录如error，info等，如何筛选出所需要的记录？层序遍历 继续上面场景：每个文件都非常大，一个一个文件处理会很慢，怎么进行筛选？？？？ 1234567891011121314151617181920212223242526准备从测试的目的分类功能测试 单元测试 功能测试 集成测试 场景测试 系统测试非功能测试 压力测试 负载测试 性能测试 兼容性测试 配置测试从测试设计分类黑盒测试 等价划分 边界值分析 因果图 错误猜测白盒测试 语句覆盖 分支覆盖 条件覆盖 路径覆盖 2017-03-25 腾讯SNG事业部 测试（1h）二面日常聊天。。 访问网页缓慢，如何定位问题所在 一个抽奖程序，一等奖10%概率，二等奖20%概率，未中奖70%概率。过程：点击按钮，转盘指针转动，一段时间后停下，指向一个区域，对应一种奖项（或者未中奖），然后弹框提示。如何测试这个程序？ C语言中12345678struct st &#123; int a; char b; int c;&#125;;sizeof(struct st) 的值是多少如果要给这个结构体增加一个变量，增加在什么位置（中间或者上面或者下面？） 期望工作地点，职业规划等 对系统测试和测试开发的理解 2017-03-25 华为 C++（20m+）专业，成绩，职业规划，有没有女朋友？？？ 项目中的难点 在俱乐部参加的活动 已经面试了哪些单位，情况怎么样]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[cpp-左值与右值]]></title>
      <url>%2F2017%2F03%2F07%2Fcpp-%E5%B7%A6%E5%80%BC%E4%B8%8E%E5%8F%B3%E5%80%BC%2F</url>
      <content type="text"><![CDATA[C++ 的表达式要不然是右值(rvalue)，要不然是左值(lvalue)。当一个对象被用作右值的时候，用的是对象的值（内容）；当对象被用作左值的时候，用的是对象的身份（在内存中的位置）。一个左值表达式的求值结果是一个对象或者一个函数，然而以常量对象为代表的某些左值实际上不能作为赋值语句的左侧运算对象。此外，虽然某些表达式的求值结果是对象，但它们是右值。 不同的运算符对运算对象的要求不同，有的需要左值运算对象，有的需要右值运算对象；返回值也有差异，有的得到左值结果、有的得到右值结果。一个重要的原则：在需要右值的地方可以用左值代替，但是不能把右值当成左值（也就是位置）来使用。 以下常用的运算符用到左值： 赋值运算符需要一个（非常量）左值作为左侧运算对象，得到的结果仍然是左值。 取地址符作用于一个左值运算符对象，返回一个指向该运算对象的指针，这个指针是右值。 内置解引用运算符、下标运算符、迭代器解引用运算符、string 和vector 的下标运算符的求值结果都是左值。 内置类型的迭代器的递增递减运算符作用于左值运算对象，其前置版本所得的结果也是左值。 摘自 C++ primer 第五版 p121]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[C-解析命令行参数]]></title>
      <url>%2F2017%2F02%2F27%2FC-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%2F</url>
      <content type="text"><![CDATA[1234567891011121314151617#include &lt;unistd.h&gt;int getopt(int argc, char * const argv[], const char *optstring);extern char *optarg;extern int optind, opterr, optopt;#include &lt;getopt.h&gt;int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);int getopt_long_only(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex); ibm - 使用 getopt() 进行命令行处理 getopt每调用一次getopt 返回一次选项，并设置相应全局变量，没有参数时返回-1getopt() 设置的全局变量有： optarg 指向当前选项参数的指针 optind 再次调用getopt() 时的下一个argv 指针的索引 optopt 最后一个已知选项，当命令行选项字符不包括在optstring 中或者选项缺少必要的参数时，该选项存储在optopt中 optstring 可以有下列元素： 单个字符，表示选项 单个字符后接一个冒号：表示该选项后必须跟一个参数。参数紧跟在选项娘后或者以空格隔开。该参数的指针赋给optarg 单个字符后接两个冒号：表示该选项后必须跟一个参数。参数必须紧跟在选项后不能以空格隔开。该参数的指针赋给optarg 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;int main (int argc, char *argv[])&#123; int result = 0; while ((result = getopt(argc, argv, "ab:c::")) != -1) &#123; switch (result) &#123; case 'a': printf("option = a, optopt = %c, optarg = %s, optind = %d\n", optopt, optarg, optind); break; case 'b': printf("option = b, optopt = %c, optarg = %s, optind = %d\n", optopt, optarg, optind); break; case 'c': printf("option = c, optopt = %c, optarg = %s, optind = %d\n", optopt, optarg, optind); break; case '?': printf("option = ?, optopt = %c, optarg = %s, optind = %d\n", optopt, optarg, optind); break; default: printf("default, result = %c\n", result); break; &#125; printf("argv[%d] = %s\n\n", optind, argv[optind]); &#125; printf("result = %d, optind = %d\n", result, optind); for (result = optind; result &lt; argc; result++) &#123; printf("----argv[%d] = %s\n", result, argv[result]); &#125; printf("\n"); for (result = 0; result &lt; argc; result++) &#123; printf("---- argv[%d] = %s\n", result, argv[result]); &#125; return 0;&#125; 12345678910111213141516171819$ ./a.out -a -b barg -ccarg argsoption = a, optopt = , optarg = (null), optind = 2argv[2] = -boption = b, optopt = , optarg = barg, optind = 4argv[4] = -ccargoption = c, optopt = , optarg = carg, optind = 5argv[5] = argsresult = -1, optind = 5----argv[5] = args---- argv[0] = ./a.out---- argv[1] = -a---- argv[2] = -b---- argv[3] = barg---- argv[4] = -ccarg---- argv[5] = args getopt_longgetopt_long 是同时支持长选项和短选项的getopt() 版本。 其中一个参数是指向struct option 对象数组的指针还有一个参数longIndex 所指向的整数将设置为当前找到的长选项的索引 123456struct option &#123; const char *name; // 指向长选项名称（带两个断横线）的指针 int has_arg; // no_argument, optional_argument, required_argument之一 int *flag; int val;&#125;; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;#include &lt;getopt.h&gt;static const struct option longOpts[] = &#123; &#123; "aarg", no_argument, NULL, 'a' &#125;, &#123; "barg", required_argument, NULL, 'b' &#125;, &#123; "carg", required_argument, NULL, 'c' &#125;,&#125;;int longIndex = -1;int main (int argc, char *argv[])&#123; int result = 0; while ((result = getopt_long(argc, argv, "ab:c::", longOpts, &amp;longIndex)) != -1) &#123; switch (result) &#123; case 'a': printf("option = a, optopt = %c, optarg = %s, optind = %d, longIndex = %d\n", optopt, optarg, optind, longIndex); break; case 'b': printf("option = b, optopt = %c, optarg = %s, optind = %d, longIndex = %d\n", optopt, optarg, optind, longIndex); break; case 'c': printf("option = c, optopt = %c, optarg = %s, optind = %d, longIndex = %d\n", optopt, optarg, optind, longIndex); break; case '?': printf("option = ?, optopt = %c, optarg = %s, optind = %d, longIndex = %d\n", optopt, optarg, optind, longIndex); break; default: printf("default, result = %c\n", result); break; &#125; printf("argv[%d] = %s\n\n", optind, argv[optind]); &#125; printf("result = %d, optind = %d\n", result, optind); for (result = optind; result &lt; argc; result++) &#123; printf("----argv[%d] = %s\n", result, argv[result]); &#125; printf("\n"); for (result = 0; result &lt; argc; result++) &#123; printf("---- argv[%d] = %s\n", result, argv[result]); &#125; return 0;&#125; 123456789101112131415161718192021222324$ r -a --aarg -b bbb --barg bbbbb moreoption = a, optopt = , optarg = (null), optind = 2, longIndex = -1argv[2] = --aargoption = a, optopt = , optarg = (null), optind = 3, longIndex = 0argv[3] = -boption = b, optopt = , optarg = bbb, optind = 5, longIndex = 0argv[5] = --bargoption = b, optopt = , optarg = bbbbb, optind = 7, longIndex = 1argv[7] = moreresult = -1, optind = 7----argv[7] = more---- argv[0] = ./a.out---- argv[1] = -a---- argv[2] = --aarg---- argv[3] = -b---- argv[4] = bbb---- argv[5] = --barg---- argv[6] = bbbbb---- argv[7] = more]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[拉普拉斯的魔女-东野圭吾]]></title>
      <url>%2F2017%2F02%2F01%2F%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E7%9A%84%E9%AD%94%E5%A5%B3-%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE%2F</url>
      <content type="text"><![CDATA[人类是原子，即使每一个个体都很平凡，无自觉地活在世上，然而一旦成为集合体，就会戏剧性地实现物理法则。 承载在高县的记忆的书~]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[西川之南]]></title>
      <url>%2F2017%2F01%2F26%2F%E8%A5%BF%E5%B7%9D%E4%B9%8B%E5%8D%97%2F</url>
      <content type="text"><![CDATA[2017年1月23日 飞机上邻座骂骂咧咧的可爱大叔 凌晨两点的我在市中心一脸懵逼 不接电话的鱼 川A车牌 路过了川大，过两天去看hhh 然后我去了一家24小时书店，连司机师傅都不晓得在哪里呢hhh书店里静地我不敢说话，左右顾盼，和看起来像老板的葛优躺男子大眼瞪小眼，然后还是他先开口hhh挑了一本挪威的森林 成都人对于成都话真是有一种不可言说的执念 早6点 在成都街头 天呐撸 8点还没天亮 逛太古里看到宜宾燃面。。好想吃！！可是我要去宜宾吃正宗的燃面哼╭(╯^╰)╮ 这几天都好冷呢 洗个头 好爽2333 小哥炒鸡有耐心的按摩果然很安逸呢 炒鸡幸福的火锅！小龙坎居然要排200桌！ 鱼逼：明天早上的话先去一下杜甫澡堂。。澡。。澡堂？？？？(／。＼) 遍地五分好评的店呀！太幸福！ 宽窄巷子~~ 崇德里~~ 凉糕，叶儿粑，抄手，担担面，钵钵鸡。锦里的小吃真是好吃到发抖！hhhh 出师未捷身先死，长使英雄泪满襟。 能攻心则反侧自消，从古知兵非好战；不审势即宽严皆误，后来治蜀要深思。 兔兔那么可爱，你们怎么能吃兔兔呢！ 安得广厦千万间！ 在成都的每一顿都能吃到幸福(*￣︶￣) 干锅芋儿太完美！ QAQ 吃太饱晚上怎么刷小龙坎副本！！战略性失误！可是太好吃(ﾉﾟ0ﾟ)ﾉ~老板再来一碗！ 袁记串串香还是熟悉的味道~ 今天准备把包裹寄出去QAQ 上车！adventure to 宜宾~从这里开始要一个人了哈哈哈 啊那两个人居然已经吃上燃面了！哼我要去宜宾吃QAQ 天哪春运高速堵车，意料之外 烟雨朦胧 小孩子的眼睛里有星星 车上遇到一个从成都回符江的老爷爷 这里西餐厅环境不错哦 过小年哟 梦幻网吧？诶诶诶我是被网管调戏了吗？？我说开50有什么问题吗？？？？ 梦见天晴了 出太阳就在公园里摆上桌椅，喝茶聊天(〃’▽’〃) 好安逸噢。 清茶还是绿茶？ 年轻人在哪儿呢？ 与火车擦身而过，让我想起了安娜。 三轮小车蛮有意思 河边也能喝茶hhh真是度假的好地方(*￣︶￣) 我见他们准备下班了，就把盘子端过去给服务员，小妹妹一脸懵逼以为薯条有问题我兴师问罪来的呢(〃’▽’〃) 在高县最后一晚（好吧我又续了一天）看一场后会无期。(／。＼) 当一艘船沉入海底，当一个人成了谜。 小年快乐 小三轮车的价钱真是个谜。。。 东野圭吾的拉普拉斯的魔女初到成都时在轩客会看见的书，第二次去却找不着了，没想到在高县的书店里又见到了它。 阴天。河边没有茶座。只能坐在石墩上看书咯。 续住一天，明天还是得走啦 idrink的饮料好喝噢！多点几杯好了，以后喝不到了呢。 idrink的阿姨送我一杯奶茶诶(〃’▽’〃) 兔子兔子 兔子啊好像长大了一点点 兔子送我的青年文摘(／。＼) 曾经心心念念的四川、宜宾、高县，在这之后，逐渐褪去了神秘的纱幕；曾经触不可及的，变得那么近，就像星星靠近月亮，几乎伸出手就能抓到。梦里的情感搭建的道路，用路上每一片漂亮羽毛作装饰，如今和现实重合，有，不知所措，在她出现的那一刻，所有的念头变成空白，她是那么光鲜靓丽，像珠宝发出熠熠光彩。我伸手，神秘的魅力从我指尖流去。继续划动双桨吧，总有一天，能到达身后的梦的起点。 今日的宜宾，相比初到时要明媚许多呢。 万里长江第一城。 地标广场宜宾赋 古城墙 冠英街古民居 千年放生池 东街好热闹哒 这里也有川西坝子和小龙坎哈哈哈 哇塞 东街的台湾无骨鸡柳和六中的味道一样！！！！！！瞬间找回童年！！！！（这个无骨鸡柳我在台湾都没见到过，居然在这里又吃到了哈哈哈） 铁板豆腐带汤汁的嘞厉害了 一百多秒的红灯，行人提前二十秒抱团闯红灯这是惯例吗2333 淡黄色的路灯真好看 刚看完后会无期就给我塞这种卡片啊哈哈哈 为什么天气冷没有白肉了嘞 蜀地处处可寻丞相祠堂呢 非淡泊无以明志，非宁静无以致远。 飞机上可爱的成都大叔，大巴上可爱的符江老爷爷，吾饮良品里可爱的奶茶阿姨。 好看的叫阿姨，不好看的叫娘娘2333 一中可能放假不让进去参观，可惜了 真希望是在这里长大，这样，就可以早点认识你了。 最后来两燃面 萍乡我回来了~ I’ll miss you terribly.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[C-可变参数]]></title>
      <url>%2F2017%2F01%2F11%2FC-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%2F</url>
      <content type="text"><![CDATA[在看C和指针时发现的一个有趣的地方： 12345678910111213141516171819202122232425#include &lt;stdarg.h&gt;void var_args_func(int n_values, ...)&#123; printf("n_values is %d\n", n_values); va_list args; va_start(args, n_values); for (int i = 0; i &lt; n_values; i++) &#123; double arg = va_arg(args, double); printf("arg is %lf\n", arg); int arg1 = va_arg(args, int); printf("arg is %d\n", arg1); &#125; va_end(args);&#125;void test_var_args_func()&#123; float f = 6; var_args_func(3, 1, 2, 3, 4.0, 5.0, f);&#125;void main()&#123; test_var_args_func();&#125; 上面这段代码输出是1234567n_values is 3arg is 4.000000arg is 1arg is 5.000000arg is 2arg is 6.000000arg is 3]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[NSGA-相关]]></title>
      <url>%2F2017%2F01%2F07%2FNSGA-%E7%9B%B8%E5%85%B3%2F</url>
      <content type="text"><![CDATA[一1.1 选题：A Fast and Elitist Multiobjective Genetic Algorithm: NSGA-II1.2 本文解决了什么问题本文提出了一种计算复杂度为O(MN^2) 的快速的基于非支配排序的多目标进化算法（MOEA），该算法可以用来解决多目标优化问题。该算法解决了非支配排序遗传算法（NSGA）所显现的三个问题： 计算支配排序的复杂度高：NSGA 的计算支配排序复杂度为O(MN^3)（其中M 是目标函数的数量，N 是种群的数量）。若种群的数量大，则会使得NSGA 的计算代价非常大。产生这种大复杂度的原因是每一个子代中都有非支配排序的程序。而本文提出的NSGA-II 算法的计算复杂度可以优化到O(MN^2)。 缺少精英机制(elitism)：精英机制可以显著提高遗传算法的性能，同时还能够防止较优解被发现后却丢失的情况。 需要共享参数(sharing parameter)：传统的保存种群多样性的机制为了得到多种多样的等价的解非常依赖共享的概念。而共享主要的问题是它需要制定共享参数。而NSGA-II 使用拥挤比较的方法替换了共享函数方法。 1.3 采用什么思想解决这个问题为了解决上面提到的三种问题，NSGA-II 采用了以下改进： 首先，NSGA-II 采用快速非支配排序方法，将一个种群排序为不同的支配等级，优先选择支配等级低的解，该过程需要O(MN^2) 次比较。 其次，采用精英机制，在每一次产生新的一代时，将当前最优解（即支配等级为1的解）原封不动的复制到新的一代中。这种机制可以防止进化过程中产生的最优解被交叉和变异所破坏，可以大幅提高运算速度，防止丢失找到的最优解。 最后，用拥挤比较的方法替换了共享函数的方法，在相同支配等级的解中优先选择拥挤程度低的解，这个新方法不需要用户定义任何维持种群多样性的参数，同时，这个方法有更好的复杂度。 1.4 基本算法的描述有两个主要的算法和一个主循环，分别是： 快速非支配排序方法，fast-non-dominated-sort(P) 拥挤距离计算，crowding-distance-assignment(I) 主循环 算法主要过程如下图： 快速非支配排序算法为了描述快速非支配排序方法，首先描述一个简单且缓慢的步骤，再描述一个快速的方法。这个简单方法中，为了在大小为N 的种群中找到没有被支配的成员集合(第一支配等级)，将每一个解与种群中其他的解比较，直到找到所有没有被支配的成员，对每个解需要O(MN) 次比较，因此找到第一支配等级复杂度为O(MN^2)；现在找到了第一前沿面的解，将这些解在种群中屏蔽，重复上述程序，找到第二前沿面的解；因此，最坏情况下有N 个前沿面，需要O(MN^3) 此比较。下面介绍一个快速的方法：首先对每一个解计算两个实体：1）支配计数np，即支配这个解的解的数量，2）Sp，解所支配的解的集合。所有第一非支配前沿面解的支配计数np 都为0.现在对每一个解p 都有np = 0，访问每一个成员q 和他的集合Sq（它所支配的解的集合），并且逐一减少支配计数nq。这样，如果任何成员q 的支配计数nq 达到0，我们就把它加入到一个单独集合Q。这些成员属于第二非支配前沿面。重复上述过程直到找到所有前沿面。 伪代码：1234567891011121314151617181920212223fast-non-dominated-sort(P)for each p in P Sp = &#123;&#125; // 初始化为空集合 np = 0 // 成员p 的支配计数为0 for each q in P if p &lt; q then // p 支配q Sp = Sp + &#123;q&#125; // 将成员q 加入Sp else if q &lt; p then // q 支配p np = np + 1 // p 成员被支配的数量加一 if np = 0 then prank = 1 F1 = F1 + &#123;p&#125; // 将没有被支配的成员加入第一非支配前沿面i = 1while Fi != &#123;&#125; // Fi 不为空集合 Q = &#123;&#125; // Q初始化为空集合，用来存储下一个前沿面的成员 for each p in Fi for each q in Sp // 遍历p 所支配的成员集合 nq = nq - 1 // 逐一减少支配计数 if nq == 0 then // 支配计数为0，即属于下一个前沿面 qrank = i + 1 Q = Q + &#123;q&#125; i = i + 1 Fi = Q 拥挤距离计算在两个处于不同前沿面中的解中，NSGA-II 选择排名更前的解；而对于两个相同前沿面的解，NSGA-II 用拥挤距离来选择更好的解（拥挤距离大的解，为了保留多样性）。NSGA-II 中，用拥挤比较的方法替换了共享函数的方法。这个新方法不需要用户定义任何维持种群多样新的参数。为了描述这种方法，定义了密度估计的准则并展示了拥挤比较算子。1）密度估计：为了得到种群中特定解周围的解的密度估计，根据每个目标函数计算这点两侧的两个点的平均距离。这个数值作为拥挤系数。拥挤系数的计算需要根据每个目标函数值的大小的升序顺序对种群进行排序。因此，对每一个目标函数，处于边界的解（最大和最小值的解）被指定为无穷大距离的值。所有其他中间的解被指定为两个相邻解的函数值归一化后的绝对差值。在集合I 中所有种群的成员都被指定了一个拥挤距离，用这个距离来对比两个解与其他解的接近程度，拥挤距离小的解在一定程度上会被其他解挤到。因此为了保留多样性，选择拥挤距离大的解。2）拥挤比较算子(Crowded-Comparison Operator)：拥挤比较算子将选择的过程导向均匀分布的最优前沿面。假设每个个体有两个属性：1）非支配排名(irank)；2）拥挤系数(idistance)；现在定义一个偏序&lt;n: i &lt;n j if (irank &lt; jrank) or ((irank == jrank) and (idistance &gt; jdistance))。也就是说，对于不同前沿面的解，选择非支配排名(irank)更前的解；对于相同前沿面的解，选择拥挤系数(idistance)大的解。 伪代码：12345678910crowding-distance-assignment(I)l = |I| // I 中解的数量for each i in I set I[i].distance = 0 // 初始化拥挤距离for each objective m // 对每个目标函数m I = sort(I, m) // 利用目标函数值对种群I 进行排序 I[1].distance = I[l].distance = 无穷 // 将边界点的拥挤距离设为无穷 for i = 2 to (l - 1) // 遍历非边界点 // I[i].m 代表集合I中第i个个体的第m个目标函数值，fm-max 和fm-min 是第m个目标函数值的最大和最小值。 I[i].distance = I[i].distance + (I[i + 1].m - I[i - 1].m) / (fm-max - fm-min) 主循环最初随机创建父代种群P0。种群根据非支配情况排序(使用fast-non-dominated-sort )，每一个解都被指定一个等于它自身非支配等级的排名（1代表最高等级，2次之，依次类推）。然后通过常用的选择，重组以及变异来生成与父代种群P0大小相同(N)的子代种群Q0。对于第t代，合成种群Rt=Pt + Qt(合并)，种群Rt 大小为2N。然后将Rt 根据非支配度排序，现在属于最优非支配度集合F1 的解是合成种群的最优解。如果F1 大小比N 小，则将F1 中所有成员归入新种群Pt+1 中。种群Pt+1 剩余成员在后来按派闽个排序的非支配前沿面选择，因此接下来选择F2 中的解，然后F3 中的解，直到选择出刚好N 个种群成员。接下来大小为N 的新种群Pt+1 被用来进行选择交叉和变异操作从而产生大小为N 的新种群Qt+1。 伪代码：12345678910Rt = Pt + Qt // 将父代和子代种群合并F = fast-non-dominated-sort(Rt) // F = (F1, F2, ...)，进行快速非支配排序，返回前沿面util |Pt+1| + |Fi| &lt;= N // 直到父代种群被填满 crowding-distance-assignment(Fi) // 计算前沿面i 的拥挤距离 Pt+1 = Pt+1 + Fi // 将第i个前沿面的成员加入下一个父代种群Pt+1 中 i = i + 1sort(Fi, &lt;n) // 将第i 个前沿面的成员根据拥挤比较算子`&lt;n` 进行降序排列Pt+1 = Pt+1 + Fi[1:(N - |Pt+1|)] // 选择第i 个前沿面的前(N - |Pt+1|) 个成员，保证父代种群的数量为NQt+1 = make-new-pop(Pt+1) // 使用选择交叉和变异来产生新的子代种群Qt+1t = t + 1 1.5 算法分析的结论首先分析快速非支配排序算法，对每一个在第二或者更高非支配等级的解p 来说，支配计数np 最多为N-1(成员个数为N)，而一个被制定非支配等级的解不会被再次访问，因此每一个解p 在它的支配计数达到0时最多被访问N-1 次。由于存在这样的解最多有N-1 个，所以全部复杂度为O(N^2)。因此整体排序算法的复杂度为O(MN^2)。 然后分析拥挤距离计算算法，M 为目标函数的个数，由于有M次独立的排序，每次最多有N个解，因此拥挤距离计算的算法复杂度为O(MNlogN)。 对于主循环，考虑算法一次迭代的计算复杂度。主要操作以及最坏情况的复杂度为：1）非支配排序O(M(2N)^2)；2）拥挤距离计算O(M(2N)log(2N))；3）拥挤比较算子&lt;n 上的排序O(2Nlog2N)；因此算法整体的复杂度为O(MN^2)，其中非支配排序占据了主导地位。 1.6 用一个例子说明相关算法。下面以一个简单的栗子说明遗传算法。以目标函数f(x) = x + 10sin(5x) + 7cos(4x), x in [0, 9]为例，使用遗传算法求解它在区间[0,9]的最大值。这个函数大概长这样：假设解的精度为小数点后4 位，可以将x 的解空间划分为(9-0)*(1e+4) = 90000 个等分2^16 &lt; 90000 &lt; 2^17，因此用17位 二进制数来表示这些解。一开始，这些二进制串是随机生成的。一个这样的二进制串代表一条染色体串，这里染色体串的长度为17。对于任何一条这样的染色体chromosome，使用公式x = 0 + decimal(chromosome)*(9-0)/(2^17-1)将它解码到[0,9]这个区间的数值。（decimal()将二进制数转化为十进制数）一个个体就是一条染色体，许多个体组成种群，在这里是一个一维点集(x轴上[0,9]的线段)。个体的适应度函数就是f(x)，在这里函数值越大，解的质量越高。接下来通过上述函数的进化，选择，交叉和变异，多次迭代后平均适应度达到收敛。如下图：迭代次数与平均适应度关系曲线（横轴：迭代次数，纵轴：平均适应度） 二2.1 分类进化计算包括以下几种 遗传算法（Genetic Algorithms） 遗传规划（Genetic Programming） 进化策略（Evolution Strategies） 进化规划（Evolution Programming） 2.2 简介遗传算法: 遗传算法是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。遗传算法是从代表问题可能潜在的解集的一个种群开始的，而一个种群则经过基因编码的一定数目的个体组成。每个个体实际上是染色体带有特征的实体。染色体作为遗传物质的主要载体，即多个基因的集合，其内部表现是某种基因组合，它决定了个体形状的外部表现，如黑头发的特征是由染色体中控制这一特征的某种基因组合决定的。因此在一开始需要实现从表现型到基因型的映射即编码工作。由于仿照基因编码的工作很复杂，我们往往进行简化，如二进制编码，初代种群产生之后，按照适者生存和优胜劣汰的原理，逐代（generation）演化产生出越来越好的近似解，在每一代，根据问题域中个体的适应度（fitness）大小选择（selection）个体，并借助于自然遗传学的遗传算子（genetic operators）进行组合交叉（crossover）和变异（mutation），产生出代表新的解集的种群。这个过程将导致种群像自然进化一样的后生代种群比前代更加适应于环境，末代种群中的最优个体经过解码（decoding），可以作为问题近似最优解。 遗传规划: 遗传规划是一种特殊的利用进化算法的机器学习技术，它开始于一群由随机生成的千百万个计算机程序组成的“人群”，然后根据一个程序完成给定的任务的能力来确定某个程序的适合度，应用达尔文的自然选择（适者生存）确定胜出的程序，计算机程序间也模拟两性组合，变异，基因复制，基因删除等代代进化，直到达到预先确定的某个中止条件为止。 进化策略: 进化策略(Evolutionary Strategies,ES)是由德国的I. Rechenberg和HP. Schwefel于1963年提出的。ES作为一种求解参数优化问题的方法，模仿生物进化原理，假设不论基因发生何种变化，产生的结果（性状）总遵循零均值、某一方差的高斯分布。 进化规划: 进化规划是一种随机优化方法,它的目标是通过进化达到行为智能化。但在最初的发展中,进化规划并未得到足够的重视。直到20世纪90年代,进化规划方法得到改善,并作为进化算法的一个分支开始得到广泛的应用。进化规划算法从一组随机产生的个体开始进行搜索,通过变异、选择等操作使个体向着搜索空间中越来越靠近全局最优值的区域进化。类似于遗传算法,进化规划算法也很容易早熟收敛。因此,避免早熟收敛,均衡算法的探索和执行能力,已成为进化规划研究的主要内容之一。 2.3 比较遗传算法的主要基因操作是选种、交配和突变，而在进化规则、进化策略中，进化机制源于选种和突变。就适应度的角度来说遗传算法用于选择优秀的父代(优秀的父代产生优秀的子代)，而进化规则和进化策略则用于选择子代(优秀的子代才能存在)。遗传算法与遗传规划强调的是父代对子代的遗传链，而进化规则和进化策略则着重于子代本身的行为特性，即行为链。进化规则和进化策略一般都不采用编码，省去了运作过程中的编码—解码手续更适用于连续优化问题，但因此也不能进行非数值优化。进化策略可以确定机制产生出用于繁殖的父代，而遗传算法和进化规则强调对个体适应度和概率的依赖。 三NSGA-II 只能用来处理静态优化问题，而对于现实世界中大多数的优化问题，它们的目标函数，约束，和参数都是随时间不断变化的。处理诸如静态优化问题的问题需要先验地知道变化模式，并且即使那样，该过程也可能在计算上是昂贵的。动态优化问题包括可随时间变化的目标函数，约束函数和问题参数。这些问题通常出现在现实世界的问题中，特别是在最佳控制问题或需要在线优化的问题中。通常有两种计算程序，在一种方法中，通过解决大量真实场景的解决方案，形成离线优化问题，以此来制定最优控制规则，这种方法对于那些使用在线优化算法的计算代价过于昂贵的问题是有效的。另一种方法是在线直接优化程序。在这种情况下，问题在一段时间内被认为是静止的，并且允许优化算法在问题保持静止的时间间隔内找到最优解。然后，基于当前问题场景构件新问题，并且对新时间段执行新的优化，其可以在少量迭代中跟踪最优解，使得所需的固定时间段该问题小并且近似误差减小。 四我们可以对原始的NSGA-II 过程进行一些更改以处理动态优化问题。首先，需要有一个测试来确定问题是否发生变化。为此，我们从父群体中随机选择一些解决方案，并重新评估它们。如果任何目标和约束函数发生变化，则可以确定问题有变化。在发生更改的情况下，所有父解决方案都将重新评估，然后将父和子群体合并到一起。其次，每当出现问题经历目标和约束的大的变化时，我们引入新的随机解。新的群体的x% 被随机解替换。这有助于在问题发生变化时引入新的（随机）解决方案。若问题只是有小的改变，则不引入随机解，而是用现有的解的突变解（随机选择）替换种群的x%。这样，种群中引入的新解决方案与现有种群相关。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[apue-note]]></title>
      <url>%2F2016%2F12%2F23%2Fapue-note%2F</url>
      <content type="text"><![CDATA[反正神也不會管我的事，那就更加如此吧。 名词原子操作 指的是由多步组成的一个操作。如果该操作原子地执行，则要么执行完所有的步骤，要么一步也不执行，不可能只执行所有步骤的一个子集。 STDIN_FILENO int fd stdin FILE *stream 第一章-UNIX基础strerror用于打印出错信息; p12 1234#include &lt;string.h&gt;char *strerror (int errnum);// 返回指向消息字符串的指针 perror用于打印出错信息; p12 123#include &lt;stdio.h&gt;void perror (const char *msg); 第三章-文件I/Oopen, read, write, lseek, close open, openat打开或创建文件; p50 12345#include &lt;fcntl.h&gt;int open(const char *path, int oflag, ... /* mode_t mode */);int openat(int fd, const char *path, int oflag, ... /* mode_t mode */);// 返回新的文件描述符，错误返回-1 create创建新文件; p52 12345678#include &lt;fcntl.h&gt;int create(const char *path, mode_t mode);// 返回为只写的文件描述符， 错误返回-1// 此函数等效于open(path, O_WRONLY | O_CREATE | O_TRUNC, mode);// create 函数是为了弥补早期open 函数第二个参数只能为0，1, 2而无法打开一个尚未存在的文件的缺陷。// 现在open 函数提供了选项O_CREATE 和O_TRUNC，于是也就不再需要单独的create 函数 close关闭一个打开文件; p53 1234#include &lt;unistd.h&gt;int close (int fd);// 成功返回0， 错误返回-1 lseek显式地为一个打开文件设置偏移量; p53 1234#include &lt;unistd.h&gt;off_t lseek (int fd, off_t offset, int whence);// 成功返回新的文件偏移量， 错误返回-1 read, writep57 1234567#include &lt;unistd.h&gt;ssize_t read (int fd, void *buf, size_t nbytes);// read 成功返回读到的字节数，到达文件尾端返回0ssize_t write (int fd, const void *buf, size_t nbytes);// 成功返回已写的字节数，通常与参数nytes 相同，出错返回-1 pread, pwritep63 1234567#include &lt;unistd.h&gt;ssize_t pread (int fd, void *buf, size_t nytes, off_t offset);// 返回读到的字节数，若读到文件尾返回0；出错返回-1ssize_t pwrite (int fd, const void *buf, size_t nbytes, off_t offset);// 返回成功写入的字节数； 出错返回-1 dup 和 dup2下面两个函数都可用来复制一个现有的文件描述符p63 123456#include &lt;unistd.h&gt;int dup (int fd);int dup2 (int fd, int fd2);// 两函数的返回值： 若成功，返回新的文件描述符；若出错，返回-1 sync, fsync 和 fdatasyncp65 123456789101112#include &lt;unistd.h&gt;// 只对fd 指定的一个文件起作用，并等待写磁盘操作结束才返回int fsync (int fd);// 成功返回0，出错返回-1// 类似fsync，但是只影响文件的数据部分。而fsync 还会同步更新文件的属性int fdatasync (int fd);// 成功返回0，出错返回-1// 将所有修改过的块缓冲区排入写队列，然后返回，不等待实际写磁盘操作结束void sync (void); fcntlp65 函数fcntl 可以改变已经打开文件的属性1234#include &lt;fcntl.h&gt;int fcntl (int fd, int cmd, ... /* int arg */);// 成功返回值依赖于cmd，出错返回-1 ioctlp70 ioctl 函数一直是I/O 操作的杂物箱。不能用本章其他函数表示的I/O 操作通常都能用ioctl 表示。1234567#include &lt;unistd.h&gt; /* System V */#include &lt;sys/ioctl.h&gt; /* BSD and Linux */int ioctl (int fd, int request, ...); /* POSIX.1 */// 出错返回-1，成功返回其他值int ioctl (int fd, unsigned long request, ...); /* FreeBSD 8.0, Mac OS X 10.6.8, Linux */ 第四章 文件和目录函数stat, fstat, fstatat, lstat123456789#include &lt;sys/stat.h&gt;int stat (const char *restrict pathname, struct stat *restrict buf);int fstat (int fd, struct stat *buf);int lstat (const char *restrict pathname, struct stat *restrict buf);int fstatat (int fd, const char *restrict pathname, struct stat *restrict buf, int flag); 123456789101112131415161718192021222324252627282930疑问(已解决)：图4-3 的程序用lstat 输出与stat 输出不同lstat：/etc/passwd: regular/etc: directory/dev/log: symbolic link /* 不同 *//dev/tty: character special /dev/sr0: block special/dev/cdrom: symbolic link /* 不同 *//dev/null: character specialstat:/etc/passwd: regular/etc: directory/dev/log: socket /* 不同 *//dev/tty: character special/dev/sr0: block special/dev/cdrom: block special /* 不同 *//dev/null: character special对于/dev/loglrwxrwxrwx 1 root root 28 Dec 19 12:57 /dev/log -&gt; /run/systemd/journal/dev-log=对于/dev/cdromlrwxrwxrwx 1 root root 3 Dec 19 12:57 /dev/cdrom -&gt; sr0lstat 和stat 结果不同的原因：当命名的文件是一个符号链接时，lstat 返回该符号链接的有关信息，而不是由该符号链接引用的文件的信息 函数access，faccessataccess 和faccessat 函数按实际用户ID 和实际组ID 进行访问权限测试。 12345678# include &lt;unistd.h&gt;int access (const char *pathname, int mode);int faccessat (int fd, const char *pathname, int mode, int flag);// 两个函数的返回值： 成功返回0；出错返回-1// 如果测试文件是否已经存在，mode 就为F_OK;// 否则mode 是R_OK, W_OK, X_OK 的按位或 对程序4-8 的实验(r 是./a.out 的别名)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455$ mv a.out b.out$ ll b.out -rwsrwxr-x 1 root beim 13912 Dec 26 14:41 b.out*// mv 保留了rws 和root$ cp b.out a.out$ ll *.out-rwxrwxr-x 1 beim beim 13912 Dec 26 14:45 a.out*-rwsrwxr-x 1 root beim 13912 Dec 26 14:41 b.out*// cp 没有保留rws 和root$ rm b.out $ r /etc/shadowaccess error for /etc/shadow: Permission deniedopen error for /etc/shadow: Permission denied$ sudo chmod u+s a.out// 打开设置用户ID 位$ ll a.out-rwsrwxr-x 1 beim beim 13912 Dec 26 14:45 a.out*// rwx 变成了rws$ r /etc/shadowaccess error for /etc/shadow: Permission deniedopen error for /etc/shadow: Permission denied// 此时用户仍然是beim$ sudo chown root a.out$ ll a.out-rwxrwxr-x 1 root beim 13912 Dec 26 14:45 a.out*$ r /etc/shadowaccess error for /etc/shadow: Permission deniedopen error for /etc/shadow: Permission denied// 先设置rws 再设置用户为root 之后依旧没有权限$ ll a.out -rwxrwxr-x 1 root beim 13912 Dec 26 14:45 a.out*// 因为rws 被还原到rwx 了$ sudo chmod u+s a.out // 再把设置用户ID 位打开$ ll a.out-rwsrwxr-x 1 root beim 13912 Dec 26 14:45 a.out*$ r /etc/shadowaccess error for /etc/shadow: Permission deniedopen for reading OK// 可以open，通过设置用户ID 程序可以确定实际用户不能正常读指定的文件 函数umaskumask 函数为进程设置文件模式创建屏蔽字，并返回之前的值1234#include &lt;sys/stat.h&gt;mode_t umask (mode_t cmask);// 返回值： 之前的文件模式创建屏蔽字 函数chmod，fchmod，fchmodat这三个函数使我们可以更改现有文件的权限12345678#include &lt;sys/stat.h&gt;int chmod (const char *pathname, mode_t mode);int fchmod (int fd, mode_t mode);int fchmodat (int fd, const char *pathname, mode_t mode, int flag);// 三个函数的返回值：成功返回0；出错返回-1 函数chown, fchown, fchownat, lchown下面几个chown 函数可用于更改文件的用户ID 和组ID。如果两个参数owner 或group 中的任意一个是-1，则对应的ID 不变12345678910#include &lt;unistd.h&gt;int chown (const char *pathname, uid_t owner, gid_t group);int fchown (int fd, uid_t owner, gid_t group);int fchownat (int fd, const char *pathname, uid_t owner, gid_t group, int flag);int lchown (const char *pathname, uid_t owner, gid_t group);// 4个函数的返回值：成功返回0，出错返回-1 函数 truncate 和 ftruncate为了截断或扩展文件可以调用truncate 和ftruncate, 打开文件时使用O_TRUNC 标志123456#include &lt;unistd.h&gt;int truncate (const char *pathname, off_t length);int ftruncate (int fd, off_t length);// 两个函数的返回值：成功返回0，出错返回-1 函数link, linkat, unlink, unlinkat, remove使用link 或者linkat 函数创建一个指向现有文件的链接12345#include &lt;unistd.h&gt;int link (const char *existingpath, const char *newpath);int linkat (int efd, const char *existingpath, int nfd, const char *newpath, int flag);// 两个函数的返回值：成功返回0； 出错返回-1 使用unlink 和unlinkat 函数删除一个现有的目录项12345#include &lt;unistd.h&gt;int unlink (const char *pathname);int unlinkat (int fd, const char *pathname, int flag);// 两个函数的返回值： 成功返回0；出错返回-1 用remove 函数解除对一个文件或目录的链接1234#include &lt;stdio.h&gt;int remove (const char *pathname);// 成功返回0；出错返回-1 函数rename 和renameat文件或者目录可以用rename ，renameat 函数进行重命名12345#include &lt;stdio.h&gt;int rename (const char *oldname, constchar *newname);int renameat (int oldfd, const char *oldname, int newfd, const char *newname);// 两个函数的返回值：成功返回0；出错返回-1 函数symlink， symlinkat用于创建一个符号链接12345#include &lt;unistd.h&gt;int symlink (const char *actualpath, const char *sympath);int symlinkat (const char *actualpath, int fd, const char *sympath);// 两个函数的返回值：成功返回0；出错返回-1 函数readlink, readlinkat因为open 函数跟随符号链接，所以需要有一种方法打开链接本身。并读该链接中的名字：12345#include &lt;unistd.h&gt;ssize_t readlink (const char *restrict pathname, char *restrict buf, size_t bufsize);ssize_t readlinkat (int fd, const char* restrict pathname, char *restrict buf, size_t bufsize);两个函数的返回值：成功返回读取的字节数；出错返回-1 函数futimens, utimensat, utimes用以下几个函数修改文件的访问时间和修改时间123456789#include &lt;sys/stat.h&gt;int futimens(int fd, const struct timespec times[2]);int utimensat(int fd, const char *path, const struct timespec times[2], int flag);#include &lt;sys/times.h&gt;int utimes(const char *pathname, const struct timeval times[2]);// 上述函数返回值：成功返回0；出错返回-1 函数mkdir, mkdirat, rmdir用mkdir, mkdirat 函数创建目录，rmdir 删除目录123456789#include &lt;sys/stat.h&gt;int mkdir (const char *pathname, mode_t mode);int mkdir (int fd, const char *pthname, mode_t mode);#include &lt;unistd.h&gt;int rmdir (const char *pathname);// 上述函数返回值：成功返回0；出错返回-1 读目录123456789101112131415161718#include &lt;dirent.h&gt;DIR *opendir(const char *pathname);DIR *fopendir(int fd);// 两个函数返回值：成功返回指针；出错返回NULLstruct dirent *readdir(DIR *dp);// 返回值：成功返回指针；若在目录尾或出错，返回NULLvoid rewinddir (DIR *dp);int closedir (DIR *dp);// 返回值：成功返回0；出错返回-1long telldir (DIR *dp);// 返回值： 与dpguanlian的目录中的单签位置void seekdir(DIR *dp, long loc); 函数chdir,fchdir,getcwd调用chdir 或fchdir 更改当前工作目录12345678910#include &lt;unistd.h&gt;int chdir(const char *pathname);int fchdir(int fd);// 两个函数返回值：成功返回0；出错返回-1#include &lt;unistd.h&gt;char *getcwd(char *buf, size_t size);// 返回值： 成功返回buf，出错返回NULL 第五章-标准I/O库fwide设置流的定向; p115 12345#include &lt;stdio.h&gt;#include &lt;wchar.h&gt;int fwide (FILE *fp, int mode);// 返回值: 若流是宽定向返回正值;若流是字节定向的返回负值;若流是未定向的返回0 setbuf, setvbuf更改缓冲类型; p117 12345#include &lt;stdio.h&gt;void setbuf(FILE *restrict fp, char *restrict buf);int setvbuf(FILE *restrict fp, char *restrict buf, int mode, size_t size);// 返回值:成功返回0; 出错返回非0 fflush冲洗流; p118 1234#include&lt;stdio.h&gt;int fflush(FILE *fp);// 成功返回0; 出错返回EOF fopen, freopen, fdopen打开流; p118 123456#include &lt;stdio.h&gt;FILE *fopen (const char *restrict pathname, const char *restrict type);FILE *freopen (const char *restrict pathname, const char *restrict type, FILE *restrict fp);FILE *fdopen (int fd, const char *type);// 返回值: 成功返回文件指针, 出错返回NULL fclose关闭打开的流; p120 1234#include &lt;stdio.h&gt;int fclose (FILE *fp);// 成功返回0; 出错返回EOF getc, fgetc, getchar输入函数; p120 123456#include &lt;stdio.h&gt;int getc (FILE *fp);int fgetc (FILE *fp);int getchar (void);// 成功返回下一个字符; 到达文件尾端或者出错返回EOF ferror, feof, clearerrp121 1234567#include &lt;stdio.h&gt;int ferror (FILE *fp);int feof (FILE *fp);// 若条件为真返回非0; 否则返回0void clearerr (FILE *fp); ferror 和feof 区分出错标志和文件结束标识clearerr 清除这两个标志 ungetc将字符再压送回流中; p121 1234#include &lt;stdio.h&gt;int ungetc (int c, FILE *fp);// 成功返回c, 出错返回EOF putc, fputc, putcharp122 123456#include &lt;stdio.h&gt;int putc (int c, FILE *fp);int fputc (int c, FILE *fp);int putchar (int c);// 成功返回c, 出错返回EOF fgets, getsp122 12345#include &lt;stdio.h&gt;char *fgets (char *restrict buf, int n, FILE *restrict fp);char *gets (char *buf);// 成功返回buf, 到达文件尾端或者出错返回EOF fputs, putsp122 12345#include &lt;stdio.h&gt;int fputs (const char *restrict str, FILE *restrict fp);int puts (const char *str);// 成功返回非负值; 出错返回EOF fread, fwrite二进制I/O; p125 12345#include &lt;stdio.h&gt;size_t fread (void *restrict ptr, size_t size, size_t nobj, FILE *restrict fp);size_t fwrite (const void *restrict ptr, size_t size, size_t nobj, FILE *restrict fp);// 返回值: 读或写的对象数 ftell, fseek, rewind定位流; p126 1234567#include &lt;stdio.h&gt;long ftell (FILE *fp);// 成功返回当前文件位置指示, 出错返回-1Lint fseek (FILE *fp, long offset, int whence);// 成功返回0; 出错返回-1void rewind (FILE *fp); ftello fseekop127 123456#include &lt;stdio.h&gt;off_t ftello (FILE *fp);// 成功返回当前文件位置; 出错返回(off_t)-1int fseeko (FILE *fp, off_t offset, int whence);// 成功返回0; 出错返回-1 fgetpos, fsetposp127 12345#include &lt;stdio.h&gt;int fgetpos (FILE *restrict fp, fpos_t *restrict pos);int fsetpos (FILE *fp, const fpos_t *pos);// 成功返回0; 出错返回非0 printf, fprintf, dprintf, sprintf, snprintf格式化输出; p127 1234567891011#include &lt;stdio.h&gt;int printf (const char *restrict format, ...);int fprintf (FILE *restrict fp, const char *restrict format, ...);int dprintf (int fd, const char *restrict format, ...);// 成功返回输出字符数; 出错返回负值int sprintf (char *restrict buf, const char *restrict format, ...);// 成功返回存入数组的字符数; 编码出错返回负值int snprintf (char *restrict buf, size_t n, const char *restrict format, ...);// 若缓冲区足够大, 返回将要存入数组的字符数; 若编码出错, 返回负值 vprintf, vfprintf, vdprintf, vsprintf, vsnprintf与上面5 种类似, 但是可变参数表(…) 替换成了arg; p129 123456789101112#include &lt;stdarg.h&gt;#include &lt;stdio.h&gt;int vprintf (const char *restrict format, va_list arg);int vfprintf (FILE *restrict fp, const char *restrict format, va_list arg);int vdprintf (int fd, const char *restrict format, va_list arg);// 成功返回输出字符数; 出错返回负值int vsprintf (char *restrict buf, const char *restrict format, va_list arg);// 成功返回存入数组的字符数; 编码出错返回负值int vsnprintf (char 8restrict buf, size_t n, const char *restrict format, va_list arg);// 若缓冲区足够大, 返回将要存入数组的字符数; 若编码出错, 返回负值 scanf, fscanf, sscanf格式化输入; p129 123456#include &lt;stdio.h&gt;int scanf (const char *restrict format, ...);int fscanf (FILE *restrict fp, const char *restrict format, ...);int sscanf (const char *restrict buf, const char *restrict format, ...);// 返回值:赋值的输入项数; 若输入出错或在任一转换前已到达文件尾端, 返回EOF vscanf, vfscanf, vsscanfp131 fileno获取I/O 流相关联的文件描述符; p131 1234#include &lt;stdio.h&gt;int fileno (FILE *fp);// 返回与该流相关联的文件描述符 tmpnam, tmpfile创建临时文件; p134 123456#include &lt;stdio.h&gt;char *tmpnam (char *ptr);// 返回指向唯一路径名的指针FILE *tmpfile (void);// 成功返回文件指针; 出错返回NULL mkdtemp, mkstempp135 123456#include &lt;stdlib.h&gt;char *mkdtemp (char *template);// 成功返回指向目录名的指针; 出错返回NULLint mkstemp (char *template);// 成功返回文件描述符; 出错返回-1 fmemopen创建内存流; p137 1234#include &lt;stdio.h&gt;FILE *fmemopen (void *restrict buf, size_t size, const char *restrict type);// 成功返回流指针; 错误返回NULL open_memstream, open_wmemstream创建内存流(面向字节和面向宽字节); p139 12345678#include &lt;stdio.h&gt;FILE *open_memstream (char **bufp, size_t *sizep);#include &lt;wchar.h&gt;FILE *open_wmemstream (wchar_t **bufp, size_t *sizep);// 两个函数返回值: 成功返回流指针; 出错返回NULL 第六章 - 系统数据文件和信息getpwuid, getpwnam使用用户id 或者用户登录名 获取口令文件项 12345#include &lt;pwd.h&gt;struct passwd *getpwuid (uid_t uid);struct passwd *getpwnam (const char *name);// 成功返回指针; 出错返回NULL getpwent, setpwent, endpwent12345struct passwd *getpwent (void);// 成功返回指针; 出错或到达文件尾端则返回NULLvoid setpwent (void);void endpwent (void); getspnam, getspent, setspent, endspent访问阴影口令文件 12345678#include &lt;shadow.h&gt;struct spwd *getspnam (const char *name);struct spwd *getspent (void);// 成功返回指针; 出错返回NULLvoid setspent (void);void endspent (void); getgrgid, getgrnam通过组名或者组id 查看组信息 12345#include &lt;grp.h&gt;struct group *getgrgid (gid_t gid);struct group *getgrnam (const char *name);// 成功返回指针; 出错返回NULL getgrent, setgrent, endgrent1234567#include &lt;grp.h&gt;struct group *getgrent (void);// 成功返回指针; 出错或到达文件尾端返回NULLvoid setgrent (void);void endgrent (void); getgroups, setgroups, initgroups获取和设置附属组ID 12345678910111213#include &lt;unistd.h&gt;int getgroups (int gidsetsize, gid_t grouplist[]);// 成功返回附属组ID 数量; 出错返回-1#include &lt;grp.h&gt; /* on Linux */#include &lt;unistd.h&gt; /* on FreeBSD, Mac OS X, and Solaris */int setgroups (int ngroups, const gid_t grouplist[]);#include &lt;grp.h&gt; /* on Linux and Solaris */#include &lt;unistd.h&gt; /* on FreeBSD and Mac OS X */int initgroups (const char *username, gid_t basegid);// 两个函数返回值: 成功返回0; 出错返回-1 uname获取与主机和操作系统有关的信息 1234#include &lt;sys/utsname.h&gt;int uname (struct utsname *name);// 成功返回非负值; 出错返回-1 gethostname获取主机名 1234#include &lt;unistd.h&gt;int gethostname (char *name, int namelen);// 成功返回0; 出错返回-1 time返回当前时间和日期 1234#include &lt;time.h&gt;time_t time (time_t *calptr);// 成功返回时间值; 出错返回-1 clock_gettime获取指定时钟的时间 1234#include &lt;sys/time.h&gt;int clock_gettime (clockid_t clock_id, struct timespec *tsp);// 成功返回0; 出错返回-1 clock_getres把timespec 结构初始化为与clock_id 对应的时钟精度 1234#include &lt;sys/time.h&gt;int clock_getres (clockid_t clock_id, struct timespec *tsp);// 成功返回0; 出错返回-1 clock_settime对特定时钟设置时间 1234#include &lt;sys/time.h&gt;int clock_settime (clockid_t clock_id, const struct timespec *tsp);// 成功返回0; 出错返回-1 gettimeofday1234#include &lt;sys/time.h&gt;int gettimeofday (struct timeval *restrict tp, void *restrict tzp);// 总是返回0 gmtime, localtime12345#include &lt;time.h&gt;struct tm *gmtime (const time_t *calptr);struct tm *localtime (const time_t *calptr);// 返回值: 指向分解的tm 结构的指针; 若出错, 返回NULL mktime1234#include &lt;time.h&gt;time_t mktime (struct tm *tmptr);// 成功返回日历时间; 出错返回-1 strftime, strftime_1将分解时间转换为字符串时间 123456789#include &lt;time.h&gt;size_t strftime (char *restrict buf, size_t maxsize, const char *restrict format, const struct tm *restrict tmptr);size_t strftime_1 (char *restrict buf, size_t maxsize, const char *restrict format, const struct tm *restrict tmptr, locale_t locale);// 返回值: 若有空间, 返回存入数组的字符数; 否则, 返回0; strptime将字符串时间转换为分解时间 12345#include &lt;time.h&gt;char *strptime (const *restrict buf, const char *restrict format, struct tm *restrict tmptr);// 返回指向上次解析的字符的下一个字符的指针; 否则返回NULL 第七章 - 进程环境exit, _Exit, _exit12345678#include &lt;stdlib.h&gt;void exit (int status);void _Exit (int status);#include &lt;unistd.h&gt;void _exit (int status); atexit1234#include &lt;stdlib.h&gt;int atexit (void (*func)(void));// 成功返回0; 出错返回非0 malloc, calloc, realloc, free12345678#include &lt;stdlib.h&gt;void *malloc (size_t size);void *calloc (size_t nobj, size_t size);void *realloc (void *ptr, size_t newsize);// 成功返回非空指针; 出错返回NULLvoid free (void *ptr); getenv1234#include &lt;stdlib.h&gt;char *getenv (const char *name);// 成功返回指向与name 关联的value 的指针; 未找到返回NULL putenv, setenv, unsetenv12345678#include &lt;stdlib.h&gt;int putenv (char *str);// 成功返回0; 出错返回非0int setenv (const char *name, const char *value, int rewrite);int unsetenv (const char *name);// 成功返回0; 出错返回-1 setjmp, longjmp非局部goto 123456#include &lt;setjmp.h&gt;int setjmp (jmp_buf env);// 若直接调用, 返回0; 若从longjmp 返回, 则为非0void longjmp (jmp_buf env, int val); getrlimit, setrlimit查询和更改资源限制 12345#include &lt;sys/resource.h&gt;int getrlimit (int resource, struct rlimit *rlptr);int setrlimit (int resource, const struct rlimit *rlptr);// 成功返回0; 出错返回非0 第八章 - 进程控制getpid, getppid, getuid, geteuid, getgid, getegid12345678910111213141516171819#include &lt;unistd.h&gt;pid_t getpid (void);// 返回调用进程的进程IDpid_t getppid (void);// 返回调用进程的父进程IDuid_t getuid (void);// 返回调用进程的实际用户IDuid_t geteuid (void);// 返回调用进程的有效用户IDgid_t getgid (void);// 返回调用进程的实际组IDgid_t getegid (void);// 返回调用进程的有效组ID fork, vfork12345#include &lt;unistd.h&gt;pid_t fork (void);pid_t vfork (void);// 子进程返回0; 父进程返回子进程ID; 出错返回-1 wait, waitpid123456#include &lt;sys/wait.h&gt;pid_t wait (int *statloc);pid_t waitpid (pid_t pid, int *statloc, int options);// 成功返回进程ID; 出错返回0 或-1 waitid1234#include &lt;sys/wait.h&gt;int waitid (idtype_t idtype, id_t id, siginfo_t *infop, int options);// 成功返回0; 出错返回-1 wait3, wait4123456789#include &lt;sys/types.h&gt;#include &lt;sys/time.h&gt;#include &lt;sys/resource.h&gt;#include &lt;sys/wait.h&gt;pid_t wait3(int *status, int options, struct rusage *rusage);pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage); execl, execv, execle, execve, execlp, execvp, fexecve7个函数之间的关系 p202 12345678910111213141516#include &lt;unistd.h&gt;extern char **environ;int execl(const char *path, const char *arg, ... /* (char *) NULL */);int execlp(const char *file, const char *arg, ... /* (char *) NULL */);int execle(const char *path, const char *arg, ... /*, (char *) NULL, char * const envp[] */);int execv(const char *path, char *const argv[]);int execvp(const char *file, char *const argv[]);int execvpe(const char *file, char *const argv[], char *const envp[]);int fexecve(int fd, char *const argv[], char *const envp[]);// 出错返回-1; 成功不返回 setuid, setgid12345#include &lt;unistd.h&gt;int setuid (uid_t uid);int setgid (gid_t gid);// 成功返回0; 出错返回-1 setreuid, setregid交换实际用户ID 和有效用户ID 的值 12345#include &lt;unistd.h&gt;int setreuid (uid_t ruid, uid_t euid);int setregid (gid_t rgid, gid_t egid);// 成功返回0; 出错返回-1 seteuid, setegid只更改有效用户ID 和有效组ID 12345#include &lt;unistd.h&gt;int seteuid (uid_t uid);int setegid (gid_t gid);// 成功返回0; 出错返回-1 system1234#include &lt;stdlib.h&gt;int system (const char *cmdstring);// 返回值见p211 getlogin1234#include &lt;unistd.h&gt;char *getlogin (void);// 成功返回指向登陆名字符串的指针; 出错返回NULL nice1234#include &lt;unistd.h&gt;int nice (int incr);// 成功返回新的nice 值 NZERO; 出错返回-1 getpriority1234#include &lt;sys/resource.h&gt;int getpriority (int which, id_t who);// 成功返回-NZERO ~ NZERO - 1 之间的nice 值; 出错返回-1 times1234#include &lt;sys/times.h&gt;clock_t times (struct tms *buf);// 成功返回流逝的墙上时钟时间(以时钟滴答数为单位); 出错返回-1 第九章-进程关系 getpgrp获取调用进程的进程组ID 1234#include &lt;unistd.h&gt;pid_t getpgrp (void);// 返回调用进程的进程组ID getpgid返回指定进程的进程组ID 1234#include &lt;unistd.h&gt;pid_t getpgid (pid_t pid);// 成功返回进程组ID; 出错返回-1 setpgid加入一个现有的进程组或者创建一个新进程组 1234#include &lt;unistd.h&gt;int setpgid (pid_t pid, pid_t pgid);// 成功返回0; 出错返回-1 setsid建立一个新会话 1234#include &lt;unistd.h&gt;pid_t setsid (void);// 成功返回进程组ID; 出错返回-1 getsid获取会话首进程的进程组ID 1234#include &lt;unistd.h&gt;pid_t getsid (pid_t pid);// 成功返回会话的首进程的进程组ID; 出错返回-1 tcgetpgrp, tcsetpgrp获取和设置前台进程组ID 1234567#include &lt;unistd.h&gt;pid_t tcgetpgrp (int fd);// 成功返回前台进程组ID; 出错返回-1int tcsetpgrp (int fd, pid_t pgrpid);// 成功返回0; 出错返回-1 tcgetsid通过控制TTY 的文件描述符, 获取会话首进程的进程组ID 1234#include &lt;termios.h&gt;pid_t tcgetsid (int fd);// 成功返回会话的首进程的进程组ID; 出错返回-1 第十章-信号 signal1234#include &lt;signal.h&gt;void (*signal (int signo, void (*func)(int))) (int);// 成功返回以前的信号处理配置; 出错返回SIG_ERR kill, raisekill 将信号发送给进程或进程组; raise 允许进程向自身发送信号 12345#include &lt;signal.h&gt;int kill (pid_t pid, int signo);int raise (int signo);// 成功返回0; 出错返回-1 alarm设置定时器, 在n秒后产生SIGALRM 信号 1234#include &lt;unistd.h&gt;unsigned int alarm (unsigned int seconds);// 返回0 或以前设置的闹钟时间的余留秒数 pause使调用进程挂起, 直到捕捉到一个信号 1234#include &lt;unistd.h&gt;int pause (void);// 返回-1, errno 设置为EINTR; sigemptyset, sigfillset, sigaddset, sigdelset, sigismember处理信号集函数p273 12345678910#include &lt;signal.h&gt;int sigemptyset (sigset_t *set);int sigfillset (sigset_t *set);int sigaddset (sigset_t *set, int signo);int sigdelset (sigset_t *set, int signo);// 成功返回0; 出错返回-1int sigismember (const sigset_t *set, int signo);// 若真返回1; 若假返回0 sigprocmask检测或更改, 或同时进行检测和更改进程的信号屏蔽字; 仅为单线程进程定义p275 1234#include &lt;signal.h&gt;int sigprocmask (int how, const sigset_t *restrict set, sigset_t *restrict oset);// 成功返回0; 出错返回-1 sigpending返回处于pending 状态的信号集p276 1234#include &lt;signal.h&gt;int sigpending (sigset_t *set);// 成功返回0; 出错返回-1 sigaction检查或修改(或检查并修改)与指定信号相关联的处理动作. 取代了UNIX 早期版本的signal 函数.p278 12345#include &lt;signal.h&gt;int sigaction (int signo, const struct sigaction *restrict act, struct sigaction *restrict oact);// 成功返回0; 出错返回-1 sigsetjmp, siglongjmp在信号处理程序中进行非局部转移时使用这两个函数p283 123456#include &lt;setjmp.h&gt;int sigsetjmp (sigjmp_buf env, int savemask);// 若直接调用返回0; 若从siglongjmp 调用返回, 返回非0void siglongjmp (sigjmp_buf env, int val); sigsuspend在一个原子操作中先恢复信号屏蔽字, 然后使进程休眠.p286 1234#include &lt;signal.h&gt;int sigsuspend (const sigset_t *sigmask);// 返回-1, 并将errno 设置为EINTR; 没有成功返回值 abort使程序异常终止p291 123#include &lt;stdlib.h&gt;void abort (void); sleepp298 1234#include &lt;unistd.h&gt;unsigned int sleep (unsigned int seconds);// 0或未休眠完的秒数 nanosleep提供纳秒级精度的sleep; p299 1234#include &lt;time.h&gt;int nanosleep (const struct timespec *reqtp, struct timespec *remtp);// 返回值: 若休眠到要求的时间, 返回0; 若出错, 返回-1 clock_nanosleep支持使用特定时钟的nanosleep; p300 12345#include &lt;time.h&gt;int clock_nanosleep (clockid_t clock_id, int flags, const struct timespec *reqtp, struct timespec *remtp);// 返回值: 若休眠到要求的时间, 返回0; 若出错, 返回出错码 sigqueue发送排队信号; p301 1234#include &lt;signal.h&gt;int sigqueue (pid_t pid, int signo, const union sigval value);// 成功返回0; 出错返回-1 psignal打印与信号编号对应的字符串, 类似perror; p304 123#include &lt;signal.h&gt;void psignal (int signo, const char *msg); strsignal获取信号的字符描述部分, 类似strerror; p304 1234#include &lt;string.h&gt;char *strsignal (int signo);// 返回指向描述该信号的字符串的指针 sig2str, str2sig将信号编号映射为信号名; 另一个反之; p304 12345#include &lt;signal.h&gt;int sig2str (int signo, char *str);int str2sig (const char *str, int *signop);// 成功返回0; 出错返回-1 第十一章-线程pthread_equal比较两个线程ID 是否相等; p308 1234#include &lt;pthread.h&gt;int pthread_equal (pthread_t tid1, pthread_t tid2);// 若相等返回非0数值; 否则返回0 pthread_self获得自身的ID; p308 1234#include &lt;pthread.h&gt;pthread_t pthread_self (void);// 返回调用线程的线程ID pthread_create创建新线程; p309 123456#include &lt;pthread.h&gt;int pthread_create (pthread_t *restrict tidp, const pthread_attr_t *restrict attr, void *(*start_rtn) (void *), void *restrict arg);// 成功返回0; 否则返回错误编号 疑问p310123411-2.c 程序中注释掉sleep(1);子线程可能不运行, 可能运行一次, 可能运行两次??? pthread_exit终止调用线程; p312 123#include &lt;pthread.h&gt;void pthread_exit (void *rval_ptr); pthread_join阻塞调用线程, 等待制定线程调用pthread_exit, 或从启动例程中返回, 或被取消p312 1234#include &lt;pthread.h&gt;int pthread_join (pthread_t thread, void **rval_ptr);// 若成功返回0; 否则返回错误编号 pthread_cancel线程通过此函数来请求取消同一进程中的其他线程p316 1234#include &lt;pthread.h&gt;int pthread_cancel (pthread_t tid);// 成功返回0; 否则返回错误编号 pthread_cleanup_push, pthread_cleanup_pop线程安排它退出时需要调用的函数, 与进程的atexit 类似;p316 1234#include &lt;pthread.h&gt;void pthread_cleanup_push (void (*rtn) (void *), void *arg);void pthread_cleanup_pop (int execute); pthread_detach默认情况下, 线程的终止状态会保存知道对该线程调用pthread_join但是如果线程被分离, 线程的资源可以在线程终止时及时回收p316 1234#include &lt;pthread.h&gt;int pthread_detach (pthread_t tid);// 成功返回0; 否则返回错误编号 pthread_mutex_init, pthread_mutex_destroy初始化和销毁互斥变量; p321 123456#include &lt;pthread.h&gt;int pthread_mutex_init (pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);int pthread_mutex_destroy (pthread_mutex_t *mutex);// 成功返回0; 否则返回错误编号 pthread_mutex_lock, pthread_mutex_trylock, pthread_mutex_unlock对互斥量进行加锁; 尝试加锁; 解锁; p321 123456#include &lt;pthread.h&gt;int pthread_mutex_lock (pthread_mutex_t *mutex);int pthread_mutex_trylock (pthread_mutex_t *mutex);int pthread_mutex_unlock (pthread_mutex_t *mutex);// 成功返回0; 否则返回错误编号 pthread_mutex_timelock绑定线程阻塞时间; p327 123456#include &lt;pthread.h&gt;#include &lt;time.h&gt;int pthread_mutex_timelock (pthread_mutex_t *restrict mutex, const struct timespec *restrict tsptr);// 成功返回0; 否则返回错误编号 pthread_rwlock_init, pthread_rwlock_destroy初始化和销毁读写锁; p329 123456#include &lt;pthread.h&gt;int pthread_rwlock_init (pthread_rwlock_t *restrict rwlock, const pthread_rwlockattr_t *restrict attr);int pthread_rwlock_destroy (pthread_rwlock_t *rwlock);// 成功返回0; 否则返回错误编号 pthread_rwlock_rdlock, pthread_rwlock_wrlock, pthread_rwlock_unlock锁定读写锁和解锁; p329 123456#include &lt;pthread.h&gt;int pthread_rwlock_rdlock (pthread_rwlock_t *rwlock);int pthread_rwlock_wrlock (pthread_rwlock_t *rwlock);int pthread_rwlock_unlock (pthread_rwlock_t *rwlock);// 成功返回0; 否则返回错误编号 pthread_rwlock_tryrdlock, pthread_rwlock_trywrlock读写锁原语的条件版本; p330 12345#include &lt;pthread.h&gt;int pthread_rwlock_tryrdlock (pthread_rwlock_t *rwlock);int pthread_rwlock_trywrlock (pthread_rwlock_t *rwlock);// 成功返回0; 否则返回错误编号 pthread_rwlock_timedrdlock, pthread_rwlock_timedwrlock带有超时的读写锁; p332 12345678#include &lt;pthread.h&gt;#include &lt;time.h&gt;int pthread_rwlock_timedrdlock (pthread_rwlock_t *restrict, rwlock, const struct timespec *restrict tsptr);int pthread_rwlock_timedwrlock (pthread_rwlock_t *restrict rwlock, const struct timespec *restrict tsptr);// 成功返回0; 否则返回错误编号 pthread_cond_init, pthread_cond_destroy条件变量的初始化和反初始化(deinitialize); p333 123456#include &lt;pthread.h&gt;int pthread_cond_init (pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);int pthread_cond_destroy (pthread_cond_t *cond);// 成功返回0; 否则返回错误编号 phtread_cond_wait, pthread_cond_timedwait等待条件变量变为真; p333 12345678#include &lt;pthread.h&gt;int pthread_cond_wait (pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);int pthread_cond_timewait (pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict tsptr);// 成功返回0; 否则返回错误编号 pthread_cond_signal, pthread_cond_broadcast通知线程条件已经满足; p334 12345#include &lt;pthread.h&gt;int pthread_cond_siganl (pthread_cond_t *cond);int pthread_cond_broadcast (pthread_cond_t *cond);// 成功返回0; 否则返回错误编号 pthread_spin_init, pthread_spin_destroy自旋锁的初始化和反初始化; p336 12345#include &lt;pthread.h&gt;int pthread_spin_init (pthread_spinlock_t *lock, int pshared);int pthread_spin_destroy (pthread_spinlock_t *lock);// 成功返回0; 否则返回错误编号 pthread_spin_lock, pthread_spin_trylock, pthread_spin_unlock加锁, 尝试加锁, 解锁; p336 123456#include &lt;pthread.h&gt;int pthread_spin_lock (pthread_spinlock_t *lock);int pthread_spin_trylock (pthread_spinlock_t *lock);int pthread_spin_unlock (pthread_spinlock_t *lock);// 成功返回0; 否则返回错误编号 pthread_barrier_init, pthread_barrier_destroy屏障的初始化和反初始化; p336 1234567#include &lt;phtread.h&gt;int pthread_barrier_init (phtread_barrier_t *restrict barrier, const pthread_barrierattr_t *restrict attr, unsigned int count);int pthread_barrier_destroy (pthread_barrier_t *barrier);// 成功返回0; 否则返回错误编号 pthread_barrier_wait表明线程已完成工作, 准备等所有其他线程赶上来; p337 1234#include &lt;pthread.h&gt;int pthread_wait (pthread_barrier_t *barrier);// 成功返回0 或者PTHREAD_BARRIER_SERIAL_THREAD; 否则返回错误编号 第十四章-高级I/O (未完成)fcntl3.14节有介绍; 这里用作记录锁; p392 1234#include &lt;fcntl.h&gt;int fcntl (int fd, int cmd, .../* struct flock *flockptr */);// 返回值: 成功, 依赖于cmd, 否则返回-1 第十五章-进程间通信（未完成）pipe创建管道；p430 1234#include &lt;unistd.h&gt;int pipe (int fd[2]);// 成功返回0； 出错返回-1 popen, pclose创建一个连接到另一个进程的管道，然后读其输出或向其输入端发送数据p436 123456#include &lt;stdio.h&gt;FILE *popen (const char *cmdstring, const char *type);// 成功返回文件指针；出错返回NULLint pclose (FILE *fp);// 成功返回cmdstring 的终止状态；出错返回-1 第十六章-网络IPC:套接字socket创建套接字;p474 1234#include &lt;sys/socket.h&gt;int socket (int domain, int type, int protocol);// 成功返回文件(套接字)描述符; 出错返回-1 shutdown禁止一个套接字的I/O; p476 1234#include &lt;sys/socket.h&gt;int shutdown (int sockfd, int how);// 成功返回0; 出错返回-1 htonl, htons, ntohl, ntohs处理器字节序和网络字节序之间转换;p478 12345678910#include &lt;arpa/inet.h&gt;uint32_t htonl (uint32_t hostint32);// 返回以网络字节序表示的32 位整数uint16_t htons (uint16_t hostint16);// 返回以网络字节序表示的16 位整数uint32_t ntohl (uint32_t netint32);// 返回以主机字节序表示的32 位整数uint16_t ntohs (uint16_t netint16);// 返回以主机字节序表示的16 位整数 inet_ntop, inet_pton网络地址和打印出能被人理解的地址之间的转换; p479 12345678#include &lt;arpa/inet.h&gt;const char *inet_ntop (int domain, const void *restrict addr, char *restrict str, socklen_t size);// 成功返回地址字符串指针; 出错返回NULLint inet_pton (int domain, const char *restrict str, void *restrict addr);// 成功返回1; 若格式无效返回0; 若出错返回-1 gethostent, sethostent, endhostent找到给定计算机系统的主机信息; p480 123456#include &lt;netdb.h&gt;struct hostent *gethostent (void);// 成功返回指针; 出错返回NULLvoid sethostent (int stayopen);void endhostent (void); getnetbyaddr, getnetbyname, getnetent, setnetent, endnetentgethostbyname, gethostbyaddr 被认为过时, 用下面一套接口来获得网络名字和网络编号p480 12345678#include &lt;netdb.h&gt;struct netent *getnetbyaddr (uint32_t net, int type);struct netent *getnetbyname (const char *name);struct netent *getnetent (void);// 三个函数的返回值: 成功返回指针; 出错返回NULLvoid setnetent (int stayopen);void endnetent (void); getprotobyname, getprotobynumber, getprotoent, setprotoent, endprotoent用以下函数在协议名字和协议编号之间进行映射; p481 12345678#include &lt;netdb.h&gt;struct protoent *getprotobyname (const char *name);struct protoent *getprotobynumber (int proto);struct protoent *getprotoent (void);// 三个函数的返回值: 成功返回指针; 出错返回NULLvoid setprotoent (int stayopen);void endprotoent (void); getservbyname, getservbyport, getservent, setservent, endservent服务名和服务端口号的映射; p481 12345678#include &lt;netdb.h&gt;struct servent *getservbyname (const char *name, const char *proto);struct servent *getservbyport (int port, const char *proto);struct servent *getservent (void);// 三个函数的返回值: 成功返回指针; 出错返回NULLvoid setservent (int stayopen);void endservent (void); getaddrinfo, freeaddrinfo将一个主机名和一个服务名映射到一个地址; p482 123456789#include &lt;sys/socket.h&gt;#include &lt;netdb.h&gt;int getaddrinfo (const char *restrict host, // e.g. "www.example.com" or IP const char *restrict service, // e.g. "http" or port number const struct addrinfo *restrict hint, struct addrinfo **restrict res);// 成功返回0; 出错返回非0错误码void freeaddrinfo (struct addrinfo *ai); gai_strerror将getaddrinfo 的错误码转换成错误消息; p483 1234#include &lt;netdb.h&gt;const char *gai_strerror (int error);// 返回指向描述错误的字符串的指针 getnameinfo将一个地址转换成一个主机名和一个服务名; p483 1234567#include &lt;sys/socket.h&gt;#include &lt;netdb.h&gt;int getnameinfo (const struct sockaddr *restrict addr, socklen_t alen, char *restrict host, socklen_t hostlen, char *restrict service, socklen_t servlen, int flags);// 成功返回0; 出错返回非0值 bind关联地址和套接字; p486 1234#include &lt;sys/socket.h&gt;int bind (int sockfd, const struct sockaddr *addr, socklen_t len);// 成功返回0; 出错返回-1 getsockname用此函数来发现绑定到套接字上的地址; p487 12345#include &lt;sys/socket.h&gt;int getsockname (int sockfd, struct sockaddr *restrict addr, socklen_t *restrict alenp);// 成功返回0; 出错返回-1 getpeername如果套接字已经和对等方连接, 可以调用getpeername 函数来找到对方的地址p487 12345#include &lt;sys/socket.h&gt;int getpeername (int sockfd, struct sockaddr *restrict addr, socklen_t *restrict alenp);// 成功返回0; 出错返回-1 connect建立连接; p487 1234#include &lt;sys/socket.h&gt;int connect (int sockfd, const struct sockaddr *addr, socklen_t len);// 成功返回0; 出错返回-1 listen服务器调用listen 来宣告它愿意接受连接请求; p489 1234#include &lt;sys/socket.h&gt;int listen (int sockfd, int backlog);// 成功返回0; 出错返回-1 accept调用listen 之后可以使用accept 获得连接请求并建立连接; p489 12345#include &lt;sys/socket.h&gt;int accept (int sockfd, struct sockaddr *restrict addr, socklen_t *restrict len);// 成功返回文件(套接字) send和write 类似, 但是可以制定标志来改变处理数据的方式; p491 1234#include &lt;sys/socket.h&gt;ssize_t send (int sockfd, const void *buf, size_t nbytes, int flags);// 成功返回发送的字节数; 出错返回-1 sendto与send 类似; 但是可以在无连接的套接字上指定一个目标地址; p492 12345#include &lt;sys/socket.h&gt;ssize_t sendto (int sockfd, const void *buf, size_t nbytes, int flags, const struct sockaddr *destadr, socklen_t destlen);// 成功返回发送的字节数; 出错返回-1 sendmsg可以调用带有msghdr 结构的sendmsg 函数来制定多重缓冲区传输数据; 与writev 函数类似;p492 1234#include &lt;sys/socket.h&gt;ssize_t sendmsg (int sockfd, const struct msghdr *msg, int flags);// 成功返回发送的字节数; 出错返回-1 recv和read 相似, 但是recv 可以制定标志来控制如何接收数据p492 1234#include &lt;sys/socket.h&gt;ssize_t recv (int sockfd, void *buf, size_t nbytes, int flags);// 返回数据的字节长度; 若无可用数据或对等方已经按序结束, 返回0; 出错返回-1 recvfrom如果有兴趣定位发送者, 可以使用recvfrom 来得到数据发送者的源地址p493 123456#include &lt;sys/socket.h&gt;ssize_t recvfrom (int sockfd, void *restrict buf, size_t len, int flags, struct sockaddr *restrict addr, socklen_t *restrict addrlen);// 返回数据的字节长度; 若无可用数据或对等方已经按序结束, 返回0; 若出错返回-1 recvmsg为了将接收到的数据送入多个缓冲区, 类似readv, 或者想接收辅助数据, 可以使用recvmsgp493 1234#include &lt;sys/socket.h&gt;ssize_t recvmsg (int sockfd, struct msghdr *msg, int flags);// 返回数据的字节长度; 若无可用数据或对等方已经按序结束, 返回0; 若出错返回-1 setsockopt, getsockopt设置套接字选项和获取套接字选项当前值; p502 12345678#include &lt;sys/socket.h&gt;int setsockopt (int sockfd, int level, int option, const void *val, socklen_t len);// 成功返回0; 出错返回-1int getsockopt (int sockfd, int level, int option, void *restrict val, socklen_t *restrict lenp);// 成功返回0; 出错返回-1 sockatmark判断是否已经到达紧急标记; p505 1234#include &lt;sys/socket.h&gt;int sockatmark (int sockfd);// 若在标记处返回1; 不在返回0; 出错返回-1]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[服务学概论第四次作业]]></title>
      <url>%2F2016%2F12%2F22%2F%E6%9C%8D%E5%8A%A1%E5%AD%A6%E6%A6%82%E8%AE%BA%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%BD%9C%E4%B8%9A%2F</url>
      <content type="text"><![CDATA[作业要求:阐述面向服务的体系结构SOA的含义及技术内容 1. SOA 定义与介绍面向服务的体系结构SOA 是一种IT 体系结构风格, 支持将商务业务转换为一组相互链接的服务或可重复业务任务, 并在需要时通过网络访问这些服务和业务任务.SOA 是异类分布式系统的体系结构, 是实现由构建组成系统的模型. 它将应用程序的不同功能单元(称为服务)通过服务之间定义好的接口和规范按松散耦合方式联系起来, 通过网络整合成一个新的系统.接口是采用中立的方式进行定义的, 独立于实现服务的硬件平台, 才做系统和编程语言. 这使得构建在各种系统中的服务可以以统一和通用的方式进行交互. 2. SOA 应用目标: 层次 服务层次名称 内容描述 1 实现单独的Web 服务 由新的或现有的应用程序中所包含的任务来创建服务 2 面向服务的业务功能集成 通过跨企业内外的多个应用程序集成服务来实现业务目标 3 整个企业范围的IT 映射/转换 支持跨整个企业业务功能集成的体系结构实现 4 随需应变的业务转换 现有业务模型的广泛转换或者新业务模型的部署 3. 创建SOA 的六种方法 方法 描述 限制条件 业务流程驱动 业务流程需要接进资源, 每个活动都需要调用IT 功能; 希望该功能能够以一种灵活的, 可替代的方式使用 自顶向下 基于工具的MDA 希望定义一个业务模型, 然后由工具生成细节 自顶向下 包装遗留 拥有已经进行了大规模投资的现有系统, 但是它们不具有可伸缩性. 自底向上 组件化遗留 使用基于变一起的工具将整个庞大的遗留系统分解成模块 自底向上 数据驱动 使用服务来提供对信息的访问, 而不必在提供者端公开Schema 或者实现决策 专注于数据 消息驱动 仅仅希望这些系统通过标准的, 非专有的协议进行集成, 通信 应用程序和系统的面向服务的集成 4. SOA 的基本构件是服务 从外特性上看, 一个服务被定义为显式的, 独立于服务具体实现的技术细节的接口. 从内特性上看, 服务封装了可复用的业务功能 它们通常是大粒度业务, 如业务过程, 业务活动等. 服务实现可采用任何技术平台, 如J2EE, .Net等. 5. 基本体系结构模式: 发布-访问机制 适配器模式 远程服务策略 服务集成器 企业服务总线 5.1. 发布-访问机制 发布: 为了使服务可访问, 需要发布服务描述以使服务使用者可以发现它. 发现: 服务请求者定位服务; 通过查询服务注册中心来找到满足其标准的服务. 绑定和调用: 在检测到服务描述之后, 服务使用者将根据服务描述中的信息来调用服务. Web Service 基本实现机制 WSDL: Web 服务描述语言, 用于服务接口的描述 UDDI: 统一描述, 发现和集成协议, 服务使用者通过UDDI 发现相应的服务并据此将服务集成在自身的系统中 SOAP: 简单对象访问协议, 用户在服务客户端与服务提供者之间传递信息; 通过HTTP 或JMS 等各类基于文本的消息传递协议来运输. 5.2. 适配器模式 针对问题: 企业中存在若干遗存系统; 遗存系统采用较传统的技术开发, 无法提供清晰的WS 接口; 其他系统仍需访问这些遗留系统的功能; 解决途径: 通过构造适配器, 将遗存系统中的功能进行二次封装, 并开放出接口供其他系统使用; 从而使非面向服务的系统也能够参与到面向服务的体系结构之中. 典型技术: Java 2 Connector IBM WebSphere Business Integration Adaptor 5.3. 远程服务策略 客户端直接绑定服务接口(WSDL/URI) 客户端通过”Service Registry” 来访问服务; 当希望访问其他服务时, 只要手工修改该Registry 即可– 相当于一个配置文件 客户端通过”Service Broker” 来动态决定需访问哪个服务; – 难以实现完全动态的服务选择, 需要用到服务语义的相关技术. 存在的问题: 如果客户端需要同时或连续调用多个服务的功能, 它必须在自己的系统中分别写出多个调用; 对多个服务的调用次序也容易发生变化, 需要频繁的修改. 解决方法: 将Remote Service Strategy 的思想进一步发挥, 客户端不去逐一调用服务, 而是首先将这些被调用的服务按逻辑关系集成起来, 形成一个集成的, 大粒度的服务; 客户端只需调用这一个服务即可; 当该服务执行时, 集成器依靠配置信息来分别调用一个个小粒度的服务; 对这些配置信息进行修改, 即可方便地做到变更. 5.4. 服务集成器 处于服务提供者的生态系统，其中的现有功能通常是脆弱的和特别开发的：连接常常是“一次性的”。集成是专有的和特别的；没有单一访问点来合成服务。当前的系统没有提供具有合适粒度级别的接口。因此可以将一个特定的集成层引入服务集成的体系结构中，并通过服务集成器来管理这一层。服务集成器向其他的冗余服务提供单一访问点。 5.5. 企业服务总线 企业服务总线是一个整合应用和服务的灵活的连接基础架构，支持服务、服务组合和服务协同。随着组织越来越多地采用跨应用程序、遗留系统、通道技术等等的面向服务的体系结构，支持服务所需要的中间件以及用于支持它们的服务和技术的管理就成为复杂的问题。管理这种复杂性的解决方案的一个重要部分就是提供一个用于服务通信、协调、转换和集成的基础设施。这个基础设施同样也可以作为控制点，将服务管理、安全、监视和规范应用于面向服务的体系结构。这种公共的基础设施是由企业服务总线描述的。 ESB 的标准功能： 通信： 路由、寻址、协议、消息传递等； 服务交互：服务接口定义、服务目录、服务发现等； 集成：服务适配、服务聚合、服务映射、数据库集成、协议转换等； 服务质量QoS、安全性、服务级别、消息处理、管理自治、建模、基础架构智能等功能。 ESB 在请求者和服务之间实现了： 路由服务间的消息； 转化请求者和服务之间的传输协议 转换请求者和服务之间的消息格式； 处理分离资源间的业务事件。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[C-函数指针-简单使用]]></title>
      <url>%2F2016%2F12%2F22%2FC-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int func1 () &#123; printf("this is func1 call\n"); return 1;&#125;void func2 (int k, char c) &#123; printf("this is func2 call:%d %c\n", k, c);&#125;void func3 (void (*pfunc) (int, char), int a, char c)&#123; printf("in func3\n"); pfunc(a, c);&#125;void (*func4 (double d)) (int, char) &#123; printf("in func4, double: %f\n", d); return func2;&#125;float add (float a, float b)&#123; printf("in func add, %f + %f = %f\n", a, b, a + b); return a + b;&#125;float minu (float a, float b) &#123; printf("in func min, %f - %f = %f\n", a, b, a - b); return a - b;&#125;typedef float (*pfuncType) (float, float);int main () &#123; // 第一种赋值方法 int (*pfunc1) () = func1; // 第一种调用方法 pfunc1(); // 第二种调用方法 (*pfunc1)(); printf("\n"); // 第二种赋值方法 void (*pfunc2) (int, char) = func2; pfunc2(1, 'A'); (*pfunc2)(1, 'A'); printf("\n"); // 函数指针作为参数 func3(func2, 1, 'B'); printf("\n"); // 函数指针作为参数的函数的赋值 void (*pfunc3) (void (*pp) (int, char), int, char) = func3; pfunc3(func2, 1, 'C'); printf("\n"); // 函数指针作为返回值 void (*pfunc5) (int, char) = func4(3.33); pfunc5(1, 'D'); printf("\n"); // 函数指针数组 float (*pfuncArr1[2]) (float, float) = &#123;&amp;add, &amp;minu&#125;; pfuncArr1[0](1.2, 1.0); pfuncArr1[1](1.2, 1.0); printf("\n"); // typedef 简化函数指针类型 pfuncType pfunc6 = &amp;add; pfunc6(1.2, 1.0); pfuncType pfuncArr2[2] = &#123;&amp;add, minu&#125;; pfuncArr1[1](1.2, 1.0);&#125;/*输出:this is func1 callthis is func1 callthis is func2 call:1 Athis is func2 call:1 Ain func3this is func2 call:1 Bin func3this is func2 call:1 Cin func4, double: 3.330000this is func2 call:1 Din func add, 1.200000 + 1.000000 = 2.200000in func min, 1.200000 - 1.000000 = 0.200000in func add, 1.200000 + 1.000000 = 2.200000in func min, 1.200000 - 1.000000 = 0.200000*/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker-mongodb-使用]]></title>
      <url>%2F2016%2F12%2F19%2Fdocker-mongodb-%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[阿里云仓库 启动(要求认证)docker run --name docker0 -d -p 27017:27017 mongo:latest --auth 添加用户(以mongo 客户端, admin身份登入; 也可以用bash, 再mongo )12345678docker exec -it mongo0 mongo admindocker createUser(&#123; user: 'superuser', pwd: '123456', roles: [&#123; role: 'root', db: 'admin' &#125;]&#125;) 备份 12345678# 开启mongo0 容器docker start mongo0# 将test 数据库备份到back 文件夹下mongodump -d test -o back# 将back/test 文件夹下的bson 还原到数据库mongorestore -d test back/test]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[服务学概论第三次作业]]></title>
      <url>%2F2016%2F12%2F17%2F%E6%9C%8D%E5%8A%A1%E5%AD%A6%E6%A6%82%E8%AE%BA%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BD%9C%E4%B8%9A%2F</url>
      <content type="text"><![CDATA[阐述服务构件概念及各服务构件类型的描述 举例说明服务发现、选择与服务组合的关系 服务构件的概念 可被重复使用的, 用来构造服务系统的基本单元. 具有一系列特定的接口和描述. 为什么要提出服务构件?因为服务系统内部包含的服务要素种类繁多, 多服务提供者来说, 这些服务要素是可以被复用的, 以构造面向不同需求的服务系统. 例如服务系统需要有给服务人员分配班制的服务, 此时需要查询服务人员现有的班制与要分配的班制是否冲突, 与其他服务人员的班制是否冲突, 提供这个服务时我们不可能将服务人员和班制这些服务要素的所有属性都拿出来一一比较, 这时候就需要将这些服务要素进行全面的描述和封装, 对外提供接口和描述, 以便于进行选取和组合. 常见的服务构建类型 软件服务 Web Services 人工服务 WS-HumanTask 表述性状态转移 REST (REpresentational State Transfer) 服务构建 SCA (Service Component Architecture) 服务数据对象 SDO (Service Data Object) Web 服务资源 WS-Resource 软件服务 Web ServicesWeb Service 是一种服务导向架构的技术, 通过标准的Web 协议提供服务, 目的是保证不同平台的应用服务可以互操作.根据W3C 的定义, Web Service 应当是一个软件系统, 用以支持网络间不同机器之间的互动操作. 网络服务通常是许多应用程序接口(API)所组成的, 它们透过网络, 例如Internet 的远程服务器端, 执行客户所提交服务的请求.Web Service 通常包括: SOAP, 一个基于XML 的可扩展消息信封格式, 需同时绑定一个网络传输协议. 这个协议通常是HTTP 或HTTPS, 但可能是SMTP 或者XMPP. WSDL, 一个XML 格式文档, 用以描述服务端口访问方式和使用协议的细节, 通常用来辅佐生成服务器和客户端代码以及配置信息. UDDI, 一个用来发布和搜索WEB 服务的协议, 应用程序可借由此协议在设计或者运行时找到目标WEB 服务. 人工服务 WS-HumanTask在Web Service 基础上扩展, 支持异步执行的人工活动(对人工活动的虚拟化).WS-HumanTask规范引入了人工活动和通知的定义，包括它们的属性，行为特性，和一系列用于操纵人工活动的操作。同时，引入了一个协调协议，用于控制互操作方式下的人工任务服务的自治和生命周期管理。BPEL4People (WS-BPEL Extension for People) 是BPEL 在人工活动方面的扩展, 同时支持Web service 和基于角色的人工活动进行编排.BPEL4People规范引入了一个WS-BPEL的扩展，用于在WS-BPEL中引入人员交互。扩展定义了一种新的基本活动，允许由人工任务作为其实现，并允许指定过程局部的任务或使用过程定义外的任务。这一扩展基于WS-HumanTask规范。在业务流程方面, BPEL4People 通过以额外的独立语法和语义扩展BPEL, 提供以下功能: 支持基于角色的人员交互 提供将人员活动指派个人员角色的方法 表述性状态转移 REST (REpresentational State Transfer)REST 是一种轻量级的Web Service 架构风格, 其实现和操作简洁, 完全通过HTTP 协议实现, 利用缓存Cache 来提高相应速度, 其性能, 效率和易用性上都优于基于SOAP 的Web Service.REST 的基本机制: 网络上的所有失误都被抽象为资源 每个资源对应一个唯一资源标识符, 但具有不同具体表现形式 通过通用的连接器接口对资源进行操作 对资源的各种操作不会改变资源标识符 所有操作都无状态的 服务构建 SCA (Service Component Architecture)SCA 是一种变成模型, 能够方便快速地构建服务系统和应用.SCA 将构建面向服务的应用程序的步骤划分为两部分: 实现提供服务和使用其他服务的构件 组装构建, 以通过服务引用其他服务的方式来构建业务应用程序. 数据对象 SDO (Service Data Object)SDO 用于简化和统一应用程序处理数据方式. 变成人员可采用统一方式访问和操作来自异类数据源的数据, 包括关系数据库, XML 数据源, Web 服务以及企业信息系统等. SDO 的基本构成要素: 数据对象: 保存具体的数据, 包括原始数据以及指向其他数据对象的引用. 数据对象也包含了指向元数据的引用, 这使得SDO 元数据能够被读取, 包括数据的类型, 关系和约束等. 数据图: 一个概念上的数据集合. 数据图是一个有多个树根的数据对象集合, 可以记录所有对数据对象的操作. 元数据: 元数据使得开发工具或运行环境能够动态的或者静态的查看数据的属性, 包括数据类型, 关系和约束等, 同时提供了一组与数据无关的元数据API. 数据终结服务: 数据访问服务负责与后台数据源进行通信, 完成构造数据图, 更新数据图等操作. Web 服务资源 WS-ResourceWeb Service 是无状态的, 而Web 服务资源是对一个有状态资源(数据库, 物理资源等)和它与之交互的Web 服务的组合. 资源具有属性和状态, 表达为XML 的形式 资源具有特定的生命周期, 可被创建和销毁. 通过若干特定的web service 对资源进行操作, 改变其属性与状态 Web 服务资源框架定义了使用 Web 服务来访问有状态资源的一系列规范。它包括 Web 服务资源特性（WS-ResourceProperties）、Web 服务资源生命周期（WS-ResourceLifetime）、Web 服务基本故障（WS-BaseFaults）和 Web 服务服务组（WS-ServiceGroup）规范。这些新规范的动机是，虽然 Web 服务实现在它们交互的过程中并不维护状态信息，但是它们的交互必须经常性地为状态操作考虑，也就是说，数据的值通过 Web 服务交互得以持久化，并且作为 Web 服务交互的结果而保存。例如，一个在线的航空订票系统必须维持有关飞行状态、具体顾客的订票以及系统本身状态（它当前的位置、负载和性能）等信息。Web 服务接口如果要允许请求者查询飞行的状态、进行订票、改变订票的状态以及管理订票系统，它就必须提供对状态的访问。在 Web 服务资源框架（Web Services Resource Framework）中，我们把状态作为有状态资源来建模并且通过一个隐含的资源模式使 Web 服务之间的关系条文化。 以Airbnb 为例说明服务发现, 服务选择与服务组合的关系Airbnb 是一个让大众出租住宿民宿的网站, 让旅行者可以通过网站或手机发布, 发掘和预定世界各地的独特房源, 为近年来共享经济的代表. 服务发现过程: 客户输入自己的需求, 如目的地, 城市, 地址, 入住日期, 退房日期, 房间类型, 价格方位, 房间规模大小, 房间设施等, 向服务器发起服务请求. 服务器根据服务请求进行服务发现的描述, 即Airbnb 根据客户提供的需求, 查找对应的符合条件的民宿, 依据服务匹配算法进行服务查找和服务匹配, 进行服务选择与排序. 服务选择过程:服务选择在满足需求的多个候选服务中, 选择出满足度最高的服务. 在Airbnb 中选择满足度高的服务会考虑以下因素: 房源品质, 房主发布房源的方式以及房主是否照顾好房客 预定吸引力, 如果房客经常点击到该房源页面或者试图预定该房源, 这会对该房源在搜索结果中的排名有正面影响. 评价: 过往房客的评价数量与评价质量都会影响到房源在搜索结果中的表现 能否轻松预定: 房客能否可靠, 轻松地预定房源也会影响到搜索结果. 位置相关性: 房客可以在城市级别广泛搜索, 也可以缩小到街区范围进行搜索, 因此, Airbnb 会尽可能显示与房客选择的位置偏好相关度最高的搜索结果. 可能会使用过往的预定信息来决定哪些位置与具体的搜索相关度最高. 个性化的搜索结果: Airbnb 会尽量去了解房客的偏好和旅程特点, 因此搜索结果会随具体的人或者旅程详情而发生变化. 服务组合过程:服务组合 是将已有的服务组合为一个新服务的过程, 以增加服务的可复用性, 功能和性能.房客在Airbnb 浏览房源时会用到房源的基本信息, 房主的基本信息, 房源的评论, 在预定房源时有支付服务, 购买保险, 与房主打招呼等服务而这些服务通过服务组合, 将服务集成并组织起来形成一个流程或更大粒度的服务.服务组合的价值在于服务重用, 以解决更加复杂的问题, 使服务得到增值.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[docker入门笔记]]></title>
      <url>%2F2016%2F12%2F14%2Fdocker%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[Docker is the world’s leading software containerization platform 概念镜像Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。分层存储: 镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。 容器镜像和容器, 就像类和实例一样. 镜像是静态的定义, 容器是镜像运行时的实体.镜像是分层存储, 容器也是, 每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新 run，数据却不会丢失。 仓库仓库是集中,分发镜像的服务, 一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。 虚悬镜像 dangling imagedocker images 显示有仓库名和标签都为none 的镜像该镜像原来有仓库名和标签, 但是随着官方镜像维护, 原来的名字被转移到新的镜像身上, 旧的镜像的名字则被取消.docker pull 和docker build 都可能导致这种现象使用命令专门显示这类镜像: docker images -f dangling=true删除这类镜像docker rmi $(docker images -q -f dangling=true) 中间层镜像为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可能会看到一些依赖的中间层镜像显示包括中间层镜像的所有镜像docker images -a DockerfileDockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。栗子:1234567891011121314151617181920212223# FORM 制定基础镜像FROM nginx# RUN 执行命令# RUN 有shell 模式和 exec 模式# shell: RUN &lt;命令&gt;# exec: RUN ["可执行文件", "参数1", "参数2"]RUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html# 更复杂的栗子FROM debian:jessieRUN buildDeps='gcc libc6-dev make' \ &amp;&amp; apt-get update \ &amp;&amp; apt-get install -y $buildDeps \ &amp;&amp; wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \ &amp;&amp; mkdir -p /usr/src/redis \ &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \ &amp;&amp; make -C /usr/src/redis \ &amp;&amp; make -C /usr/src/redis install \ &amp;&amp; rm -rf /var/lib/apt/lists/* \ &amp;&amp; rm redis.tar.gz \ &amp;&amp; rm -r /usr/src/redis \ &amp;&amp; apt-get purge -y --auto-remove $buildDeps 命令pull 获取镜像1docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt; Docker Registry地址：地址的格式一般是 &lt;域名/IP&gt;[:端口号]。默认地址是 Docker Hub。 仓库名：如之前所说，这里的仓库名是两段式名称，既 &lt;用户名&gt;/&lt;软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。 run 运行123456docker run -it --rm ubuntu:14.04 bashdocker run --name ub1 -it -d ubuntu:latest bash# 服务名为web2, 映射到81 端口, 访问http://localhost:81 可以看到结果docker run --name web2 -d -p 81:80 nginx:v2 -it, -i 是让容器的标准输入打开, -t 是终端, –rm, 容器退出后将其删除, 默认情况退出的容器不会立即删除, 除非手动docker rm ubuntu:14.04, 使用ubuntu:14.04 镜像作为基础来启动容器 bash, 放在镜像名后面的是命令 start 启动已终止容器1docker start web2 stop1docker stop web2 logs1docker logs [container ID or NAMES] images 列出镜像1234567891011121314151617docker images# 显示虚悬镜像docker images -f dangling=true# 显示包括中间层的所有镜像docker images -a# 列出部分镜像docker images ubuntu # 根据仓库名docker images ubuntu:16.04 # 根据仓库名和标签docker images -f since=mongo:3.2 # 在mongo3.2 之后建立的镜像, -f 为`--filter`, 之前-&gt;before, 之后-&gt;sincedocker images -q # 只显示虚悬镜像的IDdocker images --format "&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;" # 设置格式, 只列出镜像ID 和仓库名# 显示镜像摘要docker images --digests 镜像 ID 则是镜像的唯一标识，一个镜像可以对应多个标签。 ps 列出容器12docker ps # 列出正在运行的容器docker ps -a # 列出所有容器 exec1docker exec -it webserver bash commit 保存容器的存储层保存下来成为镜像, 也就是在原有镜像的基础上, 再叠加上容器的存储层, 构成新的镜像. 以后运行这个新镜像的时候, 就会拥有原有容器最后的文件变化docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]123456789$ docker commit \ --author "Tao Wang &lt;twang2218@gmail.com&gt;" \ --message "修改了默认网页" \ webserver \ nginx:v2sha256:07e33465974800ce65751acc279adc6ed2dc5ed4e0838f8b86f0c87aa1795214# 可以看到新定值的镜像, 仓库: nginx, tag: v2docker images nginx diff 查看改动查看对容器存储层的改动1docker diff webserver history 查看镜像内的历史记录1234567891011beim@userver:~$ docker history nginx:v2IMAGE CREATED CREATED BY SIZE COMMENT18ac1bcb1bf3 About a minute ago nginx -g daemon off; 243 B 修改默认网页abf312888d13 2 weeks ago /bin/sh -c #(nop) CMD ["nginx" "-g" "daemon 0 B &lt;missing&gt; 2 weeks ago /bin/sh -c #(nop) EXPOSE 443/tcp 80/tcp 0 B &lt;missing&gt; 2 weeks ago /bin/sh -c ln -sf /dev/stdout /var/log/nginx/ 22 B &lt;missing&gt; 2 weeks ago /bin/sh -c apt-key adv --keyserver hkp://pgp. 58.48 MB &lt;missing&gt; 2 weeks ago /bin/sh -c #(nop) ENV NGINX_VERSION=1.11.6-1 0 B &lt;missing&gt; 5 weeks ago /bin/sh -c #(nop) MAINTAINER NGINX Docker Ma 0 B &lt;missing&gt; 5 weeks ago /bin/sh -c #(nop) CMD ["/bin/bash"] 0 B &lt;missing&gt; 5 weeks ago /bin/sh -c #(nop) ADD file:41ea5187c50116884c 123 MB build 构建镜像1234567891011121314151617docker build [选项] &lt;上下文路径/URL/-&gt;# 如:$ docker build -t nginx:v3 .# -t 指定最终镜像的名称# . 指定上下文路径# 还可以从git repo 中创建docker build https://github.com/twang2218/gitlab-ce-zh.git#:8.14# 从tar 压缩包创建docker build http://server/context.tar.gz# 从标准读入中创建docker build - &lt; Dockerfile# 或cat Dockerfile | docker build - export导出容器快照到本地文件1docker export [container ID] &gt; ubuntu.tar import将容器快照文件导入为镜像123docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]cat ubuntu.tar | docker import - test/ubuntu:v1.0 save &amp;&amp; lodasave将镜像保存为tar 文件可以传输到另一个位置, 再加载进来123456docker save alpine | gzip &gt; alpine-latest.tar.gzdocker load -i alpine-latest.tar.gz# 利用ssh 和pv, 将镜像从一个机器迁移到另一个机器docker save &lt;镜像名&gt; | bzip2 | pv | ssh &lt;用户名&gt;@&lt;主机名&gt; 'cat | docker load' rm 删除容器1234567docker rm ubuntu1# 删除运行中的容器docker rm -f ubuntu1# 删除所有已经创建的终止状态的容器docker rm $(docker ps -a -q) rmi 删除镜像123456789docker rmi [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]# docker images 命令来配合# 删除虚悬镜像docker rmi $(docker images -q -f dangling=true)# 删除所有仓库名为redis 的镜像docker rmi $(docker images -q redis)# 删除所有在mongo:3.2 之前的镜像docker rmi $(docker images -q -f before=mongo:3.2) logs 查看应用信息1docker logs -f webserver cp123docker cp &lt;containerId&gt;:/file/path /host/file/pathdocker cp /host/file/path &lt;containerId&gt;:/file/path volume1234567docker volume ls~/user$ docker run --name ub2 -p 2335:80 -d -it -v ~/user/webapp:/webapp ubuntu:latest ddd5a9647e053b401e757ea858b16512dd609582c6bdc20363eb5fac8e8ebf2a~/user$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESddd5a9647e05 ubuntu:latest "/bin/bash" 4 seconds ago Up 2 seconds 0.0.0.0:2335-&gt;80/tcp ub2]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[安装docker]]></title>
      <url>%2F2016%2F12%2F14%2F%E5%AE%89%E8%A3%85docker%2F</url>
      <content type="text"><![CDATA[ubuntu 安装Docker 指南 - 官网 在添加GPG 这一步报错， 无法获取12345678910beim@userver:/etc/apt$ sudo apt-key adv \&gt; --keyserver hkp://ha.pool.sks-keyservers.net:80 \&gt; --recv-keys 58118E89F3A912897C070ADBF76221572C52609DExecuting: /tmp/tmp.N2eCGO93Kl/gpg.1.sh --keyserverhkp://ha.pool.sks-keyservers.net:80--recv-keys58118E89F3A912897C070ADBF76221572C52609Dgpg: requesting key 2C52609D from hkp server ha.pool.sks-keyservers.netgpg: keyserver timed outgpg: keyserver receive failed: keyserver error 于是参考Ubuntu、Debian 系列安装 Docker - gitbook 使用阿里云的安装脚本1curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - 安装完成1234567891011121314151617181920212223+ sudo -E sh -c docker versionClient: Version: 1.12.4 API version: 1.24 Go version: go1.6.4 Git commit: 1564f02 Built: Tue Dec 13 00:08:34 2016 OS/Arch: linux/amd64Server: Version: 1.12.4 API version: 1.24 Go version: go1.6.4 Git commit: 1564f02 Built: Tue Dec 13 00:08:34 2016 OS/Arch: linux/amd64If you would like to use Docker as a non-root user, you should now consideradding your user to the "docker" group with something like: sudo usermod -aG docker beimRemember that you will have to log out and back in for this to take effect! 根据上面的提示， 使用sudo usermod -aG docker beim 现在可以运行hello-world了1docker run hello-world 成功123456789101112131415161718192021beim@userver:~$ docker run hello-worldHello from Docker!This message shows that your installation appears to be working correctly.To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the "hello-world" image from the Docker Hub. 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bashShare images, automate workflows, and more with a free Docker Hub account: https://hub.docker.comFor more examples and ideas, visit: https://docs.docker.com/engine/userguide/ 尝试pull 下ubuntu16.04docker pull ubuntu:16.04发现速度非常慢， 因为默认是Docker Hub 的仓库 于是参考镜像加速器 - gitbook到阿里云， 配置加速器执行12345678sudo mkdir -p /etc/systemd/system/docker.service.dsudo tee /etc/systemd/system/docker.service.d/mirror.conf &lt;&lt;-'EOF'[Service]ExecStart=ExecStart=/usr/bin/docker daemon -H fd:// --registry-mirror=https://oysy0l7g.mirror.aliyuncs.comEOFsudo systemctl daemon-reloadsudo systemctl restart docker 再次尝试pull ubuntu16.04, 这次就很快了123456789beim@userver:~$ docker pull ubuntu:16.0416.04: Pulling from library/ubuntuaf49a5ceb2a5: Pull complete 8f9757b472e7: Pull complete e931b117db38: Pull complete 47b5e16c0811: Pull complete 9332eaf1a55b: Pull complete Digest: sha256:3b64c309deae7ab0f7dbdd42b6b326261ccd6261da5d88396439353162703fb5Status: Downloaded newer image for ubuntu:16.04 查看镜像1234beim@userver:~$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEubuntu 16.04 4ca3a192ff2a 2 weeks ago 128.2 MBhello-world latest c54a2cc56cbb 5 months ago 1.848 kB 现在运行ubuntu16.0412345beim@userver:~$ docker run -it ubuntu:16.04 root@41f0f5b8ff95:/# uname -r4.4.0-31-genericroot@41f0f5b8ff95:/# exitexit 看来是成功了～～～撒花继续准备编译考试了QAQ 参考连接Install Docker on Ubuntu - 官网Ubuntu 12.04上享用新版本Linux的功能 - 云栖社区Docker 从入门到实践 - gitbook]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[shadowsocks配置]]></title>
      <url>%2F2016%2F12%2F10%2Fshadowsocks%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[安装shadowsocks - Tutorial - Github 客户端给出一份客户端的配置文件12345678910# shadow.json&#123; "server": "sg03-31.ssv7.net", "server_port": 40696, "local": "127.0.0.1", "local_port": 1080, "password": "your password", "timeout": 600, "method": "aes-256-cfb"&#125; 执行命令sslocal -c /home/beim/.shadow.json 即可连接至服务器 执行gnome-session-properties 命令, 将上一条命令加入到开机自启，也有其他办法加入自启，见另一篇文章 服务端基本操作 - Tutorial - Github 给出一份服务端的配置文件, Configuration via Config File123456789101112# shadowsocks.conf&#123; "method": "aes-256-cfb", "server_address": "127.0.0.1", "port_password": &#123; "138": "1111000", "137": "111111", "264": "10110100", "524": "10110100" &#125;, "timeout": 300&#125; 执行命令ssserver -c shadowsocks.conf 即可开启服务(-d 选项可以后台运行)或者用 Supervisor 运行 Shadowsocks 查看日志 sudo less /var/log/shadowsocks.log shadowsocks 优化 shadowsocks 监控流量]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[云免流的尝试]]></title>
      <url>%2F2016%2F12%2F10%2F%E4%BA%91%E5%85%8D%E6%B5%81%E7%9A%84%E5%B0%9D%E8%AF%95%2F</url>
      <content type="text"><![CDATA[原理修改HTTP头运营商有免费流量的套餐，比如咪咕音乐，在使用咪咕音乐软件的时候用的流量是不收费的。为什么？运营商在检测手机流量的时候检查HTTP头，如URL，HOST，还有X-Request-with这个运营商自己的参数，如果符合免流量费用的条件（比如访问的是移动自己的页面），则对相关的流量不收费。知道了这个，我们就可以在HTTP上面做点修改，达到免流的目的了 ohhh （具体修改的内容在下面介绍） 修改端口运营商还有一种判断免费流量的方法，即访问的端口，如137/138/139等端口，如果流量是指向这些端口的，运营商就不对这些流量计费。那么我们也可以让我们网络请求的端口都设置成这些特定的端口，以达到免流效果。 实验1OpenVPN + Squid 搭建HTTP代理，修改头信息 系统环境 ：ubuntu14.04首先搭建OpenVPN然后安装squid, 直接apt-get即可安装相关目录： /etc/squid3 // squid的配置文件 /var/log/squid3/ // squid的日志文件 给出一份squid的配置文件12345678910111213141516171819202122232425262728293031# squid.confacl SSL_ports port 443acl Safe_ports port 138acl Safe_ports port 80acl Safe_ports port 21acl Safe_ports port 443acl Safe_ports port 70acl Safe_ports port 210acl Safe_ports port 1025-65535acl Safe_ports port 280acl Safe_ports port 488acl Safe_ports port 591acl Safe_ports port 777acl CONNECT method CONNECT# acl CONNECT method GET# acl CONNECT method POST# acl CONNECT method PUT# acl CONNECT method DELETE# acl CONNECT method HEADvia onrequest_header_access X-Forwarded-For deny allrequest_header_access user-agent deny allreply_header_access X-Forwarded-For deny allreply_header_access user-agent deny allhttp_port 2333http_access allow allaccess_log /var/log/squid/access.logvisible_hostname TD-LTE/FDD-LTEcache_mgr Welcome_to_use_OpenVPN 开启和关闭squid服务的方法service squid3 start/stop/restart/status 给出一份openvpn客户端的配置文件123456789101112131415161718192021222324252627282930313233343536373839404142# client.ovpn# 最下面3个标签里把你自己的证书文件内容复制进去替代TODO# 免流代码即修改的HTTP头信息clientdev tunproto tcpremote beim.site 1194;remote my-server-2 1194resolv-retry infinitenobindpersist-keypersist-tunns-cert-type servercomp-lzoverb 3########免流代码########remote wap.10086.cn 80 tcphttp-proxy-option EXT1 POST http://wap.10086.cnhttp-proxy-option EXT1 VPN 127.0.0.1:443http-proxy-option EXT1 POST http://wap.10086.cn# http-proxy 10.0.0.172 80http-proxy beim.site 138########免流代码######### &lt;http-proxy-user-pass&gt;# lpss# lpss# &lt;/http-proxy-user-pass&gt;# ca keys/ca.crt&lt;ca&gt;// TODO&lt;/ca&gt;# cert keys/laptop.crt&lt;cert&gt;// TODO&lt;/cert&gt;# key keys/laptop.key&lt;key&gt;// TODO&lt;/key&gt; 再给出一份openvpn服务器的配置文件(大体上是没有什么问题的)123456789101112131415161718192021port 1194proto tcpdev tunca ./keys/ca.crtcert ./keys/server.crtkey ./keys/server.keydh ./keys/dh2048.pemserver 10.8.0.0 255.255.255.0ifconfig-pool-persist ipp.txtpush "redirect-gateway def1 bypass-dhcp"push "dhcp-option DNS 8.8.8.8"duplicate-cnkeepalive 10 120comp-lzomax-clients 10persist-keypersist-tunstatus openvpn-status.loglog openvpn.loglog-append openvpn.logverb 3 操作方法配置文件都准备好以后，将openvpn和squid的服务都开启将客户端的配置文件导入到客户端（如ios 的app ：openVPN (需要国外的apple id 才能下载)）客户端连接代理，可以看到ip转换 实验结果但是。。不幸的是。。实验失败 。。虽然IP确实改变了，squid和openvpn的代理确实有效，但是流量依旧扣除了，说明免流的代码无效。但是我在TB上买的免流代码是有效的，它的remote没有设置成自己的而是10086，HTTP-PROXY还是设置成自己的服务器。把它的客户端配置文件贴出来 1234567891011121314151617181920212223242526272829# &lt;ca&gt;部分太长，我把它省略掉了，重点在免流代码clientdev tunproto tcpkeepalive 10 120ns-cert-type serverresolv-retry infinitenobindpersist-keypersist-tun########免流代码########remote wap.10086.cn 80 tcphttp-proxy-option EXT1 POST http://wap.10086.cnhttp-proxy-option EXT1 VPN 127.0.0.1:443http-proxy-option EXT1 POST http://wap.10086.cnhttp-proxy 3.love9999.top 138########免流代码########&lt;http-proxy-user-pass&gt;lpsslpss&lt;/http-proxy-user-pass&gt;&lt;ca&gt;// TODO &lt;/ca&gt;auth-user-passcomp-lzoverb 3 我把remote和http-proxy分别设置成： remote http-proxy 结果 myserver:1194(openvpn默认端口) myserver:3128(squid默认端口) 连接成功，ip更改，流量照扣 myserver:1194 10.0.0.172:80 连接成功，ip更改，流量照扣 wap.10086.cn:80 myserver:3128 连接失败 wap.10086.cn:80 10.0.0.172:80 连接失败 于是我尝试将http代理绑定到138端口，尝试了squid和polipo，均失败，而绑定到其他非常用端口如2333是可以的下面是polipo的日志： 12Couldn't bind: Permission deniedCouldn't establish listening socket: Permission denied 实验2于是我想起了我的老朋友 shadowsocks （socks5代理软件，有服务端和客户端，翻墙一直用它，稳定高速）shadowsocks usage 操作方法在服务器上执行命令,开启shadowsocks 服务器sudo ssserver -p 138 -k password -m aes-256-cfb -d start 在客户端进行连接（ios 上有surge（￥328）和shadowrocket ，安卓上有shadowsocks ） 然后。。就。。成功。。了。。吧。。 实验结果日期：2016-12-10地区：哈尔滨连接shadowsocks一个多小时，测试：网页，QQ，微信，bilibili直播，bilibili视频（这个比较慢原因未知），斗鱼直播，微云下载。除了b站视频以外，其他的体验都和正常4g相同。 经过代理的流量125.19M实际扣除的流量为0.09M(可能是某些shadowsocks 所不能处理的协议) 如图 最后好奇为主，免流为次且用且珍惜 参考链接乌云提交云免流漏洞深入分析免流(非小白教程)shadowsocks wiki - github 后续手机上shadowrocket 连了一整天没断在手机亮屏的时候, 流量是完全不会扣的黑屏的时候会扣少量流量, 可能是系统推送服务的, 一小时也不到0.1M, 可以忽略 手机用shadowrocket 连接, 开热点, 电脑连接热点,可以连接成功, 但是电脑不能上网, 原因未知. 手机不连接代理, 开热点, 电脑用shadowsocks 连接代理服务器, 并连接手机热点,手机电脑都可以上网手机走的流量会正常扣除电脑上通过代理的流量免费, 没通过代理的流量正常扣除]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[服务学概论第二次作业]]></title>
      <url>%2F2016%2F12%2F08%2F%E6%9C%8D%E5%8A%A1%E5%AD%A6%E6%A6%82%E8%AE%BA%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%9C%E4%B8%9A%2F</url>
      <content type="text"><![CDATA[1. Big Data Sensing and Services: A Tutorial1.1. 文章重点内容1.1.1. big data sensing 是什么big data sensing 包含大数据计算和服务；传感器云计算和服务；传感器和传感器网络。 big data sensing 为不同的应用程序提供了按需分配的灵活的大数据分析服务。 1.1.2. big data sensing and service 架构（自底向上） 资源池（包含传感器，传感器网络，存储和计算服务，网络） 网络基础设施（无线网络和因特网） 业务服务模型 部署模型（包含四种不同的部署模型：私有的大数据传感；公开的大数据传感；社区大数据传感；混合大数据传感） 1.1.3. big data sensing 的特点 大数据传感云 自动数据传感预测 大数据传感安全 按需数据传感服务 可扩展的数据传感 服务的监控，测量和计费 多租户的接入和服务 大数据手机和管理 大数据传感的虚拟化 1.1.4. big data sensing and services 的研究内容 大数据传感资源层（提供硬件资源：传感器和传感器网络，因特网和移动网络，用于计算的服务器，用于数据存储的服务器） 大数据传感基础设施层（提供基于云的虚拟化的传感器设施） 大数据传感服务层（提供三种服务：传感数据服务，传感数据平台服务，传感数据分析服务） 大数据传感应用服务层（提供面向传感器的应用程序） 1.1.5. big data sensing service 的分类1.1.5.1. SIaaS(Sensor cloud Infrastructure as a Service)传感器云基础设施即服务，它提供给用户一个虚拟化的传感设施作为服务。传感器云是一个传感器数据存储，虚拟化和管理平台，它通过云计算技术提供可扩展性的数据，快速可视化和用户可编程的分析。通过传感器云服务可以为多租户提供虚拟化的传感器基础设施，使用按需付费的付费模型。 它的主要目标是通过减少支出来增加传感器的共享和使用。 传感器云提供了以下四种功能性服务： 获取： 这个服务使用REST API直接将聚合的无线传感器数据上传到云数据存储中。 可视化：将之前上传到传感器云的数据可视化。因为实际的传感器有不同的类型，部署在不同的位置，为了让客户端能无视传感器的物理位置和传感器网络的细节，需要将传感器云上的数据进行可视化。 监控：用户可以自定义对数据的监控提醒。 分析：这项服务帮助用户使用开放数据分析应用来分析预处理数据。用户可以自定义接口，对数据进行过滤。 1.1.5.2. SDaaS(Sensing Data Service as a Service)传感数据即服务。SDaaS指一个线上的传感数据服务系统。这个系统基于传感器云基础设施和环境，提供多种传感器数据收集，存储，管理和传输服务。它的主要目标是为租户和应用程序提供一个中心化的接口，使租户和应用可以获取基于传感器的数据而不需要考虑传感器网络和传感器云的细节。这些数据服务可以采用按需付费的模式，根据不同的请求来做出相应的回应。 数据传感服务需要考虑以下几个问题： 数据传感模式：有两种支持数据传感操作的模式，（1）实时动态和（2）静态分批次操作。 数据感知频次和大小：这些对用户和数据的处理和存储来说都是重要的参数。为不同的租户提供不同的数据感知频次和大小需要对数据集合，数据存储和传感器虚拟化进行特殊的处理。 不同的传感器的数据类型：在传感器云中，不同的传感器和传感器网络通常在物理层面进行连接，因此它们可能使用不同的数据类型。 传感数据传输：和无线传感器网络类似，大数据感知必须支持在传感器/传感器网络和后端服务器和数据存储之间的数据传输。数据的传输有两种模型：a）同步模型，传感器实时动态地传输；b）异步模型，数据异步地进行收集。 服务模型：对于大数据感知服务，云计算和无线传感器网络是两个主要的服务。该服务模型关注对于终端用户的服务可用性。每个服务提供者都为请求者提供一个服务目录的模板，请求者可以根据他们的需要来配置服务。因此每个服务实体都会根据它们选择的服务模板来生成。这种方法可以很好的满足不同用户对不同服务的需求。 数据存储服务：面向传感器的数据服务是大数据感知中的另一个关键服务。因为该服务需要在物理层面与传感器和传感器网络进行连接，通过大数据技术和设施存取。由于不同的传感器网络可能使用不同的协议，数据格式和数据结构；不同的用户对于传感服务的数据有不同的要求，因此这些问题需要由该服务来解决。 服务计费：在大数据感知中，传感器数据是对用于有价值的资源。因此需要针对不同的业务采用不同的计费模型。 1.1.5.3. DSPaaS(Data Sensing Platform as a Service)数据传感平台即服务DSPaaS指的是一个给用户提供开发模式和工具，允许用户开发，部署和托管面向传感器的数据服务应用的服务平台。 1.1.6. big data sensing service 存在的问题 传感网络的多样性 缺乏标准 缺乏低成本的数据安全和隐私的解决方法 多租户的按需服务 数据传感和分析服务的质量保证 1.2. 文章观点的分析1.2.1. 赞同 计费模式文中提到传感器的数据服务采用按需付费的计费模式或者是订阅模式，我认为按需付费模式是更加合理的。对于用户来说，传感器的数据，面向传感器数据的分析计算服务，传感器的监控提醒服务等都是有价值的资源。而这些资源，根据传感器的位置不同，传感器数据的收集频次不同，数据量，媒体类型和数据管理方法不同，所产生的成本和价值不同，用户对它们的需求也是不同的。因此需要有合理的按需付费的计费模式，让用户自由组合所需要的服务，通过参数来配置服务类型，从而获取相应的服务。这么做不仅节省了成本，也减少了资源的浪费。 1.2.2. 赞同 数据可视化文中提到数据的可视化服务，即将上传到传感器云的数据进行可视化。由于实际的传感器部署的方式不同，所在的位置，传感器网络，和它们收集到的数据格式不同，因此为了让用户对一个虚拟的传感器组的数据进行使用，而不需要考虑以上物理的差异性，需要对传感器的数据进行可视化。 2. From Big Data to Big Service2.1. 文章重点内容2.1.1. 大服务的特征大服务的七种特征 质量 异质性 复杂性 融合 客户关注 信誉 价值 大服务是顾客导向的，当它收到顾客的请求时，它根据需要创建组合的服务，将服务资源合并以满足服务任务的需求。同时，在用户的需求变更时，这些组合的服务也会进行相应的调整。 2.1.2. 大服务的参考架构三层架构： 本地服务 领域导向服务 需求导向服务 本地服务层中，使用服务封装和虚拟化，将基础服务设施封装成服务。这些封装后的原子性服务和组合的服务，可以通过服务链进行互连和整合，然后运行在云平台上。 领域导向服务层中，根据不同领域的业务需求和实际业务关系，将本地服务整合成更强大的组合服务。 需求导向服务中，服务方案是面向顾客，价值驱动的，因为用户的需求是因人而异，个性化的。 2.1.3. 大服务研究主题 系统架构 复杂服务建模和表现 新服务工程和方法论范式 服务组合和写作 服务价值模型和转换 上下文相关的服务构成和交付 服务智能推荐 服务可靠性和可信度]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[1997-安娜·卡列尼娜]]></title>
      <url>%2F2016%2F12%2F02%2F1997-%E5%AE%89%E5%A8%9C%C2%B7%E5%8D%A1%E5%88%97%E5%B0%BC%E5%A8%9C%2F</url>
      <content type="text"><![CDATA[死时还未懂得爱的真谛，那就比死亡本身更可怕了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[说谎的女人-苏菲·玛索]]></title>
      <url>%2F2016%2F12%2F01%2F%E8%AF%B4%E8%B0%8E%E7%9A%84%E5%A5%B3%E4%BA%BA-%E8%8B%8F%E8%8F%B2%C2%B7%E7%8E%9B%E7%B4%A2%2F</url>
      <content type="text"><![CDATA[我是撒谎大王。撒的谎天衣无缝。时不时的，一天几次，事先想好或者不假思索，出于本能或不顾羞耻，我瞪着又圆又亮的眼睛撒谎。 他们说话，是免得冷场；冷场，就不自在，像烈酒流过喉咙，烧灼胸口。 回忆，傲慢而固执，紧拽不放，在我拥抱男友的半秒钟里闪回，我的心都揪紧了。 生活现在自行行进。像带轮子的布景，经过同样的街角，同样的广场，同样的教室，同样的花园。车轮上足了油，我毋需费什么力，所该惋惜的，是错过了人生的驿站。 各人有各人的生活，各人都自成一格又独一无二。最终都是一个零，都是孤立无援的伟大的零。 你走之前，碰了哪个插头，什么都开不亮。 守护神我尽量躲着，不去理会。能溜则溜，能逃则逃。然而，一旦生活拽住我，我就摇身一变，只是真相自会显现。我不喜欢讲自己`这是我最大的谎言，也是我最妙的秘密。 一个人即使撒谎，一写下来，还是暴露了自己。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2011-萤火之森]]></title>
      <url>%2F2016%2F12%2F01%2F2011-%E8%90%A4%E7%81%AB%E4%B9%8B%E6%A3%AE%2F</url>
      <content type="text"><![CDATA[我啊，已经等不及夏天的到来了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2010-遭遇陌生人]]></title>
      <url>%2F2016%2F11%2F29%2F2010-%E9%81%AD%E9%81%87%E9%99%8C%E7%94%9F%E4%BA%BA%2F</url>
      <content type="text"><![CDATA[喧嚣和躁动的生活]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[1980-初吻]]></title>
      <url>%2F2016%2F11%2F26%2F1980-%E5%88%9D%E5%90%BB%2F</url>
      <content type="text"><![CDATA[苏菲玛索]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[安德的游戏-奥森·斯科特·卡德]]></title>
      <url>%2F2016%2F11%2F26%2F%E5%AE%89%E5%BE%B7%E7%9A%84%E6%B8%B8%E6%88%8F-%E5%A5%A5%E6%A3%AE%C2%B7%E6%96%AF%E7%A7%91%E7%89%B9%C2%B7%E5%8D%A1%E5%BE%B7%2F</url>
      <content type="text"><![CDATA[你年轻，聪明，而且不计后果。这就是你出生的目的。 我痛苦地过了一生，一旦没有痛苦，我就不知道自己是谁。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[命令行传输文件]]></title>
      <url>%2F2016%2F11%2F25%2F%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[scp在linux下一般用scp这个命令来通过ssh传输文件。 1、从服务器上下载文件123scp username@servername:/path/filename /var/www/local_dir（本地目录） 例如scp root@192.168.0.101:/var/www/test.txt 把192.168.0.101上的/var/www/test.txt 的文件下载到/var/www/local_dir（本地目录） 2、上传本地文件到服务器123scp /path/filename username@servername:/path 例如scp /var/www/test.php root@192.168.0.101:/var/www/ 把本机/var/www/目录下的test.php文件上传到192.168.0.101这台服务器上的/var/www/目录中 3、从服务器下载整个目录123scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）例如:scp -r root@192.168.0.101:/var/www/test /var/www/ 4、上传目录到服务器123scp -r local_dir username@servername:remote_dir例如：scp -r test root@192.168.0.101:/var/www/ 把当前目录下的test目录上传到服务器的/var/www/ 目录]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ubuntu下mongodb安装使用]]></title>
      <url>%2F2016%2F11%2F24%2Fubuntu%E4%B8%8Bmongodb%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[官网链接 Ubuntu16的systemd启动服务在/lib/systemd/system/mongod.serviceMongoDB数据存储在 /var/lib/mongodb日志文件在 /var/log/mongodb配置文件在 /etc/mongod.conf security开启认证在/etc/mongod.conf中增加12security: authorization: enabled 增加用户 提示: shell下登陆后切换到对应的db进行auth, 在哪个db创建的用户就在哪个db进行authshow usersdb.authdb.createUserdb.dropUser 登陆mongo dbName -u username -p password othersmongod 后台启动 mongod --fork --syslog]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[seafile-搭建私人网盘]]></title>
      <url>%2F2016%2F11%2F23%2Fseafile-%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98%2F</url>
      <content type="text"><![CDATA[官网下载 搭建教程]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ubuntu下安装chromium]]></title>
      <url>%2F2016%2F11%2F14%2Fubuntu%E4%B8%8B%E5%AE%89%E8%A3%85chromium%2F</url>
      <content type="text"><![CDATA[chromium下载chromium从github上下载这几个脚本放置在/usr/local/src/目录下 运行./update.sh此时将最新版本的chromium下载到了/usr/local/src/chromium-latest-linux/latest目录下 设置别名vi ~/.bashrc在最后添加alias chromium=&#39;/usr/local/src/chromium-latest-linux/run.sh&#39; 这时在终端中输入chromium即可打开chromium浏览器 更新chromium只需要再运行chromium-latest-linux目录下的update.sh脚本就可以了 更改desktop下的chromium~/.local/share/applications下找chromium-browser.desktop文件, 看其中的参数是否和安装的run.sh中的参数相同 flash下载adobe flash从flash 官网下载合适版本的flash解压到/usr/local/src/chromium-latest-linux/flash目录下将其中的libpepflashplayer.so复制到/usr/local/src/chromium-latest-linux/latest目录下 启用flash修改run.sh, vi ./run.sh将其中的$BASEDIR/latest/chrome --user-data-dir=&quot;$BASEDIR/user-data-dir&quot; $* &amp;&gt; /dev/null &amp;改为$BASEDIR/latest/chrome --ppapi-flash-path=&quot;$BASEDIR/latest/libpepflashplayer.so&quot; --user-data-dir=&quot;$BASEDIR/user-data-dir&quot; $* &amp;&gt; /dev/null &amp; 打开chromium, 进入chrome://plugins, 找到Adobe Flash Player, 点击允许始终运行]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[计网实验准备]]></title>
      <url>%2F2016%2F11%2F08%2F%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E5%87%86%E5%A4%87%2F</url>
      <content type="text"><![CDATA[实验目的(1)按照图 4-1 所示,将网络设备用适当的线路连接好,注意 console 控制线和双绞线不要混淆。(2)通过“超级终端”软件连接到路由器或交换机的控制口,进入 IOS 系统。初步了解 IOS 系统特性,为路由器或交换机配置名称、密码等,启用 telnet 服务,使以后的配置可以通过 telnet 方式进行。(3)通过 telnet 方式进入 IOS 的 CLI 配置界面,分别对三台网络设置进行适当的配置,使局域网的四台计算机可以互相 ping 通。 实验说明 本次实验划分了4个子网，分别为192.168.1.0/24, 2.2.2.0/24, 1.1.1.0/24, 202.118.232.0/24 PC1, PC2, PC3, PC4均处于单独的冲突域中，因为它们都通过网络设备(交换机和三层交换机)隔开了，只有共享介质的设备(通过集线器连接)才处于同一冲突域。 PC1和PC2在同一广播域，因为他们通过二层交换机相连，处于同一子网。PC3和PC4分别在单独的广播域中，因为他们处于不同的子网。 直通线和交叉线的区别直通线，两端线序一样。交叉线，一端为直通线的线序，另一端为白绿，绿，白橙，蓝，白蓝，橙，白棕，棕。同种类型设备之间使用交叉线连接, 不同类型设备使用直通连接. http://www.360doc.com/content/10/0910/18/3266301_52693210.shtml telnet 和超级终端通过telnet设置交换机是通过网络登录交换机，也叫带内管理，要求先配置交换机能登录及你电脑能通过网络连接访问到交换机。通过超级终端配置是电脑com口连接交换机console设置，不需要通过网络连接，故叫带外管理。通常初始设置要通过超级终端设置，设置好了后就可以通过telnet设置了。 vlan创建vlan(检查配置 show vlan)12345678910111213141516171819202122232425# vlan database // 建立vlan(vlan)# vlan vlan-num name vlan-name // 给vlan命名, 编号为vlan-num, 名称为vlan-name(vlan)# exit// # no vlan vlan-num // 删除vlan 20// 进入接口, 为接口分配vlan# configure terminal(config)# interface interfaceName module/number // (config)# interface fastEthernet 0/0 // 进入接口快速以太网0槽位的0号端口(config-if)# switchport mode access // 设置端口为access 模式, 交换机的端口模式分为access, trunk, multi模式, 默认情况是access模式.(config-if)# switchport access vlan vlan-num // 将端口分配给vlan-num对应的vlan// (config-if)# switchport access vlan 2 // 将端口映射到 Vlan 2// # show interface f0/0 // 查看快速以太网0/0端口的信息(config-if)# end# configure terminal(config)#interface range fastEthernet 0/6-10 // 选择接口0模块的6-10模块(config-if)# switchport mode access // 将交换机端口模式设置为access模式(config-if)# swtichport access vlan 10 // 将0模块的6-10端口划分为vlan10(config-if)# exit# configure terminal(config)# interface fastEthernet 0/11-15(config-if)# switchport mode access(config-if)# switchport access vlan 20(config-if)# exit no switchport(把物理端口变成三层口, 即把三层口当成路由器上的口, 当将一个端口配置成三层端口之后, 就可以在此端口上分配IP地址了)123456# configure terminal(config)# interface gigabitethernet 0/2(config-if)# no switchport(config-if)# ip address 192.20.135.21 255.255.255.0 // 配置ip地址(config-if)# no shutdown // 激活接口(config-if)# end show interfaces [interface-id] switchport // 显示二层端口的状态, 可以用来决定此口是否为二层或三层口# show interfaces fastethernet 0/1 swtichport 在三层交换机上开启路由功能123456# configure terminal(config)# ip routing // 开启路由# configure terminal(config)# ip route 192.168.0.0 255.255.255.0 192.168.1.252 // 设置子网掩码,网关(config)# ip route 0.0.0.0 0.0.0.0 202.118.232.254 // 设置缺省路由]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JS-for-in遍历和prototype]]></title>
      <url>%2F2016%2F11%2F04%2FJS-for-in%E9%81%8D%E5%8E%86%E5%92%8Cprototype%2F</url>
      <content type="text"><![CDATA[for (let i in arr) 会将原型链上面的属性也一一遍历所以在这时候修改 Array.prototype如 Array.prototype.top = () =&gt; {...} 则i会遍历到top属性 = = 被这个略坑了一把 以后要注意不要扩展内置类型的原型, 或者for in 遍历时使用hasOwnProperty 进行筛选 MDN-属性的可枚举性和所有权]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[修改next主题]]></title>
      <url>%2F2016%2F11%2F02%2F%E4%BF%AE%E6%94%B9next%E4%B8%BB%E9%A2%98%2F</url>
      <content type="text"><![CDATA[自定义css下面目录是为自定义css 文件准备 themes/next/source/css/_custom/ 自定义js1234567891011121314151617181920$ cd themes/next/layout/_scripts$ mkdir myscript$ touch myscript/myscript.swig$ vi myscript/myscript.swig添加 &lt;script type="text/javascript" src="/js/src/beim/test.js"&gt;&lt;/script&gt;$ vi themes/next/layout/_layout.swig添加 &#123;% include '_scripts/myscript/myscript.swig' %&#125;$ cd themes/next/source/js/src$ makir beim$ touch beim/test.js$ vi beim/test.js添加 console.log('HELO')]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[服务学概论-笔记]]></title>
      <url>%2F2016%2F11%2F02%2F%E6%9C%8D%E5%8A%A1%E5%AD%A6%E6%A6%82%E8%AE%BA-%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[服务学考试准备第一章 现代服务产业与服务学服务业四大领域：基础服务，生产服务，生活服务，公共服务 现代服务业的发展趋势：服务外包，服务聚合，服务虚拟化-EaaS，SoLoMo 社会化，位置化，移动化 服务的概念 对IT使能服务的理解 服务的六个侧面 服务的分类 服务的特性：不可分离性，不可贮存性，异构性，无形性 需求与能力不匹配： 策略1：根据需求调整能力 策略2：根据能力引导和调整需求，使需求适应企业的产能 服务科学，服务管理，服务工程 第二章 服务工程方法论及服务建模服务系统 服务系统的九大组成要素（顾客-目标-输入-输出-过程-人力使能者-物理使能者-信息使能者-环境） IBM 认为的服务系统构成要素：三大要素：人-技术-共享信息服务系统的要素：服务参与者-服务资源-服务信息-服务交互行为 系统的生命周期 服务工程核心：服务方法论。 SOA 服务方法论 模型驱动的服务方法论 （SDMA 的服务模型） 基于领域工程的服务方法论 语义驱动的服务方法论 服务创新 (带栗子); 常见的服务创新模式；服务创新四要素 典型的服务模型 服务蓝图描述的业务范畴（商务服务）服务蓝图模型；服务蓝图的建模过程 SOA 模型描述的业务范畴（计算服务）基于SOA 的软件服务建模方法WSDL : Web 服务描述语言OWL-S：Web 服务的本体语言服务组合 (WS-CDL;Web 服务编舞描述语言)服务编排（BPEL（4WS）面向Web 服务的过程建模语言） BPMN(业务流程建模标注) 建模方法描述的业务范畴（商务服务和计算服务之间）流对象-连接对象-泳道-描述对象/器物 第三章 服务组合与服务构件服务要素的分类 服务构件；服务构件的分类；常用的服务构件类型 Web Service WS-HumanTask(BPEL4People) REST 表述性状态转移 SCA 服务构件体系结构 SDO 服务数据对象 Web 服务资源 Web resource 服务构件的描述 (OWL-S: 用本体来描述Web 服务的标记语言； 基于OWL-S 的服务描述的作用) Web 服务协议等级（WSLA） 服务组合方法（服务发现-服务选择-服务组合） 第四章 服务系统体系结构及质量评价服务系统体系结构（设计一个服务系统需要关注：。。。）服务系统体系结构设计核心问题（将多个小粒度构件连接在一起，做到高效的交换信息和控制）传统的三个实现方式（RPC，ORB，异步消息传递） 服务集成成熟度模型（SIMM） 面向服务的体系结构SOASOA 的应用目标（对应4个层次）基本体系结构模式（发布-访问；适配器；远程服务策略；服务集成器；企业服务总线ESB）SOA 的多层架构 CAP 理论（CP和AP） 服务的交付渠道 服务质量；服务质量的特征（过程质量，产出质量）；服务质量的维度；服务质量产生差距的原因；服务质量SERVQUAL理论: Servqual = 实际感受 - 期望 服务级协议（SLA） SOA 服务系统的质量评价（几个指标） 第五章 服务学新进展服务工程研究热点 软件服务工程新范型：RE2SEP SMDA：模型驱动的服务体系结构与系统构建 服务语义模型 服务计算及其新进展 第六章 服务学应用案例携程网服务案例分析 海运物流服务案例分析 现代服务产业与服务学什么是现代服务业 基础服务 (通信服务和信息服务) 生产服务 (制造服务, 产品服务, 物流, 金融等) 生活服务 (医疗\保健, 教育, 旅游, 住宿) 公共服务 (政府的公共管理服务, 基础教育, 公共卫生) 现代服务业的发展趋势 服务外包 (将非核心的业务外包出去) 服务聚合 (将分散的,相互独立的服务整合在一起, 形成新的服务, 创造新的服务价值.)(例如: 百度地图, 优酷, 淘宝, 百度)BIRIS 模式(Bilateral Resource Integrated Service)一种基于第三方的双边顾客资源整合的服务聚合创新模式 服务虚拟化, 万物皆服务(EaaS)(将实体服务变为虚拟服务, 例如: 云计算) 遗存系统(legacy system)适配器(接口)Human as a Service 社会化, 位置化移动化(SOLOMO, Social, Local, Mobile, 社交 + 位置化/本地化 + 移动)(例如: 微信, 支付宝, 微博)SoLoMo + 娱乐 =&gt; 改写社交SoLoMo + O2O =&gt; 改写零售 服务案例案例: 物流服务第一方物流/第二方物流(产商, 客户)第三方物流(顺丰, 申通)第四方物流(菜鸟物流) 案例: 航空售票服务机票直销机票代售点第三方代理商(携程: 客户-航空公司)第四方代理商(去哪儿: 客户-第三方/代售点) 中航信 案例: 呼叫中心服务专家:有高技能的人守在电话旁(1970)工具: 接线员无需高技能, 使用FAQ手册(1980)市场: 低成本外包(在印度建立呼叫中心)(2000)Automate(2010) 案例: 商品零售服务小卖店百货商店连锁店大型连锁超市 案例: 在线信息共享服务论坛BBS博客微博微信 服务外包企业案例: 印度Bangalore 的服务外包基础操作的外包服务中断技能型的外包服务(人力资源, 财务外包)高端智力型外包服务(研发设计, 数据挖掘) 企业服务案例: IBM的IT服务管理从销售大型服务器, 硬件设备, 软件产品的IT厂商转变为全球最大的IT服务提供商 服务聚合企业案例: 携程网机票车票酒店门票 服务聚合企业案例: COSCO(中国远洋物流有限公司) (中国最大的第三方物流企业) 海运物流 EaaS企业案例: 亚马逊从用户书评中挖掘信息开放API, 允许处理用户,收藏列表和购物车, 允许对亚马逊产品目录主要产品的访问, 其他公司或者个人的应用系统可以直接调用Amazon API云基础设施服务, Amazon EC2, S3, SQS EaaS企业案例: Rolls-Royce的 TotalCare卖产品-&gt; 卖服务 EaaS企业案例: 健康医疗保健服务监控 - 评估 - 规划 - 治疗 SoLoMo企业案例: SNS社交网络服务人人网微信知乎 SoLoMo企业案例: 基于位置的服务LBSLBSFoursquare 街旁 在哪等待 SoLoMo企业案例: 情境感知的服务通过传感器采集服务对象的情境信息根据情境信息判断对象的状态, 提供响应的服务 SoLoMo企业案例: 面向云服务交付的移动应用典型代表: 云手机(阿里, 华为), 用友移动mERP SoLoMo企业案例: LBS+购物信息推送美团, 大众点评 SoLoMo企业案例: 地铁虚拟货架 SoLoMo企业案例: SNS+电子商务服务微商 服务的概念, 特征与分类服务概念Philip Kotler: 服务是一方向另一方提供的任意活动或好处. 它是不可触知的, 不形成所有权问题, 其生产可能与物质产品有关, 也可能无关. ISO 9004-2: 服务是为满足客户需要, 供方与顾客接触的活动和供方内部活动所产生的结果 其他: 服务是供应商与客户协同工作以转换某对象(如商品, 信息)的状态, 这些客户具有某种隶属关系. 其他: 服务是一种客户直接参与其中作为合作生产者的时间易逝性的无形体验.(水杯是产品, 水杯可供人喝水是服务) 服务: 一种促进顾客发生”改变” 的过程, 这种”改变” 包括物理的和无形的占有物的状态改善 “IT使能业务服务” 常用服务运作模型和计费模式来刻画. 服务的内涵: 顾客, 提供者(可能是人, 软件, 资源等) 价值(有形的(产品, 信息, 金钱, 资源等), 无形的(经验, 知识, 享受, 影响力等)) 协同生产(复制的交互过程) 服务的特性: 无形性, 生产消费同步性, 非储存性, 差异性 服务的表示: 服务运作模型(如何完成), 计费模型(服务如何收费) 对IT使能(IT化)的理解: 过程的封装栗子: B2B服务: 买方卖方, B2B平台之间的交互, 完成电子商务功能和过程;Web Service: 客户端与服务器端程序之间的交互 服务内在特征: 多方之间 交互 实现各自目标 付出代价 服务的六个侧面组织-行为-技术-信息-价值-质量 服务提供者和顾客之间的关系 顾客参与服务过程 协同创造价值 服务质量取决于顾客的需求,期望和感受 服务的分类模式按照以下方式进行分类 服务过程(按照劳力密集程度, 交互性/客户化的程度 两个维度来划分)(服务工厂(航空,旅馆), 服务商店(医院,汽车维修), 大规模服务(零售业, 学校), 职业化服务(IT,医生,律师)) 服务行为的本质(按照服务行为的本质(有形,无形), 服务的接受者(人, 事物) 两个维度划分) 服务提供者与顾客之间的关系(客户关系的类型(会员,非会员), 服务交互的类型(离散的, 连续的)) 服务的可提供性(服务地点的数目(单一地点, 多地点), 客户与服务提供者之间交互所发生的地点(客户移动(宾馆), 提供者移动(网约车), 在客户可达范围内(手机信号))) 服务需求的可变性(需求波动情况(大,小), 服务能力的限制(高峰需求时无延迟, 高峰需求时超过能力)) 服务交付的方式(定制化程度(高, 低), 服务雇员能力的重要性(高,低)) 服务自动化的程度(谁来做(人/工具), 完成程度(全部,部分)) !服务的特性 不可分离性(生产与消费同时进行)(服务无法被存储)(无法通过库存来解决需求波动问题)(在消费之前无法进行质量控制) 不可贮存性(任何服务能力如果不被使用,那么它将无法再使用)(服务无法存储,所以当服务能力不足时,提供者将失去机会)(春节期间快递行业的困扰, 服务能力不足)(策略1: 根据需求调整能力(提高快递工人工资水平,招收更多快递工人, 或共享产能:如顺丰和EMS工人共享), 策略2: 通过能力引导需求(改变用户购物习惯, 尽量将春节的购物需求引导到春节前后, 提高商品价格或提高快递价格)) 异构性(从顾客的角度看, 服务有很大不同)(服务的个性化-&gt;异构性)(不同顾客所感知到的服务质量都是不同的) 无形性(服务没有具体的物质存在形式)(顾客通常需要借助服务提供者的名声和对其的信任来预测服务质量,进而做出选择)(规则和法律使服务质量达到标准) 为了进行质量控制, 要追求标准化, 又和异构性产生冲突, 怎么解决? 基于服务本质特征的服务分类(服务本质特征: 服务提供者, 顾客, 交互, 价值目标) 人工服务(人来执行的服务) 软件服务(自动化软件来执行的服务) 复合服务(二者结合在一起的服务) 服务接触的三种类型 服务组织支配的服务接触() 与顾客接触的员工支配的服务接触(医院-医生-病人) 顾客支配的服务接触(自助服务) 排队系统的基本特征 服务学概述服务科学, 管理与工程(SSME)SSME (Service Science, Management and Engineering): 服务科学, 管理与工程, 将科学, 管理, 工程相关学科知识应用与服务领域的一门新的交叉学科, 后在中国被称为服务学(Serviceology) 目标: 改善服务及服务系统 方式: 改善服务在生产率, 质量, 性能, 增长点, 创新等方面的可预测性与可调控性 服务学三大组成部分 服务科学(SS)(分析现实服务世界的现象,数据, 转换为知识) 服务工程(SE)(将知识解决实际服务问题, 创造价值) 服务管理(SM)(监视与分析创造服务价值的过程, 对服务进行有效管理优化和改善, 使其进一步增值.) 服务科学(Service Science)研究对象: 现实世界中有关服务的现象、数据与信息(即服务系统)。 目的: 建立一套严格、完备、理论化的服务模型及其理论，从各类服务系统中抽象出其内在、本质的规律，使服务提供者和需求者能深入理解和认识服务，并采用科学的方法来指导服务系统的设计、构建与运作。 服务管理(Service Management)应用服务科学的相关理论、模型和方法，研究服务系统的运作机制及管理方法，改善服务质量，提高顾客的体验与满意度。 服务工程(Service Engineering)运用服务科学相关理论和知识，面向服务生命周期，描述和定义、设计、建立、实施、运行维护和动态重构服务系统，并提供相关服务系统支撑工具和平台/环境，进而创造服务价值。 软件服务工程及其学科范畴服务工程相关内容 服务开发方法 服务发布与运作方法 服务计算 软件服务工程的知识体系 服务体系结构与设计 服务使能技术 服务业务分析 服务管理 服务应用实践 服务工程与服务计算 微观层面的分布式计算 宏观层面的商务计算 服务计算知识体系 服务与服务系统 服务技术 服务咨询与提交 服务解决方案与管理 服务计算与服务工程的关系(前者为后者提供业务, IT个层面服务系统的实现技术; 后者为前者提供了系统工程方法论上的支持) 服务工程方法论及服务建模服务系统及生命周期系统是指将零散的东西进行有序的整理,编排形成的具有整体性的整体–百度百科 系统的九大组成要素 顾客 目标 输入 (系统要处理的各类物理,人,经济或信息的实体) 输出 (系统处理之后形成的各类物理,人或信息的实体) 过程 (从输入到输出的转换) 人力使能者 (拥有或操作系统的人) 物理使能者 (协助系统运行的物理资源) 信息使能者 (支持系统的信息或知识资源) 环境 (对系统产生影响的各类因素) IBM 对服务系统构成要素的观点(在不同服务系统中三种占比有所不同) 人 技术 共享信息 服务系统的要素 服务参与者(包括顾客,服务提供者等)(服务参与者具有特定的价值需求, 掌握特定的服务资源, 可发出服务行为, 通过信息共享完成服务)(参与者可分为: 顾客,提供者,使能者) 服务资源(软件,硬件或设备, 资源的能力, 服务环境)(是被动参与服务的各类支持性资源(Enabling Resources)，具备特定的能力(Capability)，在服务主体的控制下可向外提供特定的行为(Behavior)。)(产品型资源, 独占型资源, 共享型资源, 可复用资源, 消耗型资源) 服务信息(刻画了服务交互行为过程中被创造或采集的各类信息(Shared Information)，并在服务参与者之间、资源与参与者之间相互传递和使用。)(分为资源类信息(如航线信息, 报价信息)和 指令类信息(如海运物流中的订单)) 服务交互行为(交互过程, 活动与动作) 服务价值网(service value network)(描述服务参与者之间价值交换关系的有向网络结构) 节点(表示服务参与者) 有向边(表示参与者之间的价值交换关系及其方向) 边的内容(被交换的价值(产品, 知识, 金钱, 经验, 市场影响等)) 服务价值网中的价值交换模式(直达顾客模式DCP)(外包链模式OCP)(聚合/聚集模式MAP) BlockChain(区块链) 软件系统的声明周期用户提出需求- 需求分析- 系统设计- 系统开发- 测试- 软件实施- 软件运行- 软件维护- 软件报废 服务系统的狭义生命周期从系统运行的角度:服务价值的生命周期 双方找寻 双方协商 单方准备 协同生产 传递 使用 支付 服务工程与方法论系统工程与服务工程软件工程–系统工程的具体化在’软件工程’基础上的服务工程 服务工程核心–服务方法论 服务工程方法论要素 服务模型 服务建模方法 服务系统构建方法 服务性能评价 支撑工具与平台 服务系统实施指南 服务模型作用 表示服务与模型映射 沟通交流与协同设计 主要研究内容: 图形化表示规范, 多视图模型之间的关系 形式化模型语义描述及语义约束 数学化模型优化 业务过程管理 BPM(Business Process Management) 服务建模方法服务系统构建典型的服务系统构建方法 自顶向下 自底向上 基于领域工程的服务构建方法 服务质量与性能评价相关支持工具和平台服务系统实施指南一: SOA服务方法论面向服务的系统方法论 SOA服务方法论栗子: SOMA方法论(识别 ,设计和实现服务, 用来支持服务的构建, 服务组合以及服务间的协同) 遗存系统(遗留系统) legacy system‘烟囱’系统集成中间件P2P服务api 二: 模型驱动的服务方法论 OMG(Object Management Group)对象管理组织软件领域的: MDA(Model Driven architecture)模型驱动体系结构 服务领域中有: 计算模型无关模型(CIM) 平台独立模型(PIM) 平台相关模型(PSM) 可执行服务系统(基于IT平台的服务系统) Model TransformationMeta-ModelADM(与MDA相反, 具体到抽象)通过模型驱动的理论构造一个服务系统-论文-Ateret Anaby-Tavor, David Amid, Aviad Sela, Amit Fisher, Kuo Zhang, Ou Tie Jun. Towards a Model Driven Service Engineering Process. 2008 IEEE Congress on Services 2008 - Part I. 三: 基于领域工程的服务方法论(开发某领域的服务系统时可能已经存在大量可复用的’服务构件’, 通过自底向上的方式对’服务构件’进行复用) 可配置的服务工程方法论-论文-Jörg Becker, Daniel Beverungen, Ralf Knackstedt, Martin Matzner. Configurative Service Engineering - A Rule-Based Configuration Approach for Versatile Service Processes in Corrective Maintenance. Proceedings of the 42nd Hawaii International Conference on System Sciences - 2009. 四: 语义驱动的服务方法论 Ontology本体语言语义网络知识图谱 服务模式与服务创新服务创新 激进式创新 渐进式创新 服务模式定义服务的业务与价值目标；标识参与服务的各参与者类型(顾客、提供者、使能者)；定义多参与者间进行价值协同生产与价值分配的机制；定义多参与者间的控制流、信息流与价值流。 社会化分工: 服务外包 服务聚合: 聚合模式 Web2.0: 众包模式 服务虚拟化: EaaS 服务网络化与自组织: 物联网IoT/ 务联网IoS 云服务: 深度和广泛的’虚拟化’ Dubbox(alibaba taoba的服务框架) 基于模式的服务创新 京东白条 服务创新的基本四要素：管理学视角 目标市场(客户是谁) 服务概念(提供什么独特价值) 运作策略(如何实现价值) 服务传递系统(如何将价值交付给客户) 服务创新的四维度模型 新服务概念 (服务创新首先是一个市场驱动的“服务概念化创新”) 新顾客界面 (顾客界面设计：在服务提供给顾客的方式以及与顾客间交流、合作方式等方面进行创新。) 新服务传递系统 (服务传递系统：主要指生产和传递新服务产品的组织。侧重与服务企业内部组织安排, 通过合理安排, 确保员工有效完成工作) 技术选择 (服务创新的一个可选维度; 通过使用某些新技术使服务更为高效) 服务模型与建模方法模型是对系统中某些理论和现象的图解性描述, 并通过一组变量以及作用在这组变量之上的逻辑或数量关系来描绘其已知的或推测性质的特性，也用于深入研究它们的特点。 服务模型的核心内容：从各个不同的侧面来描述服务系统要素（人、资源、信息、组织、环境等）、服务过程中顾客与服务提供者之间的协同交互过程(co-production process)。 从建模体系角度看服务模型的分类 按照服务模型所描述服务的不同侧面(视图)进行分类：过程模型、组织模型、资源模型、信息模型、价值模型、知识模型等。不同的服务视图分别从某一视角关注服务，模型形态相对简单和清晰，通过视图之间的语义关联将它们形成整体。 按照服务模型所起到作用进行分类：指导服务创新与设计的模型、描述服务需求的模型、指导服务系统设计与开发的模型、指导服务部署与实施的模型等。战略层模型、战术层模型、操作性模型、技术层模型等。 按照服务模型的形态进行分类：图形化模型，用于帮助服务设计人员之间的沟通和理解；形式化模型，用于软件工具支持下的服务分析与验证，例如一致性、完备性、正确性、性能等。 服务模型应具有的描述能力 提供者与顾客之间的交互 私有与开放 实体化与虚拟化 耦合与解耦 组合与协同 (组合: 描述复杂服务内部的执行步骤以及这些步骤间的关系；)(协同: 描述多个组织或服务之间通过交互完成复杂服务的过程。) 价值目标与约束 质量与性能 原子服务(ATOM Service) 服务模型规范 服务蓝图(Service Blueprint) 结构化服务模型(SADT Model) Web服务描述语言(WSDL) 面向服务的本体Web语言(OWL-S) 业务流程执行语言(BPEL) Web服务编舞语言(WS-CDL) 业务过程建模标注(BPMN) Web服务建模本体(WSMO) 服务蓝图(Blueprint)组成 (服务蓝图用3条线分为4个部分，分别是：顾客行为、前台接触员工行为、后台接触员工行为以及支持过程。) 服务蓝图的5个区域 顾客行为 前台员工行为 后台员工行为 支持过程 服务有形展示 服务蓝图的三条分界线 交互线 (表示顾客与组织间直接的互动。一条穿过交互分界线的垂直线表明顾客与组织间直接发生接触或一个服务接触产生。 ) 可见线 (把顾客能看到的服务行为与看不到的分开，把服务人员在前台与后台所做的工作分开。) 内部互动线 (用以区分服务人员的工作和其他支持服务的工作和工作人员，穿过内部互动线的垂直线表示发生的内部服务接触。 ) 服务蓝图的要素 结构要素 (定义了服务传递系统的整体规划) 管理要素 (明确服务接触的标准和要求, 规定了合理的服务水平、绩效评估指标、服务品质要素等。) 服务蓝图 借助于流程图，通过分解服务组织系统和架构，鉴别用户与服务人员以及服务体系内部的服务接触点； 在服务流程分析基础上描述服务传递的各方面，将服务提供过程、员工和顾客的角色和服务的有形证据直观地展示出来； 经过服务蓝图的描述，服务被合理地分解成服务提供的步骤、任务和方法，使服务提供过程中所涉及的人都能客观地理解和处理它。 服务蓝图的建模过程 识别需要制定蓝图的服务过程 识别顾客(细分顾客)对服务的经历 从顾客角度描绘服务过程 描绘前台与后台服务雇员的行为 把顾客行为、服务人员行为与支持功能相连 在每个顾客行为步骤加上有形展示 考试- 建模题 end 168 基于SOA的软件服务建模方法基本服务：WSDL(Web Service Description Language) - Web服务描述语言 XML WSDL元素：基于XML语法描述了与服务进行交互的基本元素 WSDL： Web服务描述文档结构 OWL-S(Ontology Web Language for Services)： Web服务的本体语言三个组件： ServiceProfile：描述服务的功能，即这个服务是做什么的。服务搜寻代理通过ServiceProfile实现服务匹配，寻找到满足服务请求者需求的Web Service； ServiceModel：描述服务是怎么做的，即服务的具体实现细节； ServiceGrounding：描述怎样访问服务。 服务组合（Orchestration)服务编排（Orchestration）(Composition = Orchestration)：将多个小粒度的Web服务按照特定的业务逻辑规则构造为一个可执行的业务过程；同时又可看作是一个大粒度的复合Web服务。 使用已有的服务来构造新的服务； 服务由某个组织所拥有，并具有中心控制调度功能。 用于服务编排的建模方法：BPEL(4WS) BPEL（Business Process Execution Language）：业务流程执行语言，是一种使用XML编写的用于自动化业务流程的编程语言。 BPEL4WS（BPEL for Web Services）：面向Web服务的过程建模语言。 服务编排的运行模式 集中式执行引擎 基于Hub的分布式引擎 无Hub的分布式引擎 服务协同（Choreography）服务协同(Choreography)(Collaboration ≈ Choreography)：将多个零散的、分别由多方提供的服务/业务流程按照彼此之间的协同关系组织起来，支持多方的交互行为。 侧重于不同服务之间的消息传递的次序与规则，以保证期望的协同行为。 无需完全由一个组织所拥有；也无需中心控制； 服务协同模式的分类 链式协同模式 嵌套协同模式 同步协同模式 BPMN(业务流程建模标注)建模方法业务流程建模标注法（BPMN, Business Process Modeling Notation）：是对象管理组织OMG/业务流程管理倡议组织BPMI开发的关于业务流程建模的行业性标准。它创建在与UML活动图相似的流程图法基础上，为特定业务流程提供了一套图形化标注法。 BPMN四种要素： 流对象(事件(Events)、活动(Activities)、网关(Getways)) 连接对象(顺序流(Sequence Flow)、消息流(Message Flow)、关联(Association)) 泳道(池(Pool)、道(Lane)) 描述对象/器物(数据对象(Data Object)、组(Group)、注释(Annotation)) 服务组合与服务构件服务构件两类服务要素：可IT化，不可IT化 可被IT化的服务要素（通过web提供相应的服务行为）（具有WSDL接口描述的web services）（SCA构件）（数据库）（遗留系统legacy system） 不可或很难被IT化为软件的服务要素（人员）（硬件）（环境：会议室，呼叫中心）（行为：面对面培训，货物运输） 非软件服务要素的虚拟化 (需要虚拟化的非软件服务要素: 人力资源及其能力, 环境, 硬件支撑设施, 软件职称设备, 人工完成的服务行为与交互过程) 服务构件(Service Component) 将服务要素统一封装为服务构件 可被重复使用的,用来构造服务系统的基本单元. 具有一系列特定的接口和描述 常见的服务构件类型: 软件服务 Web Services 人工服务 WS-HumanTask 表述性状态转移 REST (REpresentational State Transfer) 服务构建 SCA (Service Component Architecture) 数据对象 SDO (Service Data Object) 服务资源 WS-Resource SDO(Service Data Object) 服务数据对象； 用于简化和统一应用程序处理数据方式。 数据对象(Data Object) 数据图(Data Graph) 元数据(Meta Data) 数据中介服务(Data Mediator Service) Web服务资源WS-ResourceWeb Service 无状态Web服务资源(WS-Resource)： 对于一个有状态资源（数据库，物理资源等）和它与之交互的Web服务的组合 服务组合方法服务发现 根据服务请求进行服务发现的描述 一句服务匹配算法进行服务查找和服务匹配 进行服务选择与排序 确定最佳服务 服务发现的方法 语法级发现 语义级发现 服务选择 广义的服务选择: 通常被看做与’服务发现’等价 狭义的服务选择: 在满足需求的多个候选服务中, 选择出满足度最高的服务 服务组合将已有的服务组合为一个新服务的过程, 以增加服务的可复用性, 功能和性能. 服务组合的价值在于服务重用, 以解决更复杂的问题, 使服务得到增值. 服务组合三个阶段: 规划阶段: 发现候选服务, 检测其服务组合的可行性与一致性, 并提供多个候选服务的组合规划 定义阶段: 在候选服务组合规划中选择并生成实际的服务组合结构, 并提供一个服务组合的语义规范 实施阶段: 根据服务组合规范来绑定组合的服务, 使这些服务能够协同工作以满足相应的任务或功能. 静态组合vs动态组合 ERPCRM 服务系统体系结构及开发方法服务体系结构设计核心问题: 如何将多个小粒度构件连接在一起,彼此高效交换信息和控制 面向服务的体系结构SOA 发布-访问机制（发布，发现，绑定和调用） 适配器 远程服务策略（可与段绑定服务接口；客户端通过‘service registry’访问服务； 客户端通过‘service broker’动态决定访问哪个服务 服务集成器 企业服务总线（整合应用和服务的基础架构，支持服务，服务组合和服务协同） ESB(Enterprise Service Bus)企业服务总线 SOA Layers 遗存系统 企业功能构建层 服务层 业务过程层（服务组合与协同层） 访问层（表现层） 集成（ESB） 服务质量（QoS） 内容分发网络(CDN) CAP理论 Consistency 一致性(任何一个读操作总是能读取到之前完成的写操作结果，也就是在分布式环境中，多点的数据是一致的；) Availability 可用性(每一个操作总是能够在确定的时间内返回，也就是系统随时都是可用的；) Tolerance of Network Partition 分区容忍性(在出现网络分区的情况下，分离的系统也能正常运行；) 对于分布式存储系统而言，分区容错性(P)是基本需求，只有CP和AP两种模式的选择。CP模式AP模式 服务交付渠道 前端界面简化： 固化为产品型态“客户端微件Widget”，强调可用性（Usability）； 后台流程标准化： 强调效率和交付质量 服务质量评价 产品质量； 服务质量 服务质量的两个方面 过程质量 产出质量 服务质量的维度 可靠性(可靠地、准确地履行服务承诺的能力。) 快速相应性(帮助顾客并迅速提供服务愿望。) 保证性(服务人员的友好态度、所需的技能和知识，以增强顾客对企业服务质量的信心感。) 移情性(设身处地为顾客着想，把每一位顾客当作独特、重要的个人，给予个性化的服务。) 有形性(有形的设施、设备、人员的外表。) 可访问性 礼貌，沟通 可信性 安全性 理解性(正确理解用户的个性化需求。) 服务质量差距 (top-down) 预期的质量 感受的质量 实现的质量 表现的质量 定义的质量 理解的质量 SERVQUAL]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[红城堡-渡边淳一]]></title>
      <url>%2F2016%2F11%2F01%2F%E7%BA%A2%E5%9F%8E%E5%A0%A1-%E6%B8%A1%E8%BE%B9%E6%B7%B3%E4%B8%80%2F</url>
      <content type="text"><![CDATA[爱与性都没有的时候 豆瓣读书]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[富士山禁恋-松本清张]]></title>
      <url>%2F2016%2F11%2F01%2F%E5%AF%8C%E5%A3%AB%E5%B1%B1%E7%A6%81%E6%81%8B-%E6%9D%BE%E6%9C%AC%E6%B8%85%E5%BC%A0%2F</url>
      <content type="text"><![CDATA[面对注定绝望的爱情, 我们又能怎么办 豆瓣读书]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2013-蓝色茉莉]]></title>
      <url>%2F2016%2F11%2F01%2F2013-%E8%93%9D%E8%89%B2%E8%8C%89%E8%8E%89%2F</url>
      <content type="text"><![CDATA[看到服务员了吗, 我还想要杯斯特利*马提尼]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[note-Beej-Network-Programming]]></title>
      <url>%2F2016%2F10%2F20%2Fnote-Beej-Network-Programming%2F</url>
      <content type="text"><![CDATA[Intro What is a socket?“Stream Sockets” and “Datagram Sockets” , which may be referred to as SOCK_STRAM and SOCK_DGRAMDatagram sockets are sometimes called “connectionless sockets”. (Though they can be connect()‘d if you really want) IP Addresses, structs, and Data Munging(转换)ipv6ipv6, 128 bits, Lots of times with lots of zeros in it, and can be compressed between two colons.For instance:1234567891011122001:0db8:c9d2:0012:0000:0000:0000:00512001:db8:c9d2:12::512001:0db8:ab00:0000:0000:0000:0000:00002001:db8:ab00::# It's loopback address, It always means "this machine I'm running on now"0000:0000:0000:0000:0000:0000:0000:0001::1# there's an ipv4-compatibility mode for ipv6 addresses::ffff:192.0.2.33 subnets1234567891011192.0.2.12 AND 255.255.255.0=&gt;192.0.2.0 (255.255.255.0)# or192.0.2.12/24# for ipv62001:db8::/32or2001:db8:5413:4028::9db9/64 Byte OrderTwo byte orderings: Big-Endian, Little-EndianIf you want to represent thw two-byte hex number, say b34f, you’ll store it:Big-Endian : b34fLittle-Endian: 4fb312345`Network Byte Order` =&gt; `Big-Endian Order``Host Byte Order` =&gt; `Little-Endian Order` (Intel or Intel-compatible processor) =&gt; `Big-Endian` These function will do the magic conversion between Network Byte Order and Host Byte Order htons() host to network short (two bytes) htonl() host to network long (four bytes) ntohs() network to host short ntohl() network to host long structsocket descriptor =&gt; int struct addrinfo . It’s used to prep the socket address structures for subsequent use. It’s also used in host name lookups, and service name lookups.1234567891011struct addrinfo &#123; int ai_flags; // AI_PASSIVE, AI_CANONNAME, etc. int ai_family; // AF_INET, AF_INET6, AF_UNSPEC int ai_socktype; // SOCK_STREAM, SOCK_DGRAM int ai_protocol; // use 0 for "any" size_t ai_addrlen; // size of ai_addr in bytes struct sockaddr *ai_addr; // struct sockaddr_in or _in6 char *ai_canonname; // full canonical hostname struct addrinfo *ai_next; // linked list, next node&#125;; You’ll load this struct up a bit, and then call getaddrinfo(). It’ll return a pointer to a new linked list of these structures filled out with all the goodies you need; struct sockaddr1234struct sockaddr &#123; unsigned short sa_family; // address family, AF_xxx char sa_data[14]; // 14 bytes of protocol address&#125;; sa_family can be a variety of things, but it’ll be AF_INET(ipv4) or AF_INET6(ipv6) in this document.sa_data contains a destination address and port number for the socket.This is rather unwieldy since you don’t want to tediously pack the address in the sa_data by hand.To deal with this, programmers created a parallel structure: struct sockaddr_in(‘in’ for ‘internet’) to be used with ipv4 And this is the important bit: a pointer to a struct sockaddr_in can be cast to a pointer to a struct sockaddr and vice-versa. So even though connect() wants a struct sockaddr*, you can still use a struct sockaddr_in and cast it at the last minute struct sockaddr_in12345678// (IPv4 only--see struct sockaddr_in6 for IPv6)struct sockaddr_in &#123; short int sin_family; // Address family, AF_INET unsigned short int sin_port; // Port number struct in_addr sin_addr; // Internet address unsigned char sin_zero[8]; // Same size as struct sockaddr, It's included to pad the structure to the length of `struct sockaddr`&#125;; sin_zero shouled be set to all zeros with the function memset()sin_family corresponds to sa_family in a struct sockaddr and should be set to AF_INETsin_port must be in Network Byte Order (by using htons()) sin_addr is a struct in_addr123456// (IPv4 only--see struct in6_addr for IPv6)// Internet address (a structure for historical reasons)struct in_addr &#123; uint32_t s_addr; // that's a 32-bit int (4 bytes)&#125;; So if you have declared ina to be of type struct sockaddr_in then ina.sin_addr.s_addr references the 4-byte IP address(in Network Byte Order). What about ipv6, see sockaddr_in612345678910111213// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)struct sockaddr_in6 &#123; u_int16_t sin6_family; // address family, AF_INET6 u_int16_t sin6_port; // port number, Network Byte Order u_int32_t sin6_flowinfo; // IPv6 flow information struct in6_addr sin6_addr; // IPv6 address u_int32_t sin6_scope_id; // Scope ID&#125;;struct in6_addr &#123; unsigned char s6_addr[16]; // IPv6 address&#125;; struct sockaddr_storage 12345678struct sockaddr_storage &#123; sa_family_t ss_family; // address family // all this is padding, implementation specific, ignore it: char __ss_pad1[_SS_PAD1SIZE]; int64_t __ss_align; char __ss_pad2[_SS_PAD2SIZE];&#125;; struct sockaddr_storage is designed to be large enough to hold both ipv4 and ipv6 structures. So you can pass this parallel structure to some calls and then cast it to the type you need; You can see the addrees family ss_family field - check this to see if it’s AF_INET or AF_INET6, Then you can cast it to a struct sockaddr_in or struct sockaddr_in6 if you wanna. IP Addressesif you want to convert 10.12.110.57 to sa.sin_addruse inet_pton(), which converts IP address in numbers-and-dots notation into either a struct in_addr or struct in6_addr depending on whether you specify AF_INET or AF_INET6 (pton stands for presentation to network - you can call it printable to network.)12345struct sockaddr_in sa; // IPv4struct sockaddr_in6 sa6; // IPv6inet_pton(AF_INET, "10.12.110.57", &amp;(sa.sin_addr)); // IPv4inet_pton(AF_INET6, "2001:db8:63b3:1::3490", &amp;(sa6.sin6_addr)); // IPv6 (the old way of doing things used a function called inet_addr() or another function called inet_aton() these are now absolete and don’t work with ipv6) if you want to convert sa.sin_addr to 10.12.110.57use init_ntop()(means network to presentation, or network to printable) , like this:123456789101112131415161718// IPv4:char ip4[INET_ADDRSTRLEN]; // space to hold the IPv4 stringstruct sockaddr_in sa; // pretend this is loaded with somethinginet_ntop(AF_INET, &amp;(sa.sin_addr), ip4, INET_ADDRSTRLEN);printf("The IPv4 address is: %s\n", ip4);// IPv6:char ip6[INET6_ADDRSTRLEN]; // space to hold the IPv6 stringstruct sockaddr_in6 sa6; // pretend this is loaded with somethinginet_ntop(AF_INET6, &amp;(sa6.sin6_addr), ip6, INET6_ADDRSTRLEN);printf("The address is: %s\n", ip6); When you call it, you will pass the address type (ipv4 or ipv6), the address, a pointer to a string to hold the result, and the maximum length of that string. (Two macros conveniently hold the size of the string : INET_ADDRSTRLEN and INET6_ADDRSTRLEN) (the old way of doing things: called inet_ntoa(), it’s also absolete and won’t work with ipv6) NOTE: These functions only work with numeric IP addresses - they won’t do any nameserver DNS lookup on a hostname, like ‘www.example.com’. You will use getaddrinfo() to do that. Private (Or Disconnected ) Networksipv4: 10.x.x.x 192.168.x.x 172.y.x.x x is 0-255 y is 16-31ipv6: fsxx: (or maybe in the future fcXX:), as per RFC 4193 Jumping from ipv4 to ipv6Beej’s Guide System Calls or Bustgetaddrinfo() ; Prepare to launchIt helps set up the structs you need later on. HISTORY: it used to be that you would use a function called gethostbyname() to do DNS lookups. Then you’d load that information by hand into a struct sockaddr_in, and use that in calls. This is no longer necessary, you now have the function getaddrinfo() that does all kinds of good stuff for you, including DNS and service name lookups, and fills out the structs you need, besides! 12345678#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;netdb.h&gt;int getaddrinfo(const char *node, // e.g. "www.example.com" or IP const char *service, // e.g. "http" or port number const struct addrinfo *hints, struct addrinfo **res); You give this function three input parameters, and it gives you a pointer to a linked-list, res, of result. The parameter service can be a port number, like “80”, or the name of a particular service (found in THE IANA Port List or the /etc/services file) like “http” or “ftp” or whatever. The hints parameter points to a struct addrinfo that you’ve already filled out with relevant information. Here’s a sample call if you’re a server who wants to listen on your host’s IP address, port 3490. 12345678910111213141516171819int status;struct addrinfo hints;struct addrinfo *servinfo; // will point to the resultsmemset(&amp;hints, 0, sizeof hints); // make sure the struct is emptyhints.ai_family = AF_UNSPEC; // don't care IPv4 or IPv6, you can set it to AF_INET or AF_INET6 if you want one or the other specifically.hints.ai_socktype = SOCK_STREAM; // TCP stream socketshints.ai_flags = AI_PASSIVE; // fill in my IP for meif ((status = getaddrinfo(NULL, "3490", &amp;hints, &amp;servinfo)) != 0) &#123; fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(status)); exit(1);&#125;// servinfo now points to a linked list of 1 or more struct addrinfos// ... do everything until you don't need servinfo anymore ....freeaddrinfo(servinfo); // free the linked-list The AI_PASSIVE flag tells getaddrinfo() to assign the address of my local host to the socket structures. (Or you can put a specific address in as the first parameter to getaddrinfo() where I currently have NULL, up there) If there’s an error (getaddrinfo() returns non-zero), we can print it out using the funciont gai_strerrr(). If everything works properly, servinfo will point to a linked list of struct addrinfos, each of which contains a struct sockaddr of some kind that we can use later! Finally, when we’re all done with the linked list that getaddrinfo() allocated for us, we should free it all up with a call to freeaddrinfo() Here’s sample call if you’re a client who wants to connect to a particular server, say “www.example.net” port 3490.1234567891011121314int status;struct addrinfo hints;struct addrinfo *servinfo; // will point to the resultsmemset(&amp;hints, 0, sizeof hints); // make sure the struct is emptyhints.ai_family = AF_UNSPEC; // don't care IPv4 or IPv6hints.ai_socktype = SOCK_STREAM; // TCP stream sockets// get ready to connectstatus = getaddrinfo("www.example.net", "3490", &amp;hints, &amp;servinfo);// servinfo now points to a linked list of 1 or more struct addrinfos// etc. I keep saying that servinfo is a linked list with all kinds of address information.Here is a demo to show off this information. The short program will print the IP address for whatever host you specified on the command line. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/*** showip.c -- show IP addresses for a host given on the command line*/#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;netdb.h&gt;#include &lt;arpa/inet.h&gt;#include &lt;netinet/in.h&gt;int main(int argc, char *argv[])&#123; struct addrinfo hints, *res, *p; int status; char ipstr[INET6_ADDRSTRLEN]; if (argc != 2) &#123; fprintf(stderr,"usage: showip hostname\n"); return 1; &#125; memset(&amp;hints, 0, sizeof hints); hints.ai_family = AF_UNSPEC; // AF_INET or AF_INET6 to force version hints.ai_socktype = SOCK_STREAM; if ((status = getaddrinfo(argv[1], NULL, &amp;hints, &amp;res)) != 0) &#123; fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(status)); return 2; &#125; printf("IP addresses for %s:\n\n", argv[1]); for(p = res;p != NULL; p = p-&gt;ai_next) &#123; void *addr; char *ipver; // get the pointer to the address itself, // different fields in IPv4 and IPv6: if (p-&gt;ai_family == AF_INET) &#123; // IPv4 struct sockaddr_in *ipv4 = (struct sockaddr_in *)p-&gt;ai_addr; addr = &amp;(ipv4-&gt;sin_addr); ipver = "IPv4"; &#125; else &#123; // IPv6 struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p-&gt;ai_addr; addr = &amp;(ipv6-&gt;sin6_addr); ipver = "IPv6"; &#125; // convert the IP to a string and print it: inet_ntop(p-&gt;ai_family, addr, ipstr, sizeof ipstr); printf(" %s: %s\n", ipver, ipstr); &#125; freeaddrinfo(res); // free the linked list return 0;&#125; Sample run!12345678910$ showip www.example.netIP addresses for www.example.net: IPv4: 192.0.2.88$ showip ipv6.example.comIP addresses for ipv6.example.com: IPv4: 192.0.2.101 IPv6: 2001:db8:8c00:22::171 socket() ; Get the File Descriptor12345#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;// arguments: ipv4 or ipv6, stream or datagram, and tcp or udpint socket(int domain, int type, int protocol); It used to be people would hardcode these values, and you can absolutely still do that.(domain is PF_INET or PF_INET6, type is SOCK_STREAM or SOCK_DGRAM, and protocol can be set to 0 to choose the proper protocol for the given type. Or you can call getprotobyname() to look up the protocol you want, “tcp” or “udp”) (This PF_INET thing is a close relative of the AF_INET, But the most correct thing to do is to use AF_INET in your struct sockaddr_in and PF_INET in your call to socket()) What you really want to do is use the values from the results of the call to getaddrinfo(), and feed them into socket() directly like this. 12345678910111213int s;struct addrinfo hints, *res;// do the lookup// [pretend we already filled out the "hints" struct]getaddrinfo("www.example.com", "http", &amp;hints, &amp;res);// [again, you should do error-checking on getaddrinfo(), and walk// the "res" linked list looking for valid entries instead of just// assuming the first one is good (like many of these examples do.)// See the section on client/server for real examples.]s = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol); socket() simply returns to you a socket discriptor that you can use in later system calls, or -1 on error. bind() ; What port am I on ?Associate the socket with a port on your local machine. If you’re going to only be doing a connect(), this is probably be unnecessary. 12345678#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;int bind(int sockfd, struct sockaddr *my_addr, int addrlen);// `sockfd` is the socket file descriptor returned by socket(). // `my_addr` is a pointer to a `struct sockaddr` that contains information about your address, namely, port and IP address.// `addrlen` is the length in bytes of that address. Let’s have an example that binds the socket to the host the program is running on, port 3490: 12345678910111213141516171819struct addrinfo hints, *res;int sockfd;// first, load up address structs with getaddrinfo():memset(&amp;hints, 0, sizeof hints);hints.ai_family = AF_UNSPEC; // use IPv4 or IPv6, whicheverhints.ai_socktype = SOCK_STREAM;hints.ai_flags = AI_PASSIVE; // fill in my IP for megetaddrinfo(NULL, "3490", &amp;hints, &amp;res);// make a socket:sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);// bind it to the port we passed in to getaddrinfo():bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen); By using the AI_PASSIVE flag, I’m telling the program to bind to the IP of the host it’s running on. If you want to bind to a specific local IP address, drop the AI_PASSIVE and put an IP address in for the first argument to getaddrinfo(). bind() also returns -1 on error and sets errno to the error’s value. Lots of old code manually packs the struct sockaddr_in before calling bind(). This is ipv4-specified. The old code looks like this:12345678910111213// !!! THIS IS THE OLD WAY !!!int sockfd;struct sockaddr_in my_addr;sockfd = socket(PF_INET, SOCK_STREAM, 0);my_addr.sin_family = AF_INET;my_addr.sin_port = htons(MYPORT); // short, network byte ordermy_addr.sin_addr.s_addr = inet_addr("10.12.110.57");memset(my_addr.sin_zero, '\0', sizeof my_addr.sin_zero);bind(sockfd, (struct sockaddr *)&amp;my_addr, sizeof my_addr); In the above code, you could also assign INADDR_ANY to the s_addr field if you want to bind to your local IP address (like the AI_PASSIVE flag, above.) The ipv6 version of INADDR_ANY is a global variable in6addr_any that is assigned into the sin6_addr field of your struct sockadd_in6. (There is also a macro IN6ADDR_ANY_INIT that you can use in a variable initializer.) Sometimes you try to return a server and bind() fails, claiming “Address already in use”. It’s because a little bit of a socket that was connected is still hanging around in the kernel, and it’s hogging the port. You can either wait for it to clear (a minute or so), or add code to your program allowing it to reuse the port, like this: 123456789101112// int setsockopt(int sockfd, int level, int optname,// const void *optval, socklen_t optlen);int yes=1;//char yes='1'; // Solaris people use this// lose the pesky "Address already in use" error messageif (setsockopt(listener,SOL_SOCKET,SO_REUSEADDR,&amp;yes,sizeof yes) == -1) &#123; perror("setsockopt"); exit(1);&#125; // then bind... connect() – Hey you!The connect() call is as follows:123456789#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;int connect(int sockfd, struct sockaddr *serv_addr, int addrlen); // `sockfd` is socket file descriptor, as returned by the socket() call.// `serv_addr` is a `struct sockaddr` containing the destination port and IP address// `addrlen` is the length in bytes of the server address structure// All of this information can be gleaned from the results of the **getaddrinfo()** call Here is an example where we make a socket connection to “www.example.com”, port 3490123456789101112131415161718struct addrinfo hints, *res;int sockfd;// first, load up address structs with getaddrinfo():memset(&amp;hints, 0, sizeof hints);hints.ai_family = AF_UNSPEC;hints.ai_socktype = SOCK_STREAM;getaddrinfo("www.example.com", "3490", &amp;hints, &amp;res);// make a socket:sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol);// connect!connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen); OLD WAY: Old programs filled out their own struct sockaddr_in to pass to connect(). connect() will return -1 on error and set the variable errno listen() - Will somebody please call me?123456int listen(int sockfd, int backlog); // `sockfd` is the socket file descriptor from the **socket()** system call.// `backlog` is the number of connections allowed on the imcoming queue.// Incoming connections are going to wait in this queue until you **accept()** them, and this is the limit on how many can queue up.// Most systems silently limit this number to about 20; you can probably get away with setting it to 5 or 10. listen() returns -1 and sets errno on error We need to call bind() before we call listen() so that the server is running on a specific port.The sequence of system calls you’ll make is:12345getaddrinfo();socket();bind();listen();/* accept() goes here */ accept() - Thank you for calling port 3490Someone far far away will try to connect() to your machine on a port that you are listen()ing on. Their connection will be queued up waiting to be accept()ed. You call accept() and you tell it to get the pending connection. It’ll return to you a brand new socket file descriptor to use for this single connection!. The original one is still listening for more new connections, and the newly created one is finally ready to send() and recv(). 1234567#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); // `sockfd` is the listen()ing socket descriptor.// `addr` will usually be a pointer to a local `struct sockaddr_storage` example:1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#define MYPORT "3490" // the port users will be connecting to#define BACKLOG 10 // how many pending connections queue will holdint main(void)&#123; struct sockaddr_storage their_addr; socklen_t addr_size; struct addrinfo hints, *res; int sockfd, new_fd; // !! don't forget your error checking for these calls !! // first, load up address structs with getaddrinfo(): memset(&amp;hints, 0, sizeof hints); hints.ai_family = AF_UNSPEC; // use IPv4 or IPv6, whichever hints.ai_socktype = SOCK_STREAM; hints.ai_flags = AI_PASSIVE; // fill in my IP for me getaddrinfo(NULL, MYPORT, &amp;hints, &amp;res); // make a socket, bind it, and listen on it: sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol); bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen); listen(sockfd, BACKLOG); // now accept an incoming connection: addr_size = sizeof their_addr; new_fd = accept(sockfd, (struct sockaddr *)&amp;their_addr, &amp;addr_size); // ready to communicate on socket descriptor new_fd! . . . send() and recv()send() call:12345// *sockfd* is the socket descriptor you want to send data to;// *msg* is a pointer to the data you want to send;// *len* is the length of that data in bytes;// just set flags to 0; see man page for more information concerning flagsint send(int sockfd, const void *msg, int len, int flags); sample code:12345678910char *msg = "Beej was here!";int len, bytes_sent;```len = strlen(msg);bytes_sent = send(sockfd, msg, len, 0);``` send() returns the numbers of bytes actually sent out – this might be less than the number you told it to send! Because sometimes it just can’t handle it. -1 is returned on error, and errno is set to the error number. recv() call:12345// *sockfd* is the socket descriptor to read from// *buf* is the buffer to read the information into// *len* is the maximum length of the buffer// *flags* can again be set to 0int recv(int sockfd, void *buf, int len, int flags); recv() returns the number of bytes actually read into the buffer, of -1 on error (with errno set, accordingly.)recv() can return 0. This can mean the remote side has closed the connection on you! my code use send and recvserver12345678910111213141516171819202122232425262728293031323334353637#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;netdb.h&gt;#define MYPORT "3490"#define BACKLOG 10int main(void)&#123; struct addrinfo hints, *res; memset(&amp;hints, 0, sizeof hints); hints.ai_family = AF_UNSPEC; hints.ai_socktype = SOCK_STREAM; hints.ai_flags = AI_PASSIVE; getaddrinfo(NULL, MYPORT, &amp;hints, &amp;res); int sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol); bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen); listen(sockfd, BACKLOG); struct sockaddr_storage their_addr; socklen_t addr_size = sizeof their_addr; int new_fd = accept(sockfd, (struct sockaddr *)&amp;their_addr, &amp;addr_size); printf("haha someone connect me\n"); int max_size = 1000; char buf[max_size]; int resno = recv(new_fd, buf, max_size, 0); if (resno &lt; 0) &#123; printf("error: %s\n", buf); &#125; else &#123; printf("receive %s\n", buf); &#125;&#125; client:1234567891011121314151617181920212223242526#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;netdb.h&gt;int main()&#123; struct addrinfo hints, *res; memset(&amp;hints, 0, sizeof hints); hints.ai_family = AF_UNSPEC; hints.ai_socktype = SOCK_STREAM; getaddrinfo("localhost", "3490", &amp;hints, &amp;res); int sockfd = socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protocol); int connected = connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen); char *msg = "hi im beim lalala"; int sended = send(sockfd, msg, strlen(msg), 0); if (sended &gt; 0) &#123; printf("sended %d bytes\n", sended); &#125; else &#123; printf("send error\n"); &#125;&#125; sendto() and recvfrom()sendto()1234// *to* is a pointer to a struct sockaddr (which will probably be another struct sockadr_in or struct sockaddr_in6 or struct sockaddr_storage that you cast at the last minute) which contains the destination IP address and port.// *tolen* an int deep-down, can simply be set to sizeof *to or sizeof(struct sockaddr_storage)int sendto(int sockfd, const void *msg, int len, unsigned int flags, const struct sockaddr *to, socklen_t tolen); send() returns the number of bytes actually sent, or -1 on error. recvfrom()1234// *from* is a pointer to a local struct sockaddr_storage that will be filled with the IP address and port of the originating machine// *fromlen* is a pointer to a local int that should be initialized to sizeof *from or sizeof(struct sockaddr_storage)int recvfrom(int sockfd, void *buf, int len, unsigned int flags, struct sockaddr *from, int *fromlen); recvfrom() returns the number of bytes received, or -1 on error. Remember, if you connect() a datagram socket, you can then simply use send() and recv() for all your transactions. The socket itself is still a datagram socket and the packets still use UDP, but the socket interface will automatically add the destination and source information for you. close() and shutdown()close():1close(sockfd); This will prevent any more reads and writes to the socket. Anyone attemping to read or write the socket on the remote end will receive an error. If you want to control over how the socket closes, you can use shutdown() function:1int shutdown(int sockfd, int how); sockfd is the socket file descriptor you want to shudown, and how is one of the following 0 Further receives are disallowed 1 Further sends are disallowed 2 Further sends and receives are disallowed(like close()) shutdown() returns 0 on success, and -1 on error. If you deign to use shutdown() on unconnected datagram sockets, it will simply make the socket unavailable for further send() and recv() calls.(remember that you can use these if you connect() your datagram socket) Is’s important to note that shutdown() doesn’t actually close the file descriptor, it just changes its usability. To free a socket descriptor, you need to use close(). getpeername()The function will tell you who is at the other end of a connected stream socket.123#include &lt;sys/socket.h&gt;int getpeername(int sockfd, struct sockaddr *addr, int *addrlen); sockfd is the descriptor of the connected stream socket, addr is a pointer to a struct sockaddr (or a struct sockaddr_in) that will hold the information about the other side of the connection, and addrlen is a pointer to an int, that should be initialized to sizeof *addr or sizeof(struct sockaddr). The function returns -1 on error and sets errno accordingly. Once you have their address, you can use inet_ntop(), getnameinfo(), or gethostbyaddr() to print or get more information. No, you can’t get their login name. gethostname()The function returns the name of the computer that your program is running on. The name can then be used by gethostbyname(), below, to determine the IP address of your local machine. 123#include &lt;unistd.h&gt;int gethostname(char *hostname, size_t size); The arguments are simple: hostname is a pointer to an array of chars that will contain the hostname upon the function’s return, and size is the length in bytes of the hostname array. The function returns 0 on successful completion, and -1 on error, setting errno as usual.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[cpp-makefile体验]]></title>
      <url>%2F2016%2F10%2F18%2Fcpp-makefile%E4%BD%93%E9%AA%8C%2F</url>
      <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061~/usr/temp/test-makefile$ ldir1/ makefile o/ test.cpp test.hpp~/usr/temp/test-makefile$ cat test.cpp#include "test.hpp"using namespace std;int main() &#123; int x(3); int y(5); int c; c = calculate(x, y); cout &lt;&lt; c &lt;&lt; endl;&#125;~/usr/temp/test-makefile$ cat test.hpp#include &lt;iostream&gt;#include "./dir1/test1.hpp"~/usr/temp/test-makefile$ l dir1test1.cpp test1.hpp~/usr/temp/test-makefile$ cat dir1/test1.cpp#include "test1.hpp"int calculate(int const&amp; a, int const&amp; b) &#123; int c; c = a + b; return c;&#125;~/usr/temp/test-makefile$ cat dir1/test1.hpp #include &lt;iostream&gt;int calculate(int const&amp; a, int const&amp; b);~/usr/temp/test-makefile$ l o/~/usr/temp/test-makefile$ cat makefilemycplusplus: test.o test1.o g++ o/test1.o o/test.o -o mycplusplustest1.o : dir1/test1.cpp g++ -c dir1/test1.cpp -o o/test1.otest.o : test.cpp g++ -c test.cpp -o o/test.o~/usr/temp/test-makefile$ makeg++ -c test.cpp -o o/test.og++ -c dir1/test1.cpp -o o/test1.og++ o/test1.o o/test.o -o mycplusplus~/usr/temp/test-makefile$ ldir1/ makefile mycplusplus* o/ test.cpp test.hpp~/usr/temp/test-makefile$ ./mycplusplus 8~/usr/temp/test-makefile$ l o/test1.o test.o 参考CSDN]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2016-收藏]]></title>
      <url>%2F2016%2F10%2F15%2F2016-%E6%94%B6%E8%97%8F%2F</url>
      <content type="text"><![CDATA[语言相关Node koa-router-static - npm - 和koa-router 兼容的koa-static wechat for koa - github Writing Native Node.js Modules - Node.js at Scale Experimenting With async/await in Node.js 7 Nightly Node.js at Scale - npm Best Practices 体验异步的终极解决方案-ES7的Async/Await Nodejs 编写API 客户端 JavaScript You Dont’t Know JS - github JavaScript 闯关记-掘金 C C语言typedef 的用法 - 博客园- Stephen Blaha对typedef用法做过一个总结：“建立一个类型别名的方法很简单，在传统的变量声明表达式里用类型名替代变量名，然后把关键字typedef加在该语句的开头 C++ C++11 lambda介绍 JSON库教程 - 知乎专栏 C++数据结构 - 知乎专栏 值得推荐的C/C++框架和库—造轮子前先看看现有的轮子 像计算机科学家一样思考（C++版) Google 开源项目风格指南-C++ 风格指南 python cookbook - github 官方文档 - org 廖雪峰的网站 语言无关frontback mproxy - c 语言实现的一个最小的http代理，支持翻墙 python-http/https代理 tinyhttp tinyhttp - 带注释 - github tinyhttp - 博客园 network 双11背后的网络自动化技术 Journey to HTTP/2 - blog other 修改ubuntu 终端提示信息 12345678修改.bashrcif [ "$color_prompt" = yes ]; then # PS1='$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ ' PS1='\n$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\w\[\033[00m\]\n\$ 'else PS1='$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ 'fi zsh themes - themes zsh 介绍 - 知乎专栏 - 修改默认shell：chsh -s /usr/bin/zsh tar - tar 压缩命令详解 Next 主题 显示动画取消 - github - issues top - 每天一个linux命令 - 博客园 ttf-mscorefonts-installer - problem - ask ubuntu Linux Ubuntu中查看网卡信息的基础命令 - 博客园 163 ubuntu 镜像 ubuntu12 - docker - 云栖博客 Ubuntu 14.04 启用休眠 云栖社区 - Github - MySQL Hadoop MongoDB 大数据 机器学习 资料大全 虚拟机随谈（一）：解释器，树遍历解释器，基于栈与基于寄存器，大杂烩 手把手教你搭建ngrok服务－轻松外网调试本机站点 VISUALGO 可视化算法和数据结构 CodeTriage - 帮助开源项目 语言,算法,工具, 资源集合-github-One Click to Be Pro 各种方向资源集合- github- free-programming-books]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[cpp-宏编写技巧]]></title>
      <url>%2F2016%2F10%2F13%2Fcpp-%E5%AE%8F%E7%BC%96%E5%86%99%E6%8A%80%E5%B7%A7%2F</url>
      <content type="text"><![CDATA[如果宏里有多过一个语句(statement), 就需要用do {/…/} while(0) 包裹成单个语句, 否则会有如下问题 1234567891011#define M() a(); b()if (cond) M();else c();/* 预处理后 */if (cond) a(); b()else /* else 缺乏对应if */ c(); 只用{} 也不行: 1234567891011#define M() &#123; a(); b();&#125;if (cond) M();else c();/* 预处理后 */if (cond) &#123; a(); b(); &#125;; /* 最后的分号代表if 语句结束 */else /* else 缺乏对应if */ c(); 用 do while 就可以了 1234567891011#define M() do &#123; a(); b(); &#125; while(0)if (cond) M();else c();/* 预处理后 */if (cond) do &#123; a(); b(); &#125; while(0);else c();]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[设计模式笔记]]></title>
      <url>%2F2016%2F10%2F09%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[设计模式 Factory Method - Insurance工厂方法模式 优点: 工厂方法模式将创建对象的逻辑与任务交给了工厂类 工厂方法模式支持开闭原则 适用情况 创建某些类的对象的逻辑比较复杂,并且有很多条件分支, 而且还可能增加新的条件. 一个类不能预先准确的知道它必须创建一个层次类中的哪一个子类的对象 一个类适用它的子类决定所要创建的对象 需要封装创建类的对象的逻辑, 使得这些逻辑局部化. 简单工厂方法模式与工厂方法模式的区别: p15 AbstractFactory - House抽象工厂模式 符合开闭原则 和不符合开闭原则的情况: p22 1234567BuildingFactory(abstract)MediumBuildingFactor SuperBuildingFactorMediumHouse MediumCondo SuperHouse SuperCondoHouse&lt;interface&gt; Condo&lt;interface&gt; Adapter-CustomerInfo-check适配器模式 为了解决接口不一致的问题, 两个软件模块之间往往需要通过一个适配器类Adapter 进行适配, 这样的模式叫做适配器设计模式. 适用情况 当系统想要使用现有的类, 但是现有类的接口不符合系统需要时. 当需要通过创建一个可复用的类, 使得本来接口不相容并且无关的类结合在一起工作时. 在设计中需要改变多个子类接口, 在作用相同但名称不同的类或方法之间进行适配时. 两种模式 类适配器模式 对象适配器模式 和类适配器模式相同思路, 但是在Adapter 类中, 调用adaptee 的方法, 而不是继承adaptee 123CusInfoValidator&lt;interface&gt; InfoValidationInformationAdapter extends ... implements ... Bridge-AgentInfo桥接模式 桥接模式是指将抽象部分与它的实现部分分离, 使它们可以独立地变化.桥接模式强调对象有两个以上的维度变化, 简化多级集成关系, 但同时增加了聚合对象的内部方法, 因为它不得不多写方法以便包含它的类调用. 优点 分离接口和实现部分. 一个实现不必固定的绑定一个接口. 一个抽象类的实现可以在系统运行时进行配置, 一个对象甚至可以在运行时改变它的实现. 提高了可扩展性. 可以独立的对Abstraction 和Implementor 层次结构进行扩展 实现细节对客户的透明. 可以对客户隐藏实现细节. 1234567AgentInfo(abstract)EncryptedInfo1 EncryptedInfo2MessageWriter&lt;interface&gt;FileWriter DBWriter Facade-usrInfoValidation外观模式 用来隐藏一个软件系统的内部细节, 为一系列复杂的接口提供一个统一的接口, 使该系统更容易使用. 优点利用外观模式可以去掉子系统与客户程序之间的直接绑定, 从而提高子系统的独立性, 也降低 了客户程序与子程序的直接耦合度. 此外, 利用外观模式可以使系统层次化. 缺点对于那些不需要定制的用户来说, 例如一个熟练的程序员要写一些复杂的功能, 而外观类中没有这样的功能, 因此外观模式可能对它们没有帮助. 在这种情况下, 用户程序可以直接绕过外观模式, 而直接调用子系统类库. 适配器模式与外观模式的区别 适配器模式转换接口的目的是将一个不适合使用的接口转换为可以被使用的接口, 或者将一些接口不同而功能相同或者相近的接口加以转换, 以便可以被统一使用. 外观模式简化接口是为了更好地使用某个类库, 为一系列复杂的接口提供一个统一的接口 1234567CustomerFacade &#123; Account accountObj; CreditCard creditCardObj; Address addressObj;&#125;Account CreditCard Address Strategy-Sorting策略模式 下面定义了一系列的算法, 将每一个算法封装起来, 并且使它们之间可以相互替换. 策略模式让算法的变化不会影响到使用算法的客户. 优点 得到一系列可以复用的算法, 这些算法集成一个共同的抽象类, 因此共有的功能可以放到超类中. 将不同算法封装在不同的策略子类中, 使逻辑更加清晰, 各个算法可以独立地变化. 使功能改变或者扩展更容易. 缺点客户程序必须知道不同策略接口的各个子类的行为, 必须理解每个子类有哪些不同. 12345ContextSortAlgorithm&lt;interface&gt;InsertionSort QuickSort BubbleSort HeapSort State-BankAccount-typical-2状态模式 在面向对象设计中, 在依赖于状态的对象中, 对象的行为依赖于状态. 状态模式将不同状态下的行为封装在不同的类中, 每个类代表一个状态. 优点 因为状态相关的代码都被封装在各个状态子类中, 所以容易添加新的状态, 只需要定义并添加新的状态子类和新的状态变化关系即可. 有时其他的类也需要较少的修改. 将不同的状态封装成不同的类使得状态迁移很明确, 并且可以防止Context 类将状态弄混乱了 适用 当对象的行为依赖于状态, 对象要在运行时改变状态时使用状态模式 当操作带有大量依赖于状态的条件语句时使用该模式. 通常许多操作都含有相同的条件结构, 状态模式将条件结构的每个分支包装成独立分支的类, 使得在不同状态下的行为可以独立变化. 123BankContext &lt;-&gt; State(abstract)NoTransactionFeeState TransactionFeeState OverDrawnState Visitor-ComputerParts访问者模式 访问者模式在处理数据结构较稳定, 但是作用于其上的操作需要经常变化的问题是非常有效的. 访问者模式是指作用于一个对象结构体上的元素的操作. 访问者可以使用户在不改变该结构体的类的基础上定义一个新的操作. 优点 使得在访问者类中针对复杂类结构中的某个类添加新方法较为容易, 即只需要简单的添加一个新的访问者方法即可. 访问者将相关的方法集中在一个具体的访问者类中, 而将其他相关的方法集中在另外一个具体的访问者类中. 也就是说, 访问者子类是按照方法的类型来分类的. 缺点增加一个具体的新ConcreteElement 类比较困难. 因为此时需要在每个ConcreteVisitor 类中添加该ConcreteElement 类的访问方法.(所以其适合数据结构稳定的情况) 123456789CompositeStructureComputerPartsMemory VideoCard MonitorVisitorPriceVisitor PartsInfoVisitor Mediator-Tour-Hotel-Flight中介者模式 中介者模式将所有对象之间的交互细节抽象到一个独立的类中,对象之间的交互经由这个独立的类完成. 优点 所有对象的交互行为都被转入到一个独立的中介者对象中, 使得用户更容易通过中介者修改对象之间的相互关系行为. 当修改一个交互行为的时候, 可以通过修改或者更换其中一个具体的中介者子类来完成. 另外, 将对象的交互转移到一个专门的类中也提高了对象的可重用性. 因为对象之间不直接有交互, 使对象的单元测试更容易. 低耦合使得一个类的修改不会影响到其他的类. 123BusinessMediatorAirlineGUI HotelGUI TourGUI]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[dns相关的小实践]]></title>
      <url>%2F2016%2F10%2F07%2Fdns%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B0%8F%E5%AE%9E%E8%B7%B5%2F</url>
      <content type="text"><![CDATA[dig 命令可以跟踪dns 查询的路径.如dig www.baidu.com +trace ubuntu 系统下/etc/resolv.conf 配置文件, 用来设置DNS 服务器的IP 地址及DNS 域名, 还包含了主机的域名搜索顺序. 文件/etc/resolve.conf 内容如下:1234# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTENnameserver 127.0.0.1search lan 执行命令dig www.kicker.com.cn + trace 输出结果:1234567891011121314151617181920212223242526272829303132333435363738394041; &lt;&lt;&gt;&gt; DiG 9.10.3-P4-Ubuntu &lt;&lt;&gt;&gt; www.kicker.com.cn +trace;; global options: +cmd. 478606 IN NS b.root-servers.net.. 478606 IN NS k.root-servers.net.. 478606 IN NS e.root-servers.net.. 478606 IN NS f.root-servers.net.. 478606 IN NS c.root-servers.net.. 478606 IN NS l.root-servers.net.. 478606 IN NS m.root-servers.net.. 478606 IN NS a.root-servers.net.. 478606 IN NS g.root-servers.net.. 478606 IN NS j.root-servers.net.. 478606 IN NS d.root-servers.net.. 478606 IN NS i.root-servers.net.. 478606 IN NS h.root-servers.net.;; Received 239 bytes from 127.0.0.1#53(127.0.0.1) in 2 mscn. 172800 IN NS d.dns.cn.cn. 172800 IN NS a.dns.cn.cn. 172800 IN NS e.dns.cn.cn. 172800 IN NS c.dns.cn.cn. 172800 IN NS ns.cernet.net.cn. 172800 IN NS b.dns.cn.cn. 86400 IN DS 41470 8 2 3623FB6E3B1F69C6855DA1E48D3A38236DD2EDF0380FB018FF538650 EAC2C4DDcn. 86400 IN RRSIG DS 8 1 86400 20161020020000 20161007010000 39291 . A2tSyIt/guVEItqdJgKF7h765ACBXXhA6zQGVNfYYbpeupuDju37nXm5 Z44h9TlVa2RIkM9Jq8x0SMuH5cm1G4opXU1zHZgUvhC+1feGfEnZ26Py fXZ3hTBT+uNwU/gnRZgvEvfORwU4BNfjKyrHmk/tXKYcARXOMK9Nb3PA BBJ2vshXDn6quUtElmP3CktvXDzpC/7pT6HMgaBOYxWYxao9W0UsEDZQ cxWpXBu7Psj7a/11kMQGZNONU65P13e3QK8zlF6BMDZDMJH9tIBJF8v6 udnjKVx8bnkqJza//19PxtiSDf3KHvFKE7cH5sv0G1Zr3yMLNfG5/aTs qBlX+A==;; Received 644 bytes from 199.7.91.13#53(d.root-servers.net) in 370 mskicker.com.cn. 86400 IN NS ns.nagor.com.cn.kicker.com.cn. 86400 IN NS ns.nagor.cn.GICE14DNTMDN31G43AUGVRKTKALVB8QC.com.cn. 21600 IN NSEC3 1 1 10 AEF123AB MI2OUBFA49Q47917BR600DOL1QGRP79T NS SOA RRSIG DNSKEY NSEC3PARAMGICE14DNTMDN31G43AUGVRKTKALVB8QC.com.cn. 21600 IN RRSIG NSEC3 8 3 21600 20161020002013 20160920000126 15399 com.cn. jDuJAUMvAwNM3kPNu3bVyk1VMZInBfUKiD6/lutPeAjrudbIj7qFkTxM F164SK96QaYMWZMg7sHThlA9S5DoDE3rEh9vF01qcsg1pxA7+m9lDFSn Q0dQ8hU078oCPnH4JPzgB5obiSc2OmcgFml5vaIMiWT+Rpe9V3ZCkX7W z7Q=MI2OUBFA49Q47917BR600DOL1QGRP79T.com.cn. 21600 IN NSEC3 1 1 10 AEF123AB UQROTQK62NOIM5U43DMF7AMC8JJFRM7T TXT RRSIGMI2OUBFA49Q47917BR600DOL1QGRP79T.com.cn. 21600 IN RRSIG NSEC3 8 3 21600 20161019013404 20160919011226 15399 com.cn. Rw7vfPaOa+UB9TpAHniy3XOk8UcZFHo1w7Qlq0gjX/gBBQY1vUR10BeI x0kodMsNRkHkvjvWkHfxAu/A8rR0X4xOuJkYZGBnR0YYVnP/N3YGHoz3 C6QOM47dyogMIOg/zVpnYjubpaILGpNY5ddZaJLF2sKz9SvJ0NXCQIyg lGQ=;; Received 591 bytes from 203.119.25.1#53(a.dns.cn) in 22 mswww.kicker.com.cn. 600 IN A 192.161.49.88kicker.com.cn. 7200 IN NS ns1.dnsnw.com.kicker.com.cn. 7200 IN NS ns2.dnsnw.com.kicker.com.cn. 7200 IN NS ns.nagor.cn.kicker.com.cn. 7200 IN NS ns.nagor.com.cn.;; Received 159 bytes from 218.66.171.170#53(ns.nagor.com.cn) in 54 ms 解释一下过程 访问本地域名服务器(127.0.0.1)(16行), 获得根域名服务器的记录(.) 访问(.)的域名服务器, 获得(cn.)的记录 访问(cn.)的域名服务器, 获得(kicker.com.cn.) 的记录 访问(kicker.com.cn.) 的域名服务器, 获得(www.kicker.com.cn)的ip地址 A记录A记录（即地址记录，也称为主机记录）将一个网域关联到托管该网域服务的计算机的物理IP地址。 NS记录域名服务器(NS)记录用于确定哪些服务器为一个网域传达DNS信息。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[cpp-泛型算法参考]]></title>
      <url>%2F2016%2F10%2F06%2Fcpp-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95%E5%8F%82%E8%80%83%2F</url>
      <content type="text"><![CDATA[所有的泛型算法(generic algorithm), 除了极少数外, 前两个参数皆为一组iterator, 用来标示欲遍历的容器(container) 元素的范围. 范围系为[iterator1, iterator2) 123456const int array_size = 7;int iarray[array_size] = &#123;1, 10, 8, 4, 3, 14, 8&#125;;vector&lt;int&gt; vec(iarray, iarray + array_size);vector&lt;int&gt;::iterator it = find(vec.begin(), vec.end(), value);int *pi = find(iarray, iarray + array_size, value); 算法通常有重载的两个版本: 版本一使用底层元素所属类型的内置运算符, 包括equality 运算符和less-than 运算符. 版本二接受function object 或function pointer 的传入, 借此提供和内置运算符不同的行为.例如, 默认情形下, sort() 会使用less-than 来排序. 如果要改变这一行为, 我们可以传入预先定义好的greater function object: 12sort(vec.begin(), vec.end());sort(vec.begin(), vec.end(), greater&lt;int&gt; ()); 不过, 另有一些算法以不同的名称区分不同版本,形成两个函数; 以_if 为名称后缀的, 使用的是”可指定特定行为”的那个版本.许多会更改目标容器之内容的算法, 都提供两种版本: 一种称为in-place (就地) 版本, 会改变容器的内容. 另一种称为copy 版本, 不改变传入容器的内容, 而是先为它制作一份副本, 再改变副本的内容, 然后返回该副本. 如下array, vector, list 被用来作为下文所列泛型算法的函数参数: 1234567int ia[8] = &#123;1, 3, 6, 10, 15, 21, 28, 36&#125;;vector&lt;int&gt; ivec(ia, ia + 8);list&lt;int&gt; ilist(ia, ia + 8);string sa[10] = &#123;"The", "light", "untonsured", "hair", "grained", "and", "hued", "like", "pale", "oak"&#125;;vector&lt;string&gt; svec(sa, sa + 10);list&lt;string&gt; slist(sa, sa + 10); accumulate() 元素累加默认情形下, 它会将容器内的所有元素相加, 再加上第三个参数所指定的初值. 也可以借由传入一个二元运算, 取代默认的”相加”操作. 1234#include &lt;numeric&gt;iresult = accumulate(ia, ia + 8, 0);iresult = accumulate(ilist.begin, ilist.end(), 0, plus&lt;int&gt; ()); adjacent_difference() 相邻元素的差额默认情形下, 它会产生一个新数列. 此数列中除了第一个元素, 每个元素都是原数列的相同位置及前一位置两元素的差额. 假设原数列为{0, 1, 2, 3, 5, 8}, 那么产生出来的新数列就是{0, 1, 0, 1, 1, 2, 3}. 它可以借由一个二元运算, 取代默认的相减操作. 第三个参数是个iterator, 指向一个容器, 用来放置执行结果. 1234#include &lt;numeric&gt;adjacent_difference(ilist.begin(), ilist.end(), iresult.begin());adjacent_difference(ilist.begin(), ilist.end(), iresult.begin(), multiplies&lt;int&gt; ()); adjacent_find() 搜寻相邻的重复元素默认情况下, 它会搜索第一组相邻且其值重复的元素. 可用某个二元运算符取代内置的equality 运算符. 本函数会返回一个iterator, 指向两个重复元素中的第一个. 1234567891011#include &lt;algorithm&gt;class TwiceOver &#123; public: bool operator() (int val1, int val2) &#123; return val1 == val2 / 2 ? true : false; &#125;&#125;piter = adjacent_find(ia, ia + 8);iter = adjacent_find(vec.begin(), vec.end(), TwiceOver()); binary_search() 二元搜索binary_search() 假设其处理对象已经以less-than 运算符加以排序. 如果该容器以其他方式完成排序, 那么调用binary_search() 时就得传入该二元运算符. 此算法会返回true 或false. 1234#include &lt;algorithm&gt;found_it = binary_search(ilist.begin(), ilist.end(), value);found_it = binary_search(vec.begin, vec.end(), value, greater&lt;int&gt; ()); copy() 复制将第一个容器的元素复制到第二个容器. 1234#include &lt;algorithm&gt;ostream_iterator&lt;int&gt; ofile(cout, " ");copy(vec.begin(), vec.end(), ofile); copy_backword() 逆向复制123#include &lt;algorithm&gt;copy_backword(svec.begin(), svec.end(), target.begin()); count() 计数返回容器中与制定值相等的元素个数 12345#include &lt;algorithm&gt;cout &lt;&lt; value &lt;&lt; " occurs " &lt;&lt; count(svec.begin(), svec.end(), value) &lt;&lt; " times in string vector.\n"; count_if() 在特定条件下计数返回容器中元素值被某特定运算符求值为true的元素个数. 1234567891011#include &lt;algorithm&gt;class Even &#123; public: bool operator() (int val) &#123; return !(val % 2); &#125;&#125;;ires = count_if(ia, ia + 8, bind2nd(less&lt;int&gt;(), 10));ires = count_if(ilist.begin(), ilist_end(), Even()); equal() 判断相等与否如果两数列的各元素值都相同, 就返回true. 如果第二数列的元素比较多, 多出来的元素不予考虑. 默认使用equality 运算符, 但也可以传入一个二元的function object 或function pointer, 用以指定另一种比较方式. 12345678910111213#include &lt;algorithm&gt;class EqualAndOdd &#123; public: bool operator() (int v1, int v2) &#123; return ((v1 == v2) &amp;&amp; (v1 % 2)); &#125;&#125;;int ia1[] = &#123;1, 1, 2, 3, 5, 8, 13&#125;;int ia2[] = &#123;1, 1, 2, 3, 5, 8, 13, 21, 34&#125;;res = equal(ia1, ia1 + 7, ia2); // trueres = equal(ia1, ia1 + 7, ia2, equalAndOdd()); // false fill() 改填元素值将容器内的每一个元素一一设定为某特定值. 123#include &lt;algorithm&gt;fill(ivec.begin(), ivec.end(), value); fill_n() 改填元素值将容器内的每个元素一一设为某特定值; 只设定n个元素 1234#include &lt;algorithm&gt;fill_n(ia, count, value);fill_n(svec.begin(), count, string_value); find() 搜索容器内的元素被一一拿出来和特定值比较. 一旦遇到相符的元素, 搜索操作便结束. find() 返回一个iterator, 指向该元素. 如果没有任何相符元素, 就返回容器的end(). 1234#include &lt;algorithm&gt;piter = find(ia, ia + 8, value);iter = find(svec.begin(), svec.end(), "rosebud"); find_end() 搜索某个子序列的最后一次出现地点此算法接受两组iterator. 第一组iterator 标示被搜索的容器范围. 第二组iterator 标示作为比对标准的一组元素序列. find_end() 会找出容器内出现比对元素序列的最后一次位置. 比对方式默认是equality 运算符, 但亦允许另行制定一个二元运算. 如果比对成功, 就返回iterator 指向符合条件的位置. 如果比对失败(找不到吻合序列), 就返回所指定之容器范围的末尾(亦即find_end() 的第二参数). 举个例子, 给定字符序列Mississippi 及第二序列ss, find_end() 会返回一个iterator, 指向Mississippi 中的第二个ss 子序列的第一个s 位置. 1234567#include &lt;algorithm&gt;int ia[17] = &#123;7 , 3, 3, 7, 6, 5, 8, 7, 2, 1, 3, 7, 6, 3, 8, 3, 3&#125;;int seq[3] = &#123;3, 7, 6&#125;;// found_it 指向ia[10]found_it = find_end(ia, ia + 17, seq, seq + 3); find_first_of() 搜索某些元素的首次出现地点此算法接受两组iterator. 第一组iterator 标示被搜索的容器范围. 第二组iterator 标示作为比对标准的一组元素序列. 举个例子, 如果我们想找出字符串synesthesia 中的第一个元音字母, 我们把第二字符串定义为aeiou. 如果第一序列中存在第二序列的任一元素, find_first_of() 便返回一个iterator, 指向第一个出现的元素—本例为第一个e. 如果第一序列中并不存在第二序列的任何元素值, 变返回一个iterator, 指向第一序列的末尾. 可选的第五参数, 允许你指定一个二元运算, 借此改用equality 运算符以外的比较方式. 1234567#include &lt;algorithm&gt;string s_array[] = &#123;"Ee", "eE", "ee", "Oo", "oo", "ee"&#125;;string to_find[] = &#123;"oo", "gg", "ee"&#125;;// 返回第一次出现"ee" 的位置. 答案将是&amp;s_array[2]found_it = find_first_of&#123;s_array, s_array + 6, to_find, to_find + 3&#125;; find_if() 在特定条件下搜索容器内的元素会被一一施以特定的二元运算, 测试是否符合条件. 如果找到符合条件的元素, 搜索操作便结束, 并返回一个iterator 指向该元素. 如果没有找到符合条件的元素, 就返回容器的end(). 123#include &lt;algorithm&gt;find_if(vec.begin(), vec.end(), LessThanVal(ival)); for_each() 对范围内的第一个元素应用某个操作for_each() 的第三个参数用来表示将依次应用于每个元素身上的运算. 这个运算不得更改元素值, 如果要更改元素值, 可使用transform(). 指定的运算如果有返回值, 该值会被忽略. 12345678#include &lt;algorithm&gt;template &lt;typename Type&gt;void print_elements(Type elem) &#123; cout &lt;&lt; elem &lt;&lt; " ";&#125;for_each(ivec.begin(), ivec.end(), print_elements); generate() 以指定操作的运算结果填充特定范围内的元素generate() 会将指定操作的运算结果, 填入序列之中. 123456789101112#include &lt;algorithm&gt;class GenByTwo &#123; public: void operator() () &#123; static int seed = -1; return seed +=2; &#125;&#125;;list&lt;int&gt; ilist(10);// 填入ilist 的内容为 1 3 5 7 9 11 13 15 17 19generate(ilist.begin(), ilist.end(), GenByTwo()); generate_n() 以指定操作的运算结果填充n个元素的内容generate_n 会连续调用指定操作n次, 并将这n次的结果填入序列的n个元素之中. 12345678910111213#include &lt;algorithm&gt;class gen_by_two &#123; public: gen_by_two (int seed = 0) : _seed(seed) &#123;&#125; int operator () () &#123;return _seed += 2;&#125; private: int _seed;&#125;vector&lt;int&gt; ivec(10);// 填入ivec的内容为 102 104 106 108 110 112 114 116 118 120generate_n(ivec.begin(), ivec.size(), gen_by_two(100));]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[cpp-顺序性容器]]></title>
      <url>%2F2016%2F10%2F05%2Fcpp-%E9%A1%BA%E5%BA%8F%E6%80%A7%E5%AE%B9%E5%99%A8%2F</url>
      <content type="text"><![CDATA[要使用顺序性容器,首先必须包含相关的头文件,也就是以下三者之一:123#include &lt;vector&gt;#include &lt;list&gt;#include &lt;deque&gt; 定义顺序性容器对象的方式有五种 产生空的容器 12list&lt;string&gt; slist;vector&lt;int&gt; ivec; 产生特定大小的容器.每个元素都以其默认值作为初值. 12list&lt;int&gt; ilist(1024);vector&lt;string&gt; svec(32); 产生特定大小的容器,并为每个元素赋制定初值 12vector&lt;int&gt; ivec(10, -1);list&lt;string&gt; slist(16, "unassigned"); 通过一对iterator 产生容器. 这对iterator 用来标示一整组作为初值的元素的范围; 12int ia[8] = [1, 1, 2, 3, 5, 8, 13, 21];vector&lt;int&gt; fib(ia, ia + 8); 根据某个容器产生出新容器. 复制原容器内的元素, 作为新容器的初值. 123list&lt;string&gt; slist; // 空容器// 填充list...list&lt;string&gt; slist2(slist); // 将slist 复制给slist2 操作函数:123456789101112131415161718192021222324push_back() // 在末端插入一个元素pop_back() // 在末端删除一个元素, 不返回被删除的元素值.push_front() // 在最前端插入一个元素(list 和deque, 不包括vector)pop_front() // 在最前端删除一个元素(list 和deque, 不包括vector), 不返回被删除的元素值front() // 返回最前端元素的值back() // 返回末端元素的值iterator insert(iterator position, elemType value) 将value 插入position 之前. 它会返回一个iterator, 指向被插入的元素.void insert(iterator position, int count, elemType value) 在position 之前插入count 个元素, 这些元素的值都和value 相同.void insert(iterator1 position, iterator2 first, iterator3 last)可在position 之前插入[first, last) 所标示的各个元素.// iterator insert(iterator position) // 可在position 之前插入元素. 元素的初值为所属类型的默认值.iterator erase(iterator posit) 可删除posit 所指的元素iterator erase(iterator first, iterator last) 删除[first, last) 范围内的元素 itertor 与 const_iterator 与 const iterator 区别如果你传递过来一个const 类型的容器, 那么只能用const_iterator 来遍历123void Method (const vector&lt;int&gt; vInt) &#123; vector&lt;int&gt;::const_iterator iter;&#125; 简单示例const_iterator 与const iterator1234567vector&lt;int&gt; ivec;vector&lt;int&gt;::const_iterator citer1 = ivec.begin();const vector&lt;int&gt;::iterator citer2 = ivec.begin();*citer1 = 1; // error*citer2 = 1; // right++citer1; // right++citer2; // error 详见 博客园]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JS-char-code]]></title>
      <url>%2F2016%2F09%2F29%2FJS-char-code%2F</url>
      <content type="text"><![CDATA[String.fromCharCode()MDN String.fromCharCode() 静态方法根据制定的Unicode 编码中的序号值来返回一个字符串由于fromCharCode 是String 的静态方法, 所以应该这样使用: String.fromCharCode(), 而不是作为你创建的String 对象的方法. String.fromCharCode(num1, …, numN) 参数:num1, …, numN 一组序列数字,表示Unicode 值. String.fromCharCode(65, 66, 67) // &quot;ABC&quot; String.fromCodePoint()MDN 与fromCharCode 功能类似, 但是支持的Unicode 字符更全.由于fromCodePoint() 是String 的一个静态方法, 所以只能通过String.fromCodePoint() 这样的方式来使用, 不能在String 对象的实例上直接调用. String.prototype.charAt()MDN charAt() 方法返回字符串中指定位置的字符 str.charAt(index) 参数:index 0 到 字符串长度-1 的一个整数 &#39;abc&#39;.charAt(1) // &#39;b&#39; String.prototype.charCodeAt()MDN charCodeAt() 方法返回0到65535 之间的整数, 代表索引处字符的UTF-16编码单元, 如果你希望得到整点编码值, 使用codePointAt() str.charCodeAt(index) 参数:index 一个大于等于0, 小于字符串长度的整数. 如果不是一个数值, 则默认为0 如果index 小于0 或不小于字符串的长度, 则返回NaN &quot;ABC&quot;.charCodeAt(0) // 65 String.prototype.codePointAt()MDN codePointAt() 方法返回一个代表unicode 编码的非负整数 str.codePointAt(pos) 参数:pos 指向字符串中需要返回编码的元素的位置 如果pos 指向的位置没有元素, 将返回undefined 12'ABC'.codePointAt(1) // 66'\uD800\uDC00'.codePointAt(0) // 65536]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JS-正则表达式]]></title>
      <url>%2F2016%2F09%2F21%2FJS-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[RegExp 方法 RegExp.prototype.exec() RegExp.prototype.test() RegExp.prototype.toSource() RegExp.prototype.toString() String 方法 String.prototype.match() String.prototype.replace() 栗子1234567891011121314151617let patt = /a/let str = 'abcabc'patt.exec(str) // [ 'a', index: 0, input: 'abcabc' ]patt.test(str) // true str.match(patt) // [ 'a', index: 0, input: 'abcabc' ]let patt1 = /a/gpatt1.exec(str)// [ 'a', index: 0, input: 'abcabc' ]patt1.test(str)// truestr.match(patt1)// [ 'a', 'a' ] 更多栗子123456789101112131415161718192021222324let patt = /(GET) (HTTP)/let str = 'test GET HTTP'patt.exec(str)// [ 'GET HTTP', 'GET', 'HTTP', index: 5, input: 'test GET HTTP' ]patt.test(str)// truestr.match(patt)// [ 'GET HTTP', 'GET', 'HTTP', index: 5, input: 'test GET HTTP' ]let patt = /(GET) (HTTP)/glet str = 'test GET HTTP'patt.exec(str)// [ 'GET HTTP', 'GET', 'HTTP', index: 5, input: 'test GET HTTP' ]patt.test(str)// truepatt.match(str)// ['GET HTTP']]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[编译原理2E-笔记]]></title>
      <url>%2F2016%2F09%2F14%2F%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%862E-%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[考试准备 面向机器语言 一般程序设计语言的定义都涉及语法, 语义, 语用 三个方面; 关于这三个-百度知道 编译程序的工作过程可以划分为: 词法分析, 语法分析, 语义分析, 中间代码生成, 代码优化[可选], 为特定目标机生成代码(后端), 同时还会伴有表格处理 和出错处理 编译方式与解释方式的根本区别在于是否生成目标代码. 解释型语言和编译型语言的区别 - csdn 如果编译程序生成的目标程序是机器代码程序, 则源程序的执行分为: 编译阶段和运行阶段, 如果生成的是汇编语言程序, 则源程序的执行分为编译阶段, 汇编阶段, 运行阶段 翻译程序: 把某种语言转换成另一种语言程序的程序; 解释程序: 以该语言的源程序作为输入, 但不产生目标程序, 而是边解释边执行源程序本身; 编译程序: 将高级语言转换为诸如汇编语言或机器语言之类的’低级语言’的翻译程序;翻译程序是一种系统程序，它将计算机编程语言编写的程序翻译成另外一种计算机语言的一般来说等价的程序，主要包括编译程序和解释程序，汇编程序也被认为是翻译程序。 p6-编译器中记录变量的名字, 和名字的属性(存储分配, 类型, 作用域); 过程名字, 和属性(参数数量, 类型, 每个参数的传递方法) ; 符号表为每个变量名字创建一个记录条目 四种文法类型 - 博客; 0-3分别为: 短语文法, 上下文有关文法, 上下文无关文法, 正则文法 短语: 设G[Z]是一文法, w=xuy是一句型, 如果有Z =*&gt; xUy 且U =+&gt; u. 那么称u是一个相对于非终结符号U的句型w的短语简单短语: 若有Z =*&gt; xUy, 且U =&gt; u, 那么, 称u是一个相对于非终结符号U的句型w的简单短语句柄: 任一句型的最左简单短语称为该句型的句柄素短语: 是短语, 至少含有一个终结符, 除自身意外不在含有更小的带有终结符的短语 短语: 树或者子树的叶子形成的符号串简单短语: 简单子树(只有叶子的子树)的叶子形成的符号串句柄: 最左简单子树的叶子形成的符号串素短语: 子树, 有终结符, 无更小子树图示 - 博客 数组的内情向量; 信息包括: 数组的类型, 维数, 各维的上下界, 数组的首地址 典型的编译型语言: C/C++、Pascal/Object Pascal（Delphi）; 解释型语言: JavaScript、VBScript、Perl、Python、Ruby、MATLAB JAVA是编译型语言还是解释型语言 - 知乎; 个人偏向解释型, 毕竟编译之后的class文件还是要通过jvm来解释执行的 正规式M1 和M2 等价是指: M1 和M2 所识别的语言集相等 如果文法G 是无二义的, 则它的任何句子a: 最左推导和最右推导必定相同X; 最左推导和最右推导的语法树必定相同√ 常用代码优化技术 静态存储分配(FORTRAN), 动态存储分配(PASCAL, C) 局部优化 : 消除局部公共子表达式, 消除死代码, 利用代数恒等式(局部强度消减, 常量合并) 全局优化: 消除全局公共子表达式, 复制传播, 常量折叠(如果推导出一个表达式是常量, 则用常量代替此表达式), 消除死代码, 删除归纳变量, 强度削弱 编译程序绝大多数时间花在表格管理上. 自顶向下的语法分析基本思想是: 从文法的开始符号开始, 根据给定的输入串并按照文法的产生式一步步向下进行直接推导, 试图推导出文法的句子, 使之与给定的输入串匹配 常用的参数传递方式有传地址, 传值和传名 从功能上说, 程序语言的语句大体可分为执行性语句和说明性语句两大类 产生式是用于定义语法范畴的一种书写规则 语法分析是一句语言的语法规则进行的, 中间代码产生是依据语言的语义规则进行的 语法分析器的输入是单词符号串,其输出是语法单位 一个名字的属性包括类型和作用域 一个文法能用有穷多个规则描述无穷的符号串集合(语言)是因为文法中存在有递归定义的规则 LR(0) 见到First集就移进, 见到终态就规约, SLR(1) 见到First集就移近, 见到终态先看Follow集, 与Follow集对应的项目规约, 其他报错 练习第三章词法分析3.1.1 1234&lt;float&gt; &lt;id, limitedSquaare&gt; &lt;(&gt; &lt;id, x&gt; &lt;)&gt; &lt;&#123;&gt; &lt;float&gt; &lt;id, x&gt; &lt;return&gt; &lt;(&gt; &lt;id, x&gt; &lt;op,"&lt;="&gt; &lt;num, -10.0&gt; &lt;op, "||"&gt; &lt;id, x&gt; &lt;op, "&gt;="&gt; &lt;num, 10.0&gt; &lt;)&gt; &lt;op, "?"&gt; &lt;num, 100&gt; &lt;op, ":"&gt; &lt;id, x&gt; &lt;op, "*"&gt; &lt;id, x&gt;&lt;&#125;&gt; 3.1.2 1234&lt;text, "Here is a photo of"&gt; &lt;nodeStart, b&gt; &lt;text, "my house"&gt; &lt;nodeEnd, b&gt;&lt;nodeStart, p&gt; &lt;selfEndNodeStart, IMG&gt; &lt;SRC, "house.gif"&gt; &lt;selfEndNodeEnd, IMG&gt; &lt;selfEndNode, BR&gt;&lt;text, "See"&gt; &lt;nodeStart, A&gt; &lt;HREF, "morePix.html"&gt; &lt;selfEndNodeEnd, A&gt; &lt;text, "More Pictures"&gt; &lt;nodeEnd, A&gt; &lt;text, "if you liked that one."&gt;&lt;nodeEnd, p&gt; 3.3.2 123451) a开头a结尾,中间是大于等于0个a或b组成的字符串 如 abababaaba2) 任意a与b组成的字符串3) 以a 连接 a或b 连接 a或b 结尾的任意a与b组成的字串4) 3个b和任意个a组成的字串5) 偶数个a和b组成的字串 3.3.3 123451) n + 12) n + 13) n4) (1 + n) / 2 * n + 15) 2^n 3.3.4 12/select/iselect -&gt; [Ss][Ee][Ll][Ee][Cc][Tt] 3.3.5 12341) want -&gt; other* a (other|a)* e (other|e)* i (other|i)* o (other|o)* u (other|u)* other -&gt; [bcdfghjklmnpqrstvwxyz]2) a*b*...z*9) b*a*b?a* 3.3.6 12341) [a-jA-J]2) [bcdfghjklmnpqrstvwxzy]3) [0-9a-f]4) [.?!] 3.5.2 deemo.lex 123456789101112131415161718192021%&#123;#include &lt;fstream&gt;using std::ofstream;ofstream out("out.txt");%&#125;delim [ \t\n]ws &#123;delim&#125;+%%&#123;ws&#125; out &lt;&lt; " ";. out &lt;&lt; yytext;%%int yywrap (void) &#123; return 1;&#125;main(int argc, char* argv[]) &#123; yylex();&#125; 3.5.3 deemo.lex 12345678910111213141516171819202122%&#123;#include &lt;fstream&gt;using std::ofstream;ofstream out("out.txt");%&#125;delim [ \t\n]ws &#123;delim&#125;+%%&#123;ws&#125; &#123;out &lt;&lt; yytext;&#125;float &#123;out &lt;&lt; "double";&#125;. &#123;out &lt;&lt; yytext;&#125;%%int yywrap (void) &#123; return 1;&#125;main(int argc, char* argv[]) &#123; yylex();&#125; 3.5.4 deemo.lex 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950%&#123;#include &lt;fstream&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using std::ofstream;using std::cout;using std::vector;using std::endl;ofstream out("out.txt");void display (vector&lt;char&gt; &amp;cvec, ofstream &amp;os) &#123; for (int i = 0; i &lt; cvec.size(); i++) &#123; os &lt;&lt; cvec[i]; &#125;&#125;%&#125;delim [ \t\n]ws &#123;delim&#125;+letter [A-Za-z]digit [0-9]id &#123;letter&#125;(&#123;letter&#125;|&#123;digit&#125;)*number &#123;digit&#125;+(\.&#123;digit&#125;+)?(E[+-]?&#123;digit&#125;+)?%%&#123;ws&#125; &#123; out &lt;&lt; yytext;&#125;&#123;letter&#125;+ &#123; vector&lt;char&gt; cvec(yytext, yytext + strlen(yytext)); if (cvec[0] != 'a' &amp;&amp; cvec[0] != 'e' &amp;&amp; cvec[0] != 'i' &amp;&amp; cvec[0] != 'o' &amp;&amp; cvec[0] != 'u') &#123; cvec.push_back(cvec[0]); cvec.erase(cvec.begin()); &#125; cvec.push_back('a'); cvec.push_back('y'); display(cvec, out);&#125;. &#123; out &lt;&lt; yytext;&#125;%%int yywrap (void) &#123; return 1;&#125;main(int argc, char* argv[]) &#123; yylex();&#125; 3.5.5 deemo.lex 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152%&#123;#include &lt;fstream&gt;#include &lt;iostream&gt;#include &lt;vector&gt;using std::ofstream;using std::cout;using std::vector;using std::endl;ofstream out("out.txt");void display (vector&lt;char&gt; &amp;cvec, ofstream &amp;os) &#123; for (int i = 0; i &lt; cvec.size(); i++) &#123; os &lt;&lt; cvec[i]; &#125;&#125;%&#125;delim [ \t\n]ws &#123;delim&#125;+letter [A-Za-z]digit [0-9]id &#123;letter&#125;(&#123;letter&#125;|&#123;digit&#125;)*number &#123;digit&#125;+(\.&#123;digit&#125;+)?(E[+-]?&#123;digit&#125;+)?%%&#123;ws&#125; &#123; out &lt;&lt; yytext;&#125;[Ss][Ee][Ll][Ee][Cc][Tt] &#123; out &lt;&lt; "select";&#125;[Ff][Rr][Oo][Mm] &#123; out &lt;&lt; "from";&#125;[Ww][Hh][Ee][Rr][Ee] &#123; out &lt;&lt; "where";&#125;&#123;id&#125; &#123; out &lt;&lt; yytext;&#125;. &#123; out &lt;&lt; yytext;&#125;%%int yywrap (void) &#123; return 1;&#125;main(int argc, char* argv[]) &#123; yylex();&#125; 第四章语法分析4.2.1 最左推倒 12345S -&gt; SS* -&gt; SS+S* -&gt; aS+S* -&gt; aa+S* -&gt; aa+a* 最右推倒 12345S -&gt; SS* -&gt; Sa* -&gt; SS+a* -&gt; Sa+a* -&gt; aa+a* 4.2.3 S -&gt; 0T1S | 1S | nullT -&gt; 1T | 0T | 0 记录LR语法分析算法(算法4.44 p159)输入: 一个输入串w 和一个LR 语法分析表, 这个标描述了文法G 的ACTION 函数和GOTO 函数. 输出: 如果w 在L(G) 中, 则输出w 的自底向上语法分析过程中的归约步骤; 否则给出一个错误指示. 文法:123(1) E -&gt; E + T (4) T -&gt; F(2) E -&gt; T (5) F -&gt; (E)(3) T -&gt; T * F (6) F -&gt; id LR 语法分析程序1234567891011121314151617令a 为w$ 的第一个符号while(1) &#123; s = 栈顶的状态 if (ACTION[s, a] == 移入t) &#123; 将t 压入栈中; 令a 为下一个输入符号 &#125; else if (ACTION[s, a] == 归约 A -&gt; β) &#123; 从栈中弹出|β| 个符号; t = 栈顶的状态 将GOTO[t, A] 压入栈中 输出产生式A -&gt; β &#125; else if (ACTION[s, a] = 接受) &#123; break; /* 语法分析完成 */ &#125; else &#123; 调用错误恢复例程 &#125;&#125; 翻译声明语句的翻译 赋值语句的翻译 控制语句的翻译 回填 switch 语句的翻译 过程调用语句的翻译 存储分配静态存储分配(顺序分配法)(层次分配法)栈式存储分配活动树设计活动记录 调用序列返回序列 变长数据 第八章 代码优化基本块(基本块划分算法)根据首指令划分基本块 流图 (表示中间代码的方法)(流图的节点是一些基本块)(流图的边 即基本块到基本块的跳转) 优化方法的分类 删除公共子表达式(局部)(全局)(也可以消除能消除的临时变量)(只有没有改变的才能替换) 删除无用代码(复制传播: 在复制语句x=y之后尽可能的用y代替x,这样能给删除无用代码带来机会)(无用代码: ) 常量合并`(编译时刻推导出一个表达式是常量, 则之后可用该常量代替该表达式)(复制传播的一个特例) -代码移动(循环不变计算: 将循环中计算结果相同的表达式)(循环不变计算的相对性) -强度削弱(用较快的操作来替代较慢的操作, 如用加代替乘)循环中的强度削弱(归纳变量: 对某个常数c, 变量x每次循环都增加常数c, 则x是归纳变量)(对归纳变量进行强度削弱) -删除归纳变量(循环运行时,如果有一组归纳变量的值变化保持步调一致,常常可以将这组变量删除为只剩一个) 基本块的优化(局部的优化)基本块的DAG表示 基于基本块的DAG 检测局部公共子表达式 基于基本块的DAG 删除无用代码`(删除没有附加活跃变量的根节点)(活跃变量: 值可能在以后被使用)(根节点: 没有父节点的节点)(重复这个过程, 可以消除对应无用代码的节点) 数组下标指令的表示(防止构造DAG时将a[i]误判为公共子表达式)(a=x[i], op:’=[]’, arg1:x, arg2:i, result: a)(被杀死的节点不能再获得任何定值变量, 也就不能成为一个公共子表达式) 基本块DAG的构造从DAG中获得的信息:(确定哪些标识符在基本块中被引用过)(确定哪些语句计算的值可以在基本块外被引用) 数据流分析语句的数据流模式 (IN[s] 语句s之前的数据流值)(OUT[s] 语句s之后的数据流值)fs: 语句s的传递函数(一个赋值语句s之前和之后的数据流值的关系)(前向传播: OUT[s] = fs(IN[s]))(逆向传播 IN[s] = fs(OUT[s])) 基本块上的数据流模式(IN[B]: 紧随基本块B之前的数据流值)(OUT[B]: 紧随基本块B之后的数据流值)fB: 基本块B的传递函数(前向数据流问题: OUT[B] = fB(IN[B]) , fB = fsn…fs2fs1)(逆向数据流问题: IN[B] = fB(OUT[B]) , `fB = fs1fs2…fsn`) 到达定值分析定值到达定值用途: (循环不变计算的检测)(常数合并)(判定变量x在p点上是否未经定值就被引用) 生成与杀死 到达定值的传递函数(fd: 定值d: u = v + w的传递函数)(fd(x) = gend U (x - killd))(gend: 由语句d生成的定值的集合)(killd: 由语句杀死的定值的集合)(x d之前生成的定值的集合)(fB: 基本块B的传递函数)(fB(x) = genB U (x - killB))(killB = kill1 U kill2 U … U killn 被基本块B中各个语句杀死的定值的集合)(genB = genn U (genn-1 - killn) U … U (gen1 - kill1 - … - killn) 基本块中没有被块中各个语句杀死的定值的集合) 到达定值的数据流方程 引用定值链(Use-Definition Chains)引用定值链是一个列表, 对于变量的每一次引用, 到达该引用的所有定值都在该列表中. 活跃变量分析活跃变量(用途: 删除无用赋值, 为基本块分配寄存器) 定值-引用链(definition-use chains)设变量x有一个定值d, 该定值所有能够到达的引用u的集合称为x在d处的定值-引用链 可用表达式分析用途:(消除全局公共子表达式)(进行复制传播) 流图中的循环支配节点 回边 自然循环 全局优化删除全局公共子表达式删除复制语句代码移动]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[计算机网络-笔记]]></title>
      <url>%2F2016%2F09%2F11%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[01RIP协议可能产生震荡现象 (X) 1234567841判断(2分)OSPF协议只在分区内计算路由，不能在整个AS范围内计算路由。 (X)得分/总分A.B.0.00/2.00正确答案：A你错选为B 1234567891011121314151617181931多选(3分)下列关于CSMA/CD协议的叙述中，正确的是得分/总分A.适用于各种广播链路，以实现链路共享该题无法得分/3.00B.需要根据网络跨距和数据传输速率限定最小帧该题无法得分/3.00C.边发送数据帧，边检测是否发生冲突该题无法得分/3.00D.基于冲突检测机制，确保帧可靠传输正确答案：B、C你错选为A、B、C 12345678910111213141516171832多选(3分)下列关于交换机的叙述中，错误的是得分/总分A.交换机每个端口所连网络构成一个独立的广播域1.00/3.00B.以太网交换机可实现采用不同网络层协议的网络互联C.以太网交换机本质上是一种多端口网桥D.通过交换机互连的一组工作站构成一个冲突域1.00/3.00正确答案：A、B、D你错选为A、D 12345678910111213141516171833多选(3分)下列关于交换机的叙述中，错误的是得分/总分A.以太网交换机是一种存储-转发设备B.以太网交换机可实现采用不同网络层协议的网络互联C.交换机每个端口所连网络构成一个独立的广播域1.00/3.00D.通过交换机互连的一组工作站构成一个冲突域1.00/3.00正确答案：B、C、D你错选为C、D 12345678910111213141516171819202122232425262728291. (09 年考研 34 题)在无噪声情况下,若某通信链路的带宽为 3kHz,采用 4 个相位,每个相位具有 4 种振幅的 QAM 调制技术,则该通信链路的最大数据传输速率是A. 12 kbpsB. 24 kbpsC. 48 kbpsD. 96 kbps【解答】选 B。由奈氏准则公式:C=2Wlog 2 N=2 * 3K * log 2 (4*4)=24Kbps,即该信道的最大数据传输速率是 24Kbps。【考查知识点】奈氏准则。理想低通信道的最高码元传输速率=2W Band。W是低通信道的带宽,单位为 Hz,Band 是波特,是码元传输速率的单位。一个码元携带 N bit 信息量,波形速率为 M Band,则最高速率为 M*N bit/s.香农定理指出:在有随机热噪声的信道上传输数据信号时,数据传输速率 C与信道带宽 W、信噪比 S/N 的关系为:C=W*log 2 (1+S/N))。式中,C 单位为bps,带宽 W 单位为 Hz,信噪比 S/N 通常以 dB(分贝)数表示。2. (11 年考研 34 题)若某通信链路的数据传输速率为 2400bps,采用 4相位调制,则该链路的波特率是A. 600 波特B. 1200 波特C. 4800 波特D. 9600 波特【解答】选 B。有 4 种相位,则一个码元需要由 log 2 4=2 个 bit 表示,则波特率=比特率/2=1200 波特。【考查知识点】考察波特与比特率的关系;比特率和波特率之间的换算关系如下:比特率 = 波特率 * log 2 n 。比特率是数字信号的传输速率——单位时间内所传输的二进制代码的有效位数。单位——比特/秒(bps)或千比特/秒(kbps)。波特率是调制速率(又称波形速率)——线路中每秒传送的波形的个数。单位——波特(band)。 路由器的体系结构包括四个部分, 分别是处理器/cpu, 输入端口, 输出端口, 和交换接口 在Internet中可以将一个自治系统分为多个区的自治系统内路由协议为OSPF 10BaseT以太网采用的比特编码机制是曼彻斯特编码 12下列物理介质中, 易受电磁干扰的导向介质是AA.双绞线, B 红外线 C 光纤 D 微波 帧同步的方法有: 字节计数法, 字符填充的首尾定界符法, 比特填充的首尾标识法, 违法编码法 解决无穷计数问题的方法有: 抑制规则(定义最大有效度量值), 毒性逆转的水平分割, 触发更新, 阻碍时钟等 OSPF使用IP, RIP使用UDP, BGP使用TCP 以太网10BaseT和100BaseT使用的物理介质是双绞线 计算机网络常用的有限物理介质有双绞线, 光纤, 同轴电缆 1234NRZL, 曼彻斯特, 差分曼彻斯特编码NRZL: 高电平为1, 低电平为0曼彻斯特: 低到高为1, 高到低为0差分曼彻斯特: 在信号开始时改变信号极性表示逻辑0, 否则表示逻辑1 123456Internet中域名, IP地址和MAC地址关系如何? 它们之间如何进行映射域名, IP地址和MAC地址都可以用于标识Internet中通信节点(或接口)域名主要用于应用层, IP地址主要在网络层, MAC地址主要在数据链路层域名通过DNS解析获得IP地址IP地址通过ARP协议获得MAC地址DNS to IP: DNS resolve 两种典型的分组交换网络是数据报网络, 虚电路网络 802.11无线局域网的两种典型的网络模式是基础设施模式和特定网模式/Ad hoc模式 网络接入 分组交换网络传输分组的基本工作方式是存储-转发 网络应用体系结构主要包括client/server, P2P, 端口号 流量控制关注的是接收端的数据接收和缓存能力, 拥塞控制关注的是网络传输能力 Web应用中引入的Cookies技术可以支持身份鉴别, 购物车, 推荐服务, 和用户会话状态信息维护等 FTP传输命令通过控制连接, 服务器默认端口号为21; 传输文件通过数据连接, 服务器端默认的端口号为20 SMTP协议基于的传输层协议是TCP, 服务器默认端口号是25, 传输的邮件内容必须是7比特的ASCII码 典型的邮件接收协议有POP, IMAP, HTTP等 DNS协议运行在UDP协议之上，使用端口号53。 UDP头包括源端口号, 目的端口号, 长度, 校验和四个字段 UDP计算校验和时包括伪头, UDP段头, 和应用层数据 3部分内容 实现可靠传输的主要机制包括差错编码, 重传, 计时器, 确认和 序列号 滑动窗口协议的发送窗口大小为Ws, 接收窗口大小为Wr, 数据分组序列号域的比特长度为L, 则Ws + Wr &lt; L TCP和UDP校验和都要加上伪头部, 和应用层数据IP校验和只计算首部 若不包含前导码,则以太网数据帧的最大帧长为( 1518 )字节,最小帧长为( 64 )字节,数据域最少为( 46 )字节、最大为( 1500 )字节,以太网的 MTU 为( 1500 )字节。 tcp报文中的 Timestamp optionTimestamp value 和 Timestamp echo 作用 网络协议的三要素(语法,语义,同步) 网络工程中常用的线缆标准为568A(直通线568A-568A)(交叉线568A-568B) IEEE 802.3 CMSA/CD, IEEE 802.4 Token Bus, IEEE 802.5 Token Ring多路访问协议(multi-access protocol) 信道划分协议(TDM, FDM) 随机接入协议 ALOHA (纯ALOHA, 分槽ALOHA(slotted ALOHA)) 载波侦听多路访问协议(CSMA) (坚持)(非坚持)(带冲突检测的CSMA: CSMA/CD) 轮流协议 polling 令牌传递(token passing)(令牌总线, 令牌环) [ATM](https://zh.wikipedia.org/wiki/%E5%BC%82%E6%AD%A5%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%BC%8F)(Asynchronous Transfer Mode)异步传输模式, 又叫信元中继, ATM采用电路交换的模式, 能够支持有连接和无连接的业务, 能比较理想的实现各种QoS 前向纠错(forward err correction) 循环冗余校验(CRC: Cyclic redundancy check) 混合差错控制 HDLC: High-Level Data Link Control高级数据链路控制–数据链路层 局域网3要素: 传输介质, 拓扑结构, 介质访问控制方法 路由选择算法分为两大类, 分别为适应性和非适应性.理想的路由算法应该具有的特点正确性, 简单性, 坚定性, 稳定性, 公平性, 最佳性.数据报服务中, 网络节点要为每个分组选择路由, 在虚电路服务中, 网络节点只在连接建立时选择路由网络互联时一般要使用网络互联器, 根据网络互联器进行协议和功能转换对象的不同可以分为: 中继器 网桥 路由器 协议转换器 四种 CSMA/CD采用的二进制指数退避算法截断二进制指数退避算法 SDLC: Synchronous Data Link Control – layer 2, 现在已经逐渐被IP协议取代 以太网帧最小帧长与最大帧长以太网的帧开销是18字节，是“目的MAC（6）＋源MAC（6）＋Type（2）＋CRC（4）”。以太网最小帧长为64字节，那么IP报文最小为46字节，而局域网规定IP最大传输单元1500字节，实际上加上以太网帧的18字节，就是1518字节。IEEE定义了这个标准，一个碰撞域内，最远的两台机器之间的round-trip time 要小于512bit time。(来回时间小于512位时，所谓位时就是传输一个比特需要的时间）。这也是我们常说的一个碰撞域的直径。 ICMP差错报文 对于携带ICMP差错报文的数据包, 不再产生ICMP差错报文 对于分段的数据报文, 如果不是第一个分段则不产生ICMP差错报文 对于多播地址的数据报文, 不产生ICMP差错报文 具有特殊地址的数据报文, 如127.0.0.0或0.0.0.0, 不产生ICMP差错报文 唯一标识一个UDP套接字的是目的端口号和目的IP地址. NAT服务的路由器转发一个源IP地址为10.0.0.1的IP数据分组时,可能重写的IP分组首部字段是 总长度 源IP地址 源端口 checksum TTL不会改变的是 ID 目的IP地址 协议 用于实现可靠数据传输的机制有 确认 差错检测 重传 计时器 序列号 直通交换方式是指以太网交换机可以在各端口间交换数据。它在输入端口检测到一个数据包时，检查该包的包头，获取包的目的地址，启动内部的动态查找表转换成相应的输出端口，在输入与输出交叉处接通，把数据包直通到相应的端口，实现交换功能。通常情况下，直通交换方式只检查数据包的包头即前14个字节，由于不需要考虑前导码，只需要检测目的地址的6B，所以最短的传输延迟是0.48μs。 由于快速以太网的最短帧长为64字节，去除首部18字节，即数据部分最短46字节。从表1中可以看出，第3号和第5号分组的总长度为40（28H）字节，小于46字节，其他分组总长度均大于46字节，所以3号和5号分组在通过快速以太网传输时需要填充。 12快速以太网最短帧长为64字节, 首部18字节, 因此数据部分最短46字节.64*8 = 512, 10Mbps以太网中按照二进制指数退避算法的退避时间单元为512b / 10Mbps = 51.2us 12345675. (14年考研37题)站点A、B、C通过CDMA共享链路，A、B、C的码片序列(chipping sequence)分别是(1,1,1,1)、(1，-1,1，-1)和(1，1,-1，-1)，若C从链路上收到的序列是(2,0,2,0,0,-2,0,-2,0,2,0,2)，则C收到A发送的数据是A. 000B. 101C. 110D. 111【解答】选B。用A的码片与链路上的序列做规格化内积，得1，-1，1对应的数据为1,0,1。【考查知识点】CDMA码分多址 1234567891010单选(2分)不采用FDM技术的接入网络是 (D)A.IEEE802.11（WiFi）B.HFCC.ADSLD.以太网 12345678910111213141528.下列关于IP路由器功能的描述中，正确的是（C ）Ⅰ.运行路由协议，设备路由表Ⅱ.检测到拥塞时，合理丢弃IP分组Ⅲ.对收到的IP分组头进行差错校验，确保传输的IP分组不丢失Ⅳ.根据收到的IP分组的目的IP地址，将其转发至合适的输出线路上A.仅Ⅲ， ⅣB.仅Ⅰ， Ⅱ， ⅢC.仅Ⅰ， Ⅱ， ⅣD. Ⅰ， Ⅱ， Ⅲ ， Ⅳ解析：路由器的主要作用包括：1.IP路由器运行路由协议，更新设备路由表。2.当检测到网络发生拥塞时，合理丢弃IP分组。3.路由器根据收到的IP分组的目的IP地址，将其转发至合适的输出线路上。4.IP路由器只是尽可能最大努力交付数据包，不会进行差错校验，也不能确保传输的IP数据不丢失。 DNS资源记录类型(Resource Records)(name, value, type, ttl) Type=A; Name: 主机域名; Value: IP地址; (jwts.hit.edu.cn. 28800 IN A 219.217.228.102) Type=NS; Name: 域(edu.cn); Value: 该域权威域名解析服务器的主机域名(edu.cn. 172800 IN NS dns.edu.cn.) Type=CNAME; Name: 某一真实域名的别名; Value: 真实域名 (beim.github.io. 3600 IN CNAME github.map.fastly.net.) Type=MX; Value是与name相对应的邮件服务器 主机甲与主机乙之间使用后退N帧协议（GBN）传输数据，甲的发送窗口尺寸为1000，数据帧长为1500字节，信道带宽为100 Mbps，乙每收到一个数据帧立即利用一个短帧（忽略其传输延迟）进行确认。若甲乙之间的单向传播延迟是50 ms，则甲可以达到的最大平均数据传输速率约为与该题类似的题的答案 - 7 FTP 协议是基于传输层 TCP 协议的。FTP 的控制连接使用端口 21,用来传输控制信息(如连接请求,传送请求等);数据连接使用端口 20,用来传输数据 波特率-wiki 12345679.在物理层接口特性中，用于描述完成每种功能的时间发生顺序的是（ C）。A.机械特性 B.功能特性 C.过程特性 D.电气特性解析：选项A：机械特性：指明引脚数目和排列选项B：功能特性：指明电压表示何种意义选项C：过程特性：指明完成每种功能的时间发生顺序选项D：电气特性：指明电压的范围。 123456710.HDLC协议对01111100 01111110组帧后对应的比特串为（A）。A.01111100 00111110 10 B.01111100 01111101 01111110C.01111100 01111101 0 D.01111100 01111110 01111101解析： HDLC协议对比特串进行组帧时，HDLC数据帧以位值0111 1110 标识，每一个帧的开始和结束，因此，在帧数据中凡是出现连续五个1时，就在输出位流末尾加0 扫描整个帧，但发现连续5个1时，就立即补充一个0，显然处理后不可能出现连续的6个1. HDLC 12[8. (13年考研34题)若下图为10BaseT网卡接收到的信号波形，则该网卡收到的比特串是](http://www.ppkao.com/shiti/4259875/)A. 0011 0110 B. 1010 1101 C. 0101 0010 D. 1100 0101 【解答】选A。以太网编码采用曼彻斯特编码方式，电平由低电平到高电平跳变表示数字“0”，由高电平到低电平跳变表示数字“1”，因此网卡收到的比特串是00110110。 1234562. (10年考研36题)若路由器R因为拥塞丢弃IP分组，则此时R可以向发出该IP分组的源主机发送的ICMP报文件类型是A. 路由重定向B. 目的不可达C. 源抑制D. 超时【解答】选C。ICMP差错控制报文的5种报告：1.目的不可达——当路由器和主机不能交付数据报时就向源点发送终点不可达报文;2.源点抑制——当路由器和主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，是源点知道应当把数据报的发送速率放慢;3.时间超时——当路由器收到生存时间为0的数据报时，除了丢弃该数据报外，还要向源点发送时间超时报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据包片都丢弃，并向源点发送时间超时报文;4.参数问题——当路由器或目的主机收到的数据报的首部中有的字段值不正确时，就丢弃该数据报，并向源点发送参数问题报文;5.路由重定向——路由器把改变路由发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更好的路由)。很明显选C。 考研题 答案暂存123456789101112131415161718192021221-5 B A A A C6-10 C D C C B11-15 D B A A B16-20 D A C D C 36页开始一,填空题1. 自治系统内路由, 自治系统外路由. 自适应性, 鲁棒性, 2. 报文, 建立.3. 语法, 语义, 时序4. 物理层, 链路层, 网络层5. 总线, 交换机, 网桥, 路由器二, 选择题1-5 A D B B C6-10 C A B三, 简答题1. 1, 0-L, L, 传输失败2. 5微秒, 10微秒四, 计算题1. 2400 * 30 = 7.2 * 10^4, 每个汉字16bit, 4.5*10^32. 194.47.21.136 C类 254台 计算机网络5E关键字 IP (Internet Protocol) 因特网协议 ICMP (Internet Control Message Protocol) 因特网控制报文协议 TCP (Transport Control Protocol) 传输控制协议 UDP (User Datagram Protocol) 用户数据报协议 Internet 因特网 internet 互联网 NAP (Network Access Point) 网络接入点 DSL (Digital Subscriber Line) 数字用户线 SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议 POP3 (Post Office Protocol) 邮局协议版本3 HTTP (HyperText Transfer Protocol) 超文本传输协议 URL (Uniform Resource Locator) 统一资源定位符 CDN (Content Dilivery Network) 内容分发网络 P2P (Peer-to-Peer) 对等网络 报文格式TCP// 单位bitsource port(16) dest port(16)sequence number(32)ack number(32)headlen(4) reserved(3) Nonce(1) CWR ECN-Echo Urgent ACK PUSH RST SYN FIN (16) Receive-window-size(16)checksum(16) urgent-pointer(16)Options(variable length) // seq num和ack num通过bytes of data来计算// 标识位中SYN值为2, ACK值为16, FIN值为1; 因此SYN为02H, SYN,ACK为12H, ACK为10H, 可以通过这个来判断三次握手是否完成// 常用 seq-num, ack-num, SYN, ACK IP// 单位bit版本号(4) 首部长度(4) 服务类型(TOS)(8) 总长度(16)标识ID(16) 标识位(3) 片偏移(15)生存时间TTL(8) 协议(8) 首部校验和(16)源IP地址(32)目的IP地址(32)可变: 选项字段 填充数据// 最大IP分组总长度65535B, 最小IP分组首部20B, IP分组可以封装的最大数据65535-20=65515B// 分片不改变标识(ID)// 标识位占3位, (保留)(DF)(MF)// 片偏移量占13位, 以8字节为单位// 协议, 06为TCP, 17为UDP// 首部校验和计算时该字段全置0, 采用反码算数运算求和, 和的反码作为首部校验和字段, 逐跳计算, 逐跳校验// 常用, 总长度, TTL, 上层协议, 源和目的IP地址 ICMPType(1) Code(1) Checksum(2)(这4 个字节取决于ICMP 报文的类型)(ICMP 的数据部分, (长度取决于类型)) Ethernet frame// 单位Bytepreamble(8) des-address(6) source-address(6) type(2) data(payload)(46-1500) CRC(4) PPP Data Frameflag(1) address(1) control(1) protocol(1 or 2) info(variable) check(2 or 4) flag(1) flag: delimiterAddress: does nothingControl: does nothing, in the future possible multiple control fieldsProtocol: upper layer protocolinfo: upper layer data being carriedcheck: cyclic redundancy check for error detection地址和控制字段可以经过协商省略协议和校验字段可以经过协商决定长度 ARPHardware type: Ethernetprotocol type: IPv4Hardware size: 6Protocol size: 4Opcode: requestSender MAC address: d4:ee:07:0e:b7:ecSender IP address: 192.168.10.122Target MAC address: 00:00:00:00:00:00Target IP address: 192.168.10.10 OSI参考模型 物理层(physical layer) 关注在一条通信信道上传输原始比特。 数据链路层(data link layer) 的主要任务是将一个原始的传输设施转变成一条没有漏检传输错误的线路。将真实的错误掩盖，使网络层看不到。为此，发送方将输入的数据拆分成数据帧(data frame)，则接受方必须确认正确收到每一帧，即给发送方返回一个确认帧(acknowledgement frame)。 网络层(network layer) 的主要功能是控制子网的运行。关键问题是将数据包从源端路由到接受方。处理拥塞也是网络层的责任，一般还要和高层协议结合起来处理拥塞才有效。 传输层(transport layer) 的基本功能是接受来自上一层的数据，在必要的时候把这些数据分隔成较小的单元，然后把这些数据单元传递给网络层，并且确保这些数据单元正确地到达另一端。 会话层(session layer) 允许不同机器上的用户建立会话。会话通常提供各种服务，包括对话控制(dialog control)(记录该由谁来传递数据)、令牌管理(token management)(禁止双方同时执行同一个关键操作)，以及同步功能(synchronization)(在一个长传输过程中设置一些断点，以便在系统崩溃之后还能回复到崩溃前的状态继续运行)。 表示层(presentation layer) 表示层以下的各层关注如何传递数据位，而表示层关注的是所传递信息的语法和语义。不同的计算机可能有不同的内部数据表示法，为了让这些计算机能够进行通信，它们所交换的数据结构必须以一种抽象的方式来定义，同时还应定义一种“线上”使用的标准编码方法。表示层管理这些抽象的数据结构，并允许定义和交换更高层的数据结构（比如银行账户记录）。 应用层(application layer) 包含了用户通常需要的各种各样的协议。一个得到广泛使用的应用协议是超文本传输协议(HTTP, HyperText Transfer Protocol)，它是万维网的基础。其他一些应用协议可用于文件传输、电子邮件以及网络新闻等。 TCP/IP 参考模型设计目标 以无缝的方式将多个网络链接起来。 即使在损失子网硬件的情况下网络还能够继续工作，原有的会话不能被打断。 模型结构 链路层(link layer) 该层描述了链路必须王城什么功能才能满足无连接的互连网络层的需求，比如串行线和经典以太网链路。在分层协议的上下文中，链路层并不是通常意义上的一层。它是一个接口（位于网络层和数据链路层之间）。 互联网层(internet layer) 是将整个网络体系结构贯穿在一起的关键层。它大致对应OSI 的网络层。互联网层的任务是将IP 分组投递到它们该去的地方。数据包的路由是这里最主要的问题，同时该层还要考虑拥塞控制问题。 传输层(transport layer) 的设计目标是允许源主机和目标主机上的对等实体进行对话，犹如OSI 的传输层一样。这里定义了两个端到端的协议TCP 和UDP。 应用层(application layer) 包含了所有的高层协议。如虚拟终端协议（TELNET）、文件传输协议（FTP）、电子邮件协议（SMTP）、DNS（Domain Name System）、HTTP以及用于传送实时媒体的RTP 等。 TCP/IP 模型及协议 应用层 HTTP SMTP RTP DNS 传输层 TCP UDP 互联网层 IP ICMP 链路层 DSL SONET 802.11 Ethernet 套接字编程实例: Internet 文件服务器 server.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/fcntl.h&gt;#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;netdb.h&gt;void fatal (char *string) &#123; printf("%s\n", string); exit(1);&#125;#define SERVER_PORT 12345#define BUF_SIZE 4096#define QUEUE_SIZE 10int main (int argc, char *argv[]) &#123; int s, b, l, fd, sa, bytes, on = 1; char buf[BUF_SIZE]; struct sockaddr_in channel; memset(&amp;channel, 0, sizeof(channel)); channel.sin_family = AF_INET; channel.sin_addr.s_addr = htonl(INADDR_ANY); channel.sin_port = htons(SERVER_PORT); s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); if (s &lt; 0) fatal("socket failed"); setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (char *) &amp;on, sizeof(on)); b = bind(s, (struct sockaddr *) &amp;channel, sizeof(channel)); if (b &lt; 0) fatal("bind failed"); l = listen(s, QUEUE_SIZE); if (l &lt; 0) fatal("listen failed"); while (1) &#123; sa = accept(s, 0, 0); if (sa &lt; 0) fatal("accept failed"); read(sa, buf, BUF_SIZE); fd = open(buf, O_RDONLY); if (fd &lt; 0) &#123; fatal("open failed"); &#125; while (1) &#123; bytes = read(fd, buf, BUF_SIZE); if (bytes &lt;= 0) break; write(sa, buf, bytes); &#125; close(fd); close(sa); &#125;&#125; client.c 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/socket.h&gt;#include &lt;netinet/in.h&gt;#include &lt;netdb.h&gt;void fatal (char *string) &#123; printf("%s\n", string); exit(1);&#125;#define SERVER_PORT 12345#define BUF_SIZE 4096int main (int argc, char **argv) &#123; int c, s, bytes; char buf[BUF_SIZE]; struct hostent *h; struct sockaddr_in channel; if (argc != 3) fatal("Usage: client server-name filename"); h = gethostbyname(argv[1]); if (!h) fatal("gethostbyname failed"); s = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP); if (s &lt; 0) fatal("socket"); memset(&amp;channel, 0, sizeof(channel)); channel.sin_family = AF_INET; memcpy(&amp;channel.sin_addr.s_addr, h-&gt;h_addr, h-&gt;h_length); channel.sin_port = htons(SERVER_PORT); c = connect(s, (struct sockaddr *) &amp;channel, sizeof(channel)); if (c &lt; 0) fatal("connect failed"); write(s, argv[2], strlen(argv[2]) + 1); while (1) &#123; bytes = read(s, buf, BUF_SIZE); if (bytes &lt;= 0) exit(0); write(1, buf, bytes); &#125;&#125; 路由算法最短路径算法 泛洪算法对多数情况是不适用的, 但是还有某些重要用途.如广播和无线网络. 距离矢量路由算法(Bellman-Ford算法)无穷计算问题 链路状态路由算法(Dijkstra算法)被广泛应用与实际网络中 层次路由 广播路由逆向路径转发 组播路由 计算机网络课程第二周-1.4计算机网络性能速率即数据率(data rate) 或称数据传输率或比特率(bit rate)单位 b/s(或bps), kb/s, Mb/s, Gb/sk = 10^3, M = 10^ 6, G = 10^9速率往往是指额定速率或标称速率 带宽(bandwidth) 是指信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹(Hz)网络中的带宽是数字型号所能传送的最高数据率, 单位 b/s(bps)常用的带宽单位:kb/s(10^3 b/s), Mb/s, Gb/s, Tb/s Q: 分组交换为什么会发生丢包和时延?A: 分组在路由器缓存中排队 四种分组延迟 结点处理延迟(nodal processing delay) 排队延迟(queueing delay)R: 链路带宽(bps)L: 分组长度(bits)a: 平均分组到达速率流量强度: La / R (接近1: 平均排队延迟大, 约等于0: 平均排队延迟很小, 大于1: 超出服务能力,平均排队延迟无限大) 传输延迟(transmission delay)L: 分组长度(bits)R: 链路带宽(bps)d = L / R 传播延迟(propagation delay)d: 物理链路长度s: 信号传播速度(~2 * 10^8 m/sec)dprop = d / s 时延带宽积 = 传播时延 * 带宽 = d * R (bits)链路的时延带宽积又称为以比特为单位的链路长度 分组丢失(丢包) 丢包率 = 丢包数 / 已发分组总数 队列缓存容量有限 分组到达已满队列将被丢弃 丢弃分组可能由前序节点或源重发(也可能不重发) 吞吐量/率(Throughput) : 表示在发送端与接受端之间传送数据速率(b/s) 即时吞吐量: 给定时刻的速率 平均吞吐量: 一段时间的平均速率 第5周 传输层(上)接收端进行多路分用传输层依据头部信息将收到的Segment 交给正确的Socket ,即不同的进程. 发送端进行多路复用从多个Socket 接收数据,为每个数据封装上头部信息,生成Segment ,交给网络层. UDP 校验和(checksum)csdn-二进制反码求和校验酸反 发送方将段的内容视为16-bit 整数计算所有整数的和,进位加在和的后面,将得到的值按位取反,得到校验和发送方将校验和放入校验和字段 接收方计算所收到段的校验和将其与校验和字段进行对比不相等: 检测出错误相等: 没有检测出错误(但可能有错误) 栗子123456789101112两个整数1 1 1 0 0 1 1 0 0 1 1 0 0 1 1 01 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1求和得到1(进位) 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1将进位的1 加到末位得到1 0 1 1 1 0 1 1 1 0 1 1 1 1 0 0 按位取反得到checksum0 1 0 0 0 1 0 0 0 1 0 0 0 0 1 1 可靠数据传输不错\不丢\不乱 第6周 传输层(下)GBN, SR, TCP 重传机制的比较 TCP - Tahoe : 1. slow-start, 每收到一个ACK, 拥塞窗口cwnd值加一, 因此每过一个RTT, cwnd翻倍 2. 当cwnd超过慢启动阙值(slow start threshold)ssthresh时, cwnd停止slow-start, 开始线性增长. 3. 当发生超时或者快速重传(收到三次重复确认)时, ssthresh = cwnd / 2, cwnd = 1; 重新开始slow-start 过程 TCP - Reno 1. slow-start 2. 当cwnd超过ssthresh时, cwnd停止slow-start, 开始线性增长 3. 当发生快速重传时, 进入快速恢复(fast recovery), ssthresh = cwnd / 2; cwnd = ssthresh; 4. 当发生超时, ssthresh = cwnd / 2; cwnd = 1; 重新开始slow-start 过程 第7周 网络层(上)IP分组格式 标志位 占3位, [保留, DF, MF]DF(Don’t Fragment) {1: 禁止分片, 0: 允许分片}MF(More Fragment) {1: 非最后一片, 0: 最后一片(或未分片)} 片偏移 字段占13位: 一个IP分组分片封装原IP 分组数据的相对偏移量片偏移字段以8 字节为单位 假设原IP 分组总长度L, 待转发链路的MTU(最大传输单元)为M若L&gt;M, 且DF = 0, 则可以/需要分片分片时每个分片的标识复制原IP 分组的标识通常分片时, 除了最后一个分片, 其他分片均为MTU 允许的最大分片一个最大分片可封装的数据应该是8 的倍数, 因此, 一个最大分片可以封装的数据为d = [(M - 20) / 8] * 8 // 向下取整需要的总片数为n = [(L - 20) / d] // 向上取整每片的片偏移量字段的取值为Fi = d / 8 * (i - 1) , 1 &lt;= i &lt;= n每片总长度字段为1234Li = &#123; d + 20 , 1 &lt;= i &lt; n L - (n - 1)d , i = n&#125; 特殊IP地址 (ipv4) NetID HostID 作为IP 分组源地址 作为IP 分组目的地址 用途 全0 全0 可以 不可以 在本网范围内表示本机, 在路由表中用于表示默认路由(相当于表示整个Internet网络) 全0 特定值 不可以 可以 表示本网内某个特定主机 全1 全1 不可以 可以 本网广播地址(路由器不转发) 特定值 全0 不可以 不可以 网络地址, 表示一个网络 特定值 全1 不可以 可以 直接广播地址, 对特定网络上所有主机进行广播 127 非全0 或非全1 的任何数 可以 可以 用于本地软件环回测试, 称为环回测试 私有IP地址 (ipv4) Class NetIDs Blocks A 10 1 B 172.16 to 172.31 16 C 192.168.0 to 192.168.255 256 子网掩码的应用 将IP分组的目的IP地址与子网掩码按位与运算, 提取子网地址例如:目的地址: 172.32.1.112, 子网掩码: 255.255.254.0172.32.1.112 = 10101100 00100000 00000001 01110000255.255.254.0 = 11111111 11111111 11111110 00000000与运算 = 10101100 00100000 00000000 00000000 = 172.32.0.0 所以:子网地址: 172.32.0.0 (子网掩码: 255.255.254.0)地址范围: 172.32.0.0 ~ 172.32.1.255可分配地址范围: 172.32.0.1 ~ 172.32.1.254广播地址: 172.32.1.255 第8周 网络层(下)主机如何获得IP地址 硬编码 - 静态配置 动态主机配置协议 DHCP - 从服务器动态获取 网络地址转换NAT内部网络设备对外界网络不可见 NAT穿透问题解决方案 静态配置NAT, 将特定端口的连接请求转发给服务器 利用UPnP(Universal Plug and Play)互联网网关设备协议(IGD- Internet Gateway Device), 自动配置: 学习到NAT公共IP地址 中继(如 skype) 互联网控制报文协议(ICMP) 差错(或异常)报告 网络探寻 距离向量路由算法 链路状态路由算法 RIP协议(Routing Information Protocol)(AS内)(使用距离向量路由算法)(使用UDP) OSPF协议(Open Shortest Path First)(AS内)(使用链路状态路由算法) BGP协议(Border Gateway Protocol)(AS间)(使用TCP)AS间: eBGPAS内: iBGP前缀: 到达某些AS需要经过的路径前缀的属性: AS-PATH, NEXT-HOPBGP路由选择: 输入策略(import policy)(如: 政策问题禁止将流量路由到某个AS)为什么AS间和AS内的路由协议不同?(策略policy, 规模scale, 性能performance) 链路层链路层服务: 组侦framing(封装数据报构成数据帧, 加首部和尾部)( 帧同步); 链路接入link access(如果是共享介质, 需要解决信道接入channel access)(帧首部的MAC地址, 用于表示帧的源和目的) 相邻结点间可靠交付(在低误码率的有线链路上很少采用, 如光纤,某些双绞线等)(无线链路: 误码率高,需要可靠交付) 流量控制(协调相邻的发送节点和接收) 差错检测(信号衰减和噪声会引起差错) 差错纠正 全双工和半双工通信控制 差错编码原理: D -&gt; DR R为差错检测与纠正比特(冗余比特)差错编码可分为检错码和纠错码检错码的检错能力: 对于检错码, 如果编码集的汉明距离ds=r+1, 则该差错编码可以检测r 位的差错.例如: {0000, 0101, 1010, 1111}的汉明距离为2, 可以100%检测1比特的差错(1比特的差错一定会变成一个无效编码)纠错码的纠错能力: 对于纠错码, 如果编码及的汉明距离ds=2r+1, 则该差错编码可以纠正r位的差错.例如: {000000, 010101, 101010, 111111}的汉明距离为3, 可以纠正1比特的差错(如100010纠正为101010, (纠正成离他最近的正确编码)). 奇偶校验码wikipedia1比特校验位 (检测奇数位差错(检错率50%))二维奇偶校验(检测奇数位差错, 部分偶数位差错)(纠正在同一行/列的奇数位差错) internet校验和(checksum)详见传输层-UDP校验和一般放入(UDP, TCP, IP)的校验和字段 循环冗余校验码(CRC)广泛应用于数据链路层,检错能力强大模2运算 D: 数据比特G: r+1位的比特模式(生成比特模式)R: r位的CRC比特 发送方和接收方使用相同的G, 可以检测出所有长度小于r+1的差错发送方: 构造出的编码结果要能被G整除, 根据D和G计算出R, 将D和R拼接成&lt; D,R&gt;, 即编码结果接收方: 将&lt; D,R&gt; 除以G(模2), 余式为0则无错, 否则出错. &lt; D, R&gt;的构造方法&gt; 将D左移r位, D * 2^r D左移r位的结果除以G(模2), 得到结果whatever和余数R 将D左移r位的结果 减去余数(模2), 得到(D * 2^r - R), 也就是(D * r^r XOR R), 也就是D与R拼接得到&lt; D,R&gt;, 这个结果可以被G整除(被除数减掉余数的结果肯定能被除数除尽) 举例:12345678910111213被校验的数据M(x)=1000，其选择生成多项式为G(x)=x^3+x+1,该数据的循环冗余校验和应为多少？G(x)=x^3+x+1对应的二进制数为1011，且G(x)中含3个项式，生成多项式为4位二进制，由CRC规则应该取(4-1)=3位(校验和)，所以可以预加上3位得到1000B*2^3=1000 000B;1000 000B（被除数）对1011（除数）做模2除法，得到的余数便是101B(即CRC校验和)，所以该数据的循环冗余校验后的数据应为1000 000B+101B=1000101B。 Multiple access links , protocolstwo types of links point-to-point broadcast(shared wire or medium) multiple access protocol distributed algorithm that determines how nodes share channel. MAC protocols: taxonomy channel partitioningTDMA: time division multiple accessFDMA: frequency division multiple access random accessSlotted ALOHA (只能在某个时期开始时发, 如果两个节点冲突, 则下次两个节点都以概率p发送, 必须满足时钟同步, 节点必须能够检测到冲突, 效率0.37)Pure(unslotted) ALOHA (不分时期, 能直接发送, 效率比slotted Aloha更低, 0.18)CSMA(carrier sense multiple access)(listen before transmit, 也可能冲突)CSMA/CD(collision detection)(发送数据过程中检测冲突)(Ethernet CSMA/CD algorithm)Lmin / R = 2 S / V800bit / 1Gbps = 2 80m / 200000Kmps taking turnspolling (master node invites slave nodes to transmit in turn)token passing (control token passed from one node to next sequentially) LanMAC address and ARP ARP表: LAN 中每个IP节点(主机, 路由器)维护一个表(存储某些LAN节点的IP/MAC地址映射关系) A想要给同一局域网内的B发送数据包(B的MAC地址不在A的ARP表中)则A广播ARP查询分组, 其中包含B的IP地址(广播的MAC地址=FF-FF-FF-FF-FF-FF) Ethernetbus(总线) (all nodes in same collision domain) star(星型) (each ‘spoke’ runs a Ethernet protocol (nodes do not collid with each other)) 以太网: 无连接(没有握手), 不可靠(没有确认) Ethernet fram structure(见上 以太网帧结构)preamble(8) des-add(6) sour-add(6) type(2) data(46-1500) CRC(4)Lmin = 64B , data(min) = 64 - 6 - 6 - 2 - 4 = 46B switches(交换机)存储, 转发以太网帧 识别帧中的MAC 地址, 选择性地转发 Ethernet protocol used on each incoming link, but no collisions; full duplex (each link is its own collision domain) switch table (each entry: MAC address of host, interface to reach host, time stamp) switch: self-learning 网络层路由器设备隔离广播域, 广播的范围为一个IP子网注意区分冲突域 和广播域 交换机 vs 路由器都有存储转发路由器: 网络层, routing algorithms, IP addresses交换机: 数据链路层 , learn forwarding table using flooding, learning, MAC addresses summary comparison - hubs switches bridges routers layer 1 2 2 3 traffic isolation no yes yes yes storm isolation no no no yes plug and play yes yes yes no optimal routing no no no yes cut through yes yes yes no VLAN基于端口的VLAN流量隔离 (come/from 端口1-8的帧只到达端口1-8)动态成员 (端口可以动态分配给不同的成员)在VLAN间转发(通过路由, 就像在独立的交换机之间)(实践中, 厂商会将交换机和路由器集成在一起,因此不需要另外接路由器) 跨越多交换机的VLAN多线缆连接(每个线缆连接一个VLAN)中继端口(在跨越多个物理交换机定义的VLAN承载帧)(为多个VLAN转发802.1帧容易产生歧义(必须携带VLAN ID信息))(802.1q协议为经过中继端口转发的帧增加/去除 额外的首部域) PPPone Sender and one Receiver, one link,no Media Access Control,no need for MAC address packet framingbit transparencyerror detectionconnection livenessnetwork layer address negotiation no error correction/cecoveryno flow controlout of order delivery OKno need to support multiple links Byte Stuffing字节填充帧定界(标识帧的开始或者结束), 标识字节&lt; 0 111 111 0&gt;因此在发送数据时要进行字节填充, 扫描数据, 若发现0 111 111 0或0 111 110 1, 则在前面添加额外的字节0 111 110 1 交换网络层数据之前, PPP数据链路两端需要: 配置PPP链路 学习/配置网络层信息(如对于IP协议, 通过交换IPCP协议报文, 完成IP地址等相关信息的配置) link virtualization: MPLS物理层channel capacity(the maximum rate at which data can be transmitted over a given communication path(channel)) Data rate(in bits per second)Bandwidth(in cycles per second of Hertz) // 比特率和波特率的关系C = Blog2M(C bps, B baud rate, Bd, B = 2H, (H Hz)) // 比特率和带宽的关系C = 2Blog2M (C bps, B Hz)C-channel capacity, B-bandwidth, M-the number of discrete signalexample: 带宽3KHz, 采用4个相位, 每个相位4种振幅的QAM调制技术, 则该通信链路的最大数据传输速率是: 24 kbps2 4 log2 16 = 24 Shannon Capacity FormulationC=Blog2 (1 + S / N)S/N - signal-to-noise ratio信噪比 S/N is often reported in descibels (dB)(S/N)db = 10log10 (S / N) Data Rate(Bit rate-R)(Rate of data transmission in bits per second)Modulation rate(Baud rate-B)(Rate at width the signal level changes)R = Blog2 M(M-Number of states of code element) Pulse Code Modulation(PCM)(脉冲编码调制) Spread Spectrum (扩频) 异步/同步 传输(异步: start bits, stop bits)(同步: 单独的时钟线, 或者将时钟信号嵌入到数据中) Media Interfacing 无线与移动网络wirelesswireless link(无线链路)(信号随距离衰减)(容易受干扰)() 信噪比低, 误码率高(SNR versus BER tradeoffs) multiple access 可能遇到的问题Hidden terminal problem(障碍物导致的隐藏终端问题)Signal attenuation(信号衰减导致的问题) CDMA(码分多址)(每个用户分配不同的码片序列) 802.11IEEE 802.11 Wireless LAN(WiFi) 802.11b 802.11a 802.11g 802.11n (multiple antennae)(2.4-2.5 GHz range)(up to 600Mbs) MIMO (多输入多输出) OFDM (正交频分多路) base station = access point (ap) BSS(basic service set)(基站子系统) SSID host: must associate with an AP multiple access(可能产生的冲突问题)CSMA - sense before transmittingno collision dection(not CSMA/CD), use CSMA/CA(collision avoidance)(不能完全避免冲突, 能避免数据帧冲突)发送端: 监听信道, 如果信道空闲, 且空闲了DIFS(分布式帧间间隙, 根据优先级有不同的时间间隙)时间, 则发送数据; 如果信道忙, 则启动随机的backoff time, 等信道空闲则启动倒计时, 倒计时结束后信道空闲则发送数据.接收端: 如果接收到数据完成, 等待SIFS时间后返回ACK避免冲突: 发送方先给BS发送一个RTS(request-to-send)包(使用CSMA), BS广播一个CTS作为RTS的回应; CTS被所有的节点监听到, 这样其他的节点就不会发送数据 AP不需要IP地址, 其为链路层设备 802.11 frame MTU 2312 Cellular Internet accessmobilitymobile IPhome network home agent permanent addressvisited network foreign agent care-of-address GSMhome network home location register (HLR) visited network visitor location register(VLR)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JS 超长数字的坑]]></title>
      <url>%2F2016%2F09%2F06%2FJS-%E8%B6%85%E9%95%BF%E6%95%B0%E5%AD%97%E7%9A%84%E5%9D%91%2F</url>
      <content type="text"><![CDATA[12345678910const num1 = 1234567890123456const num2 = 12345678901234567const str1 = '1234567890123456'const str2 = `12345678901234567`console.log(num1 === str1) // falseconsole.log(`$&#123;num1&#125;` === str1) // trueconsole.log(num2 === str2) // falseconsole.log(`$&#123;num2&#125;` === str2) // false]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2011-午夜巴黎]]></title>
      <url>%2F2016%2F08%2F25%2F2011-%E5%8D%88%E5%A4%9C%E5%B7%B4%E9%BB%8E%2F</url>
      <content type="text"><![CDATA[]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[React-Native Startup]]></title>
      <url>%2F2016%2F08%2F08%2FReact-Native-Startup%2F</url>
      <content type="text"><![CDATA[配置环境JDK先下载JDK解压到/usr/lib/jvm 下 修改环境变量12345678910$ vi ~/.bashrc# 在末尾增加以下内容export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_101export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH# 使环境变量生效$ source ~/.bashrc Android Studio(https://developer.android.com/studio/install.html)先下载Android Studio解压到/usr/local/src 下 1234567891011121314151617181920# 设置软链接$ sudo ln -s /usr/local/src/android-studio/bin/studio.sh /usr/local/bin/studio# 64位的ubuntu需要安装以下库$ sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6# 执行安装引导$ studio# Sdk安装到了~/Android/Sdk$ vi ~/.bashrc# 在文件末尾添加# ANDROID_HOME环境变量export ANDROID_HOME=/home/beim/Android/Sdk# Android SDK 的Tools 目录添加到PATH 变量中PATH="~/Android/Sdk/tools:~/Android/Sdk/platform-tools:$&#123;PATH&#125;"export PATH# 使环境变量生效source ~/.bashrc SDK$ studio 进入Android Studio在SDK Platform 窗口中，选择Show Package Details, 然后在Android 6.0 (Marshmallow)中勾选Google APIs、Intel x86 Atom System Image、Intel x86 Atom_64 System Image以及Google APIs Intel x86 Atom_64 System Image。在SDK Tools窗口中，选择Show Package Details，然后在Android SDK Build Tools中勾选Android SDK Build-Tools 23.0.1。（必须是这个版本）然后点击apply,等待下载和应用变更。 adb12345# 系统adb的版本要和android sdk platform-tools 的版本相同$ adb version 检查版本# 设置软链接$ sudo ln -s ~/Android/Sdk/platform-tools/adb /usr/local/bin/adb React Nativesudo npm install -g react-native-cli genymotion安卓模拟器（如果用真机可以不安装）下载将下载下来的bin文件放置到用户目录下（/home/beim) 1234# 更改权限$ chmod 777 /home/beim/genymotion-2.7.2-linux_x64.bin# 安装$ ./genymotion-2.7.2-linux_x64.bin …安装完成之后打开genymotion选择settings-ADB-Use custom Android SDK tools填入之前安装Sdk的路径（/home/beim/Android/Sdk) 选择Add寻找合适（API23）的虚拟机下载并测试打开。 测试12345678910111213141516171819# 进入放置项目文件的目录$ react-native init AwesomeProject# 耗费一定时间，需要科学上网。也可到github 上找别人打包好的文件$ cd AwesomeProject$ react-native start # 或者 npm start# 确保真机或者虚拟机设备已经连接$ adb devices# 另开一个终端$ react-native run-android# 这时候可以看到真机/虚拟机打开了应用# 如果出现红屏提示无法连接到服务器# `按menu 键`或者 `摇一摇` 或者 `adb shell input keyevent 82` 打开开发者菜单# 点击进入 ` Dev Settings`# 点击`Debug server host for device`# 如果是真机，输入你电脑的ip地址和端口号（如192.168.1.101:8081); 如果在虚拟机，输入`0.0.0.0:8081`# 返回`开发者菜单`，选择`Reload JS` 参考链接React-Native中文网-搭建开发环境React-Native中文网-在设备上运行React-Native官网Stack Overflow adb server version (32) doesn’t match this client (36); killing …史上最全Windows版本安装React Native环境配置]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ubuntu 启动初始化]]></title>
      <url>%2F2016%2F08%2F05%2Fubuntu-%E5%90%AF%E5%8A%A8%E5%88%9D%E5%A7%8B%E5%8C%96%2F</url>
      <content type="text"><![CDATA[首先看这几个目录：12345678910# sysvinit 的文件/etc/init.d # sysvinit 启动服务的脚本/etc/rc$&#123;runlevel&#125;.d # 指向sysvinit 目录下脚本的软链接，系统通过区分不同目录来加载对应运行级别的程序。# upstart 的文件/etc/init # upstart 的启动配置文件。# systemd 的文件/etc/systemd/system # 指向/lib/systemd/system 的软链接，可以通过增删软链接来启用或者禁用启动服务。/lib/systemd/system # systemd 的启动配置文件。 ubuntu 16采用的是systemd 初始化系统ubuntu 14采用的是upstart 初始化系统sysvinit 则是更早版本的启动服务 为了兼容性，systemd 和upstart 都会支持sysvinit 一些工具sysvinit 启动的服务可以通过service 来控制 $ service --status-all 查看服务启动的状态，列出的服务和/etc/init.d 目录下的脚本是一一对应的。 $ service serviceName start/stop 启用或者关闭服务。 进入/etc/rc2.d 目录12$ cd /etc/rc2.d$ ll 可以看到除了README 外，其他程序都是S || K + 数字 + 程序名的形式。S表示Start，也就是启动，K表示Kill（从其他运行级别切换过来需要关闭的程序）。后面的数字表示处理顺序，数字越小越早处理，数字相同时按照程序名的字母顺序启动。可以通过修改S 或者K 来管理服务启动项。更建议使用工具来修改：sysv-rc-conf(修改不同运行级别的启动项)，rcconf（修改当前运行级别的启动项）。 参考链接 Linux 的启动流程_阮一峰（初始化部分与ubuntu 不同，ubuntu 现在采用的是Upstart 启动服务） Ubuntu init启动流程分析(解释了System V initialization 和 Upstart 两种方式) ubuntuwiki启动 浅析 Linux 初始化 init 系统，第 2 部分: UpStart upstart把应用封装成系统服务 upstart_cookbook Systemd 入门教程：命令篇 Systemd 入门教程：实战篇 Node 应用的 Systemd 启动 浅析 Linux 初始化 init 系统，第 3 部分: Systemd]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git命令之 git tag]]></title>
      <url>%2F2016%2F08%2F05%2Fgit%E5%91%BD%E4%BB%A4%E4%B9%8B-git-tag%2F</url>
      <content type="text"><![CDATA[列出标签1git tag 打标签12345#创建轻量标签git tag v0.1.2#创建附注标签git tag -a v0.1.2 -m '0.1.2版本' 切换到标签1git checkout tagname 查看标签信息1git show v0.1 删除标签1git tag -d v0.1.2 给指定的commit打标签1git tag -a v0.1.1 0fbc3d0 标签发布到git服务器1234git push origin v0.1.2#一次性提交所有标签到origingit push origin --tags 删除远程tag123git push origin :refs/tags/tag-name#其实分支也是这样git push origin :branch-name]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Node.js的内部结构]]></title>
      <url>%2F2016%2F08%2F05%2FNode-js%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84%2F</url>
      <content type="text"><![CDATA[首先, 关于JavaScript的一些话…… Jeff Atwood, Stack Overflow的联合创始人之一, 曾经在它的博客Coding Horror中写道: any application that can be written in JavaScript, will eventually be written in JavaScript JavaScript影响范围在过去几年中有相当大的增长, 以至于它现在已经成为最受欢迎的编程语言之一. 实际上, 在2016 SO Deverloper Survey中, JavaScript在Most Popular Technology和 Top Tech on Stack Overflow上都排名第一, 并且在其他几个调查结果的排名都不错. Node.js是一个服务端JavaScript运行环境, 它奠定了服务端重要功能的基础,如二进制数据操作, 文件系统I/O操作, 数据库访问, 计算机网络等等. 它独特的特性让它在现有的久经考验的框架中突显出来,(如Django(Python), Laravel(PHP), RoR(Ruby)等).也正是这些特性让科技公司如PayPal, Tinder, Medium, LinkedIn 和 Netflix 接受了它, 有些甚至在Node.js达到1.0版本之前就开始使用. 我最近回答了一个关于Node.js内部结构的问题,正是这个问题激励我写下这篇文章. 官方文档对于理解Node.js究竟是什么并没有什么帮助: a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model …… 为了理解这则声明,和它有多强大, 让我们将Node.js的组件分解, 解释其中关键的术语, 然后解释这些组件是怎样互相影响并让Node.js如此强大. COMPONENTS/DEPENDENCIES(组件/依赖)V8: Google开源,以C++实现的高性能JavaScript引擎. 这和你的Chrome浏览器的引擎是一样的. V8会处理你的JavaScript代码, 并将它编译成机器码(因此它飞一样快), 并执行. V8到底有多快? 查看这个SO答案 libuv: 提供异步特性的C library. 它用来支持event loop(事件循环), a thread pool(线程池), file system events(文件系统事件), 和 child processes(子进程), 还有其他关键功能. Other C/C++ Components/Dependencies: 例如 c-ares, crypto(OpenSSL), http-parser, 和zlib. 这些依赖提供了与服务器的较低层次的交互, 建立一些重要的功能如networking(网络),compressing(压缩),encrypting(加密)等等. Application/Modules这是所有的JavaScript 代码存在的地方: 你的程序代码, Node.js核心模块, 你从npm下载的模块, 和你自己写的模块. 你大部分的工作都在这个部分. Bindings: 你可能已经注意到, Node.js是用JavaScript和C/C++写成的. 用这么多C/C++代码或者libraries的原因很简单:他们很快啊! 然后你写的JavaScript代码是怎么平滑地转换成C/C++代码的呢? 难道他们不是两种不同的语言吗? 对确实是. 并且通常来说用不同语言写代码不能互相通信. 但是有bindings(绑定)就不一样了. Bindings(绑定), 正像它名字一样, 是将一种语言和另一种语言”绑定”起来的胶水代码, 这样的话他们就能够进行交互了. 在这种情况下(Node.js), bindings只将C/C++写的Node.js核心内部库(c-ares, zlib, OpenSSL, http-parser, 等等)暴露给JavaScript. 写bindings的动机之一是代码复用: 如果想要的功能已经实现了,为什么要再重新写一遍呢?只是因为它们是不同的语言吗?只是连接他们不就好了? 另一个动机是性能: 像C/C++这样的系统编程语言的性能通常比其他高级语言更好(如 Python, JavaScript, Ruby等). 因此对于像CPU密集型这样的操作让C/C++写的代码去做就好了. C/C++ Addons: bindings只提供Node.js的核心内部库的胶水代码(如 zlib, OpenSSL, c-ares, http-parser等等). 如果你想要在你的程序中加入第三方或者你自己的C/C++库, 你自己要为你的库写胶水代码. 你写的这些胶水代码被叫做addons(插件). 你可以把bindings和addons看做你的JavaScript代码和Node.js的C/C++代码沟通的桥梁. TERMINOLOGIES(术语)I/O: Input/Output的缩写. 它基本代表了系统的I/O子系统的所有操作. I/O-bound(I/O密集型)操作通常涉及与硬盘/驱动器的交互. 例如数据库访问和文件系统操作. 其他相关的概念有CPU-bound, memory-bound等等. 检测一个操作是否属于I/O-bound, CPU-bound,或者其他类型, 需要增加特定操作所用的资源, 看哪个会获得更好的性能. 例如,如果CPU计算能力增强, 该操作会明显变快, 那么它属于CPU-bound. Non-blocking/Asynchronous(非阻塞/异步): 通常来说, 当一个请求进来时, 程序会处理这个请求并在这个请求处理完成之前停止其他所有操作. 这立刻暴露出一个问题: 当大量请求同时到来时, 每个请求都得等之前的请求处理完. 换句话说, 先前的操作会阻塞它之后的操作. 情况还可能更糟, 如果先前的操作响应时间很长(例如,计算前1000个质数,或者从数据库中读取3GB的数据),其他所有的请求都会被终止/阻塞很长事件. 为了解决这个问题, 你可以采取多进程 和/或 多线程的解决方法, 它们各有优缺点. Node.js的处理方式不同, 它并没有为每个新请求开一个新进程, 所有的请求都使用单线程处理, 这几乎就是它做的所有事情: 处理请求–请求中所有(I/O)操作(例如文件系统访问,数据库读写)都送到worker线程,也就是背后的libuv(上面有提到). 换句话说, 请求中所有的I/O操作都是异步处理, 并不在主线程中处理.这种方法使得主线程永远不会被阻塞, 因为繁重的操作都转移到了其他的地方. 你(还有你的程序代码)只需要在主线程中工作. 所有libuv的线程池里的worker线程对你都是透明的. 你永远也不需要直接操作它们(也不需要担心). Node.js会帮你照顾它们. 这个结构使得I/O操作变得非常高效. 然而,这也不是没有缺点的. 操作不止包含I/O-bound,而且还有CPU-bound, memory-bound等等. Node.js只给你提供了I/O任务的异步方法, 当热也有办法来解决CPU密集型操作. 然而这不在本文讨论范围内. Event-Driven(事件驱动的): 一般的, 几乎所有的现代系统中, 在主程序开始以后, 进程通过传入的请求来初始化. 然而就是从这里开始产生区别, 有时候不同技术的区别是巨大的. 通常的实现是按程序处理请求: 为一个请求开一个线程; 操作一个接一个的完成; 如果哪个操作慢了, 它之后的操作都会在那个操作被暂停; 当所有的操作都完成, 再返回响应. 然而,在Node.js中, 所有的操作都作为事件注册到Node.js中, 等待被触发, 它们可能被主程序或者请求触发. Runtime(System): Node.js运行环境是整个代码库(上面提到的组件), 包括低级和高级, 同时为Node.js程序的执行提供支持. PUTTING EVERYTHING TOGETHER(整合)现在我们对Node.js的组件有了大致概念, 接下来看它的工作流程, 之后你将对它的结构和不同组件间如何交互有更好的了解. 当Node.js程序开始运行的时候, V8引擎会运行你写的陈旭代码. 你程序中的对象会保持一系列observers(观察者)(注册到events的方法). 当它们预期的事件发出之后,这些observers将会得到通知. 当一个事件发出, 它的回调函数将会排入event queue(事件队列). 只要队列中还有事件,event loop(事件循环)就会将队列中的事件出列并添加到call stack(调用堆栈), 需要注意的是, 只有之间的事件被处理完(调用堆栈清空后), event loop才会将下一个事件放到call stack. 在call stack中, 当遇到I/O操作, 它将会被交给libuv去处理. 默认的, libuv保持4个worker线程的线程池, 这个默认值可以被修改. worker线程会根据I/O操作的类型, 和Node.js的低层次库交互,来决定执行的具体操作如数据库读写, 文件系统访问,网络等待. 当处理完毕之后, libuv会将这个事件enqueue(出列)并放回到event queue(事件队列)中, 等待主线程处理. 这时, libuv异步处理了I/O操作, 主线程并没有等待操作的结果而是继续进行. 被libuv返回的事件在event loop(事件循环)再次将它放到call stack(调用堆栈)的时候被主线程处理. 这样就完成了一个Node.js程序事件的生命周期. mbq曾经以餐馆对Node.js作了绝妙的比喻. 我将借用它的范例并稍作修改来让Node.js周期更容易理解. 把Node.js程序看做星巴克. 一个高效,训练有素的服务员(唯一的主线程)来下订单. 当大量客户同时进入咖啡厅, 他们将会等待服务员的服务(事件队列的入队). 当服务员接待一个客户之后, 他会把客户的订单交给一个管理员(libuv), 管理员会给每个订单交给一个咖啡师(worker thread). 咖啡师会根据顾客的要求用不同的配料和机器(底层的C/C++组件)来制作不同种的饮料.一般情况下会有4个咖啡师值班(thread pool). 然而,在高峰期, 可以让更多的咖啡师来工作(然而这应该在一天刚开始的时候来做, 而不是午休期间). 当服务员将订单提交给管理员之后, 他并没有等咖啡做好之后再服务下一位顾客, 而是叫下一位顾客(event loop将下一个事件出列,并放到call stack). 你可以把call stack中的事件看做是正在柜台被服务的顾客. 当咖啡做好之后, 咖啡将会被送到顾客队列的末尾. 当咖啡移动到柜台的时候, 服务员会叫顾客的名字,然后顾客拿到咖啡.(这在现实生活中可能有点怪, 然而你从程序的进程的角度来想的话就合理了) 这样就完成了Node.js的内部代码库和它的事件生命周期的高度概览. 然而这是很概括性的,并没有包括很多问题和细节, 例如CPU-bound操作处理, Node.js设计模式等. 原文]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[跨域请求之JSONP与CORS]]></title>
      <url>%2F2016%2F08%2F05%2F%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E4%B9%8BJSONP%E4%B8%8ECORS%2F</url>
      <content type="text"><![CDATA[遇到的问题在使用wikipedia的API的时候，直接发送ajax请求得到以下信息： 1XMLHttpRequest cannot load https://en.wikipedia.org/w/api.php?action=query&amp;format=json&amp;list=search&amp;srsearch=1. Response to preflight request doesn’t pass access control check: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘http://s.codepen.io’ is therefore not allowed access. 这是由于XMLHttpRequest对象受限于同源策略(same origin-policy)。这个策略使得页面只能从同一个源(origin)获取数据。源是由协议(protocol)，主机(host)，端口号(port number)决定的。例如https://www.sitepoint.com/jsonp-examples/ 的源就是https, www.sitepoint.com, 80。 同源策略是一个安全机制。它避免了脚本从你的域读取数据并发送到别的服务器上。 下面介绍两种解决方法： JSONP(JSON with Padding)script标签可以从另一个域中载入数据，。因此我们可以新建一个script标签，设置src属性，然后插入到页面中 JSONP就建立在这种技术之上，它给我们提供了一种处理返回数据的方法。它将服务器返回的JSON数据包裹在一个回调函数中(即padding)。这个回调函数必须在处理JSONP返回数据的页面中。 例如： 12345678var JSON_CALLBACK = function(res)&#123; console.log(res)&#125;let url = 'https://en.wikipedia.org/w/api.php?action=query&amp;format=json&amp;list=search&amp;srsearch=' + this.state.svalue + '&amp;callback=JSON_CALLBACK'//JSON_CALLBACK即回调函数名称let scriptTag = document.createElement('script')scriptTag.setAttribute('src', url)document.body.appendChild(scriptTag) 这种方法只在跨域 GET请求有用。 CORS(Cross-Origin Resource Sharing跨域资源共享)CORS是允许请求跨域资源的机制。 对于AJAX和HTTP请求，浏览器会先对请求预检(preflight)，向目标服务器发送HTTP OPTIONS 请求头， 然后从服务器获得许可(approval)，再发送实际的HTTP请求。 以下情况将会发送预请求 请求以 GET, HEAD 或者 POST 以外的方法发起请求。或者，使用 POST，但请求数据为 application/x-www-form-urlencoded, multipart/form-data 或者 text/plain 以外的数据类型。比如说，用 POST 发送数据类型为 application/xml 或者 text/xml 的 XML 数据的请求。 使用自定义请求头（比如添加诸如 X-PINGOTHER） 举个栗子： 浏览器发送OPTIONS请求，带有Origin HTTP头。 这个请求头的值即当前页面的域。当http://www.foo.com的页面尝试获取 bar.com的数据时，会给bar.com 发送下列请求头：Origin: http://www.foo.com 服务器可能会返回 Access-Control-Allow-Origin: http://www.foo.com。（ACAO)响应头表明允许的源站点。 如果服务器不支持跨域请求，将会返回错误。 Access-Control-Allow-Origin: *。(ACAO)响应头表明允许所有域。 JSONP vs CORS两种方法都需要服务器支持。 JSONP只支持GET请求方法。JSONP可能造成XSS问题。 CORS可以看做现代的JSONP替代方案。CORS还能支持GET以外的HTTP请求，对错误处理和安全支持也更好。 参考链接stackoverflow stackoverflow解决了项目中POST 请求的问题，由于在发送真正的POST 请求之前会发送一个OPTIONS 请求，将这个请求的status 置为200，则下一步发送真正的POST 请求。 MDN]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JS-类和对象]]></title>
      <url>%2F2016%2F08%2F05%2FJS-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%2F</url>
      <content type="text"><![CDATA[构造函数法123456789101112131415161718function Cat(like) &#123; var nickName = 'myNickName' this.callNickName = function() &#123; return nickName; &#125; this.name = 'myName' this.like = like&#125;var cat1 = new Cat('dog')console.log(cat1.name) // myNameconsole.log(cat1.nickName) // undefinedconsole.log(cat1.callNickName()) // myNickNameconsole.log(cat1.like) // dog// 属性和方法也可以定义在function对象的prototype对象上Cat.prototype.makeSound = function() &#123; console.log('miao')&#125;cat1.makeSound() // miao Object.create()123456789var Cat = &#123; name: 'myName', makeSound: function() &#123; console.log('miao') &#125;&#125;var cat1 = Object.create(Cat) console.log(cat1.name) // myName cat1.makeSound() // miao Class12345678910111213141516171819class Point &#123; constructor(x, y) &#123; this.x = x this.y = y &#125; toString() &#123; return '(' + this.x + ', ' + this.y + ')' &#125; say() &#123; console.log('say something') &#125;&#125;console.log(typeof Point) // functionconsole.log(Point === Point.prototype.constructor) // trueconsole.log(Point.toString()) // class Point &#123; ... &#125;var point = new Point(1, 2)console.log(point.toString()) // (1, 2)point.say() // say somethingPoint.say() // Error! 参考链接 前两种方法 第三种方法]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[测试框架AVA]]></title>
      <url>%2F2016%2F08%2F05%2F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6AVA%2F</url>
      <content type="text"><![CDATA[面向未来的测试运行器 关于AVA的介绍 github 用法全局安装AVA，在项目中用 –init 参数运行命令，会将AVA添加到package.json123456789101112$ npm install --global ava$ ava --init#package.json&#123; "name": "awesome-package", "scripts": &#123; "test": "ava" &#125;, "devDependencies": &#123; "ava": "^0.11.0" &#125;&#125;![ava](/images/ceshiheader) 手动安装123nstall --save-dev ava#再对 ``package.json`` 配置 ``test`` 脚本 （如上） 测试一下12345678910111213141516#main.jslet a = (x) =&gt; &#123; if (x &gt; 0) return x * x return x&#125;module.exports = a#test.jsconst test = require('ava')const a = require('./main.js')test('give 3 should return 9', t =&gt; &#123; t.is(a(3), 9)&#125;)test('git -3 should return -3', t =&gt; &#123; t.is(a(-3), -3)&#125;) 1234beim@Idea:~/temp/ava$ ava -v ✔ give 3 should return 9 ✔ git -3 should return -3 2 tests passed [10:19:26 GMT+0800 (CST)] 测试覆盖率官方推荐使用nyc 用法123456789$ npm install nyc --save-dev#或全局安装$ npm install nyc -g#修改package.json 的test 脚本&#123; "script": &#123; "test": "nyc ava ./test/*.js" &#125;&#125; 测试一下123456#修改之前的package.json&#123; "scripts": &#123; "test": "nyc ava -v" &#125;&#125; 123456789101112beim@Idea:~/temp/ava$ npm test&gt; @ test /home/beim/temp/ava&gt; nyc ava -v ✔ give 3 should return 9 ✔ git -3 should return -3 2 tests passed [10:23:53 GMT+0800 (CST)]----------|----------|----------|----------|----------|----------------|File | % Stmts | % Branch | % Funcs | % Lines |Uncovered Lines |----------|----------|----------|----------|----------|----------------|All files | 100 | 100 | 100 | 100 | | main.js | 100 | 100 | 100 | 100 | |----------|----------|----------|----------|----------|----------------|]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017-白日梦]]></title>
      <url>%2F1970%2F01%2F02%2F2017-%E7%99%BD%E6%97%A5%E6%A2%A6%2F</url>
      <content type="text"><![CDATA[only my railgun Jan 白日梦 Departures〜あなたにおくるアイの歌〜 Sun Jan 1 22:11 白日梦 好想好回家回美地躺在自己的小房间里玩跑跑，玩冒险岛，看小说 Thu Jan 5 01:23 白日梦 飞行兔SR呀再也抽不到了 Thu Jan 5 13:51 白日梦 在国服跑跑偶遇琉璃深灰白！那时候玩韩服多亏有她呢她说还记得我hhh Fri Jan 6 23:52 夏娜 无限的时间将跳动停止，人们消声无息的燃烧着，没有任何人注意到，世界已经脱轨，被红世之火所包围。 Sat Jan 7 20:50 白日梦 正在教室看遗传算法论文。。之前选题的论文是英文的，看的过程中google关键字偶然发现了一篇中文论文，内容几乎一样。。。再google 中文论文里的关键字，找到了英文论文的中文翻译QAQ真是。。嗨呀～ Sat Jan 7 20:54 白日梦 这一天棍棍又回想起了被思思血虐的恐惧。。 Mon Jan 9 22:34 白日梦 支付宝上每天都能看见可能认识的好友 至此经年23333 Tue Jan 10 16:29 白日梦 刚才我下楼碰见一个女孩 贼好看我推门的时候没看见她在门后然后她笑着躲开卧槽那一瞬间太美了 Tue Jan 10 18:51 白日梦 在大陆的生活还是太快～ Tue Jan 10 21:01 白日梦 发现一个网站主页上的图片~ Thu Jan 12 09:47 白日梦 要出发了~成都成都~ Sat Jan 14 10:58 白日梦 I’ll miss you terribly Wed Jan 25 21:14 大家 今天下午和同学9个人玩狼人杀 然后吃晚饭 吃完不知道去干嘛 但是都舍不得散 于是就出来压马路 绕着步行街走了一圈又一圈∠( ᐛ 」∠)＿ 到九点才各自坐末班车回家😂 Thu Jan 26 22:38 白日梦 突然想起自己小时候和老爸斗智斗勇2333很小的时候我就爱看电视，一看一整天，哪个台在哪个频道都一清二楚的那种hhh 老爸逼我写了多少张保证书都不好使 于是他断我电闸 那时候还是开关式的 在墙上挂得很高 我就搬凳子上去打开 一张不够要两张hhh 在老爸把我胖揍一顿之后我愤然把电视信号线剪断以表决心 但是第二天发现接上之后还能看啊2333于是偷偷摸摸又看了好长时间直到买了新的线hhhh四年级的时候 家里有了电脑 于是斗争阵地转移 老爸还是用老招数断电 可是新家的电闸是空气开关啊我够得着2333 太简单秒过~ 后来再断电，家里电闸却没关，我以为是停电，可是喵的对门怎么没停电？？于是我偶然地下楼把单元楼对应我家的电闸打开了（噢哈哈哈）老爸发现断电不好使以后开始没收我鼠标，于是开始在家里藏鼠标-找鼠标的游戏。沙发底下，空调顶上，衣柜衣服口袋里，还有搬梯子才能够到的柜子里。。。最变态的一次居然藏到了垃圾桶的垃圾袋下面！我居然还找到了！！！WTF？？！！最easy的一次是藏到了我的书包里面，老爸啊老爸，你以为我真的不会学习吗啊哈哈哈！！！当然还遇到过真*难关，老妈拿出了神器-房间钥匙，每次她出门都把我的书房锁上QAQ 简直无解啊。。然而。。由于家里几个房间钥匙都长得差不多，某天我偷偷把卧室和书房钥匙对换了一下。。233333机智如我。。这次真是干得天衣无缝啊哈哈哈 我甚至还把同学叫来家里玩电脑 然而就在那次被老妈回家撞见QAQ 果然还是不能浪。。。 Fri Jan 27 12:42 Feb 白日梦 到乡下的路越来越好, 在乡下呆的时间却越来越少. Wed Feb 1 10:02 狼人杀 第三次狼人杀 真的是上瘾啊2333 近期不玩了~~当狼跳预言家太多了导致拿到真预言家的时候,文旭民居然跳预言家刚我…噗最后一把悍跳预言家发女巫金水推掉真预言家完胜2333 嗨呀下次出门再把牌还给偶像好了hhh Fri Feb 3 19:07 白日梦 对假期的空闲时间并不满意..关键是doctor who 太好看了!!!!QAQ 学习学习还没学算法呢… apue有毒.. 下学期的课怎么办哎.. 比正常的多5门课.. 好方.. 然而还没做准备.. Sat Feb 4 21:30 白日梦 大晚上的被拉去种树靠外侧第二棵是兔子树, 第四棵是面包树2333 Mon Feb 6 22:31 白日梦 又约了大后天狼人杀wtf???好好学习呢??? Mon Feb 6 22:32 白日梦 大早上起来去中医院吃面, 然后步行回家给博客加了访客记录和显示今日访客人数的功能 Tue Feb 7 10:42 白日梦 和菜, 鱼 在湘东(黑人问号???)打羽毛球桌球然后吃牛排看电影乘风破浪由于对后会无期的印象去看的笑点get 到, 但是电影想要表达的却不太理解世界是不会变的要改变儿子, 让儿子读书当医生, 会用脚踹儿子脸的正太没有变要改变父亲, 让父亲不犯事的太浪没有变该发生的都会发生, 世界不会改变改变的是人心 看完电影出来鱼看到偶像给他发的消息= =!wtf Tue Feb 7 21:08 白日梦 白日梦很漫长的下午梦里我到西安某学校交换同寝室的还有两人，都是交换生其中一人是和女票一起来的他俩是青梅竹马我们四个人在西安玩了一个学期其中有一天，她男票正在拦出租车，她在我耳边低声说了些什么。交换快结束了，那天下午，她约我出来，我们面对面，我听到身后有人喊我，我回头，他用枪指着我，突然枪响，他倒下了，他身后是另一个室友。之后我带她走到了岔路口，我在另一个梦里来过，不止一次。面前有三条路，宽阔的大路，蜿蜒的小路，还有不太能称得上路的田间小路。三条路会在同一个地方汇合。我走过第一条路，重复单调，我走了很久以后搭班车返回了。我走过第三条路，是在田间，在河边，有一座跨河的桥，但是没人能上去。我曾经尝试过但是并不能成功。我拉着她往第二条路上走，她摇头，于是我们去了第三条路。她几乎就能上桥了，这时来了一群人，气势汹汹。下午我和她一起坐公交车回家，她坐在我前面，昏昏欲睡。突然一个急刹车，她抬头看到最后排空着，于是抓着扶手走了过去。她坐下后我也跟着过去了。我先下了车，到家已经天黑了。我应该坐28个小时火车才能到家的，车票还在我口袋里。我想拍下火车票发朋友圈，这时我被拉去玩狼人杀，13个人的局，我来了以后还差2人，是我的两个室友。 Wed Feb 8 19:02 白日梦 今天玩得乱七八糟…我只想当一匹隐狼啊..为什么都要查我…刘杨和小姨妈进步都好大..yty 每次都第一天出局2333下次不玩这么晚了, 每次都得让老妈开车来接… Fri Feb 10 00:05 白日梦 今天睡到中午才起床 啊 好害怕开学只有13天了下学期真是大挑战 May the force be with you. Fri Feb 10 13:20 ぼくら いつか 时が 过ぎて 仆ら若有一日岁月蹉跎ただの大人になったとしても我们变成了普普通通的大人今のままの このままの 自分でいられるかな？还能做现在的 这样的自己吗？ 心 折れて 梦に やぶれ经历心伤 经历梦碎ただの大人になったとしても我们变成了普普通通的大人今のままの こんなままの 自分でいられるかな？还能做现在的 这样的自己吗？ Fri Feb 10 13:32 白日梦 讲真读apue 会有敬畏和感动 Fri Feb 10 22:53 白日梦 成都 - 网易云 这才是成都 - 网易云 2333 两首歌里的成都, 和我见到的, 都是我向往的 Sat Feb 11 17:38 白日梦 doggy 居然为情所困..还是原来的那个人 Sun Feb 12 00:38 白日梦 如果计算机的能力足够, 也就不需要多线程这种复杂的东西.不需要去做优化可惜现实并不理想 Sun Feb 12 14:09 白日梦 昨天回瓶中逛然后和doggy又一次从步行街走到香溪美林希望他和lujia能好好的走下去 Mon Feb 13 12:30 白日梦 需要在满足锁需求的情况下, 在代码复杂性和性能之间找到正确的平衡. Mon Feb 13 21:21 白日梦 [乌云背后的幸福线]I’m married!So am I! 2333 Can you forgive? Are you any good at that? I opened up to you and you judged me. You are an asshole! You are an asshole! Mon Feb 13 23:09 白日梦 虽然apue 读了大半, 但是并没有觉得学到多少东西没有解决问题的愉悦感= = Wed Feb 15 16:28 白日梦 梦见自己在成都梦见自己在武功山的缆车上, 直线下落的, 好不刺激 几年前 这样的冬天 带着这样的困意 起床 打开征途 Thu Feb 16 08:13 白日梦 实习的时候总是觉得时间不够用呢练字都忘了 Wed Feb 22 20:42 白日梦 寒假最后一天和偶像看了极限特工 Wed Feb 22 20:43 白日梦 实习实习QAQ投了N多简历。。都石沉大海。。02-28 阿里 研发工程师【一面】02-28 LLS 软件开发工程师 深圳02-28 思叠科技 Linux软件和云计算网络工程师 成都02-28 睿初科技 软件测试实习生 深圳03-01 Intel Software Development Internship 北京03-01 tap4fun Web开发工程师 成都03-01 Camera360 软件测试实习生 成都03-02 创立科技 实习生（软件测试） 成都03-02 壹仟零壹夜 软件测试工程师 成都03-02 腾讯 软件开发-Web开发工程师 深圳 (一面 测试工程师)03-03 百词斩 测试实习生 成都03-03 上海数巧 Node.js开发工程师 上海03-03 OceanBase 开发工程师C++ 杭州03-04 中科研拓 Nodejs开发工程师 深圳03-04 华为 云计算开发工程师 深圳 (一面)03-04 华为 IT应用软件开发工程师 深圳03-05 Intel Software Development Internship 北京03-06 昆仑医生 nodejs开发方向实习生 北京03-06 Shopee 后端开发工程师 深圳03-07 成都思应科技中心 python开发实习生 成都03-07 海说科技 服务器实习生 成都 【面试通过】18628242424 袁03-07 艾德睿智 NODEJS开发实习生 北京 【面试通知】03-07 中科研拓 nodejs开发工程师 深圳 【面试邀请】03-07 网易杭州 C++开发工程师-音乐事业部 杭州03-07 联想服务 软件开发工程师03-07 搜狐 后台研发工程师 北京03-08 蚂蚁金服 分布式计算【一面】03-09 云巴 后端开发实习生 深圳 （hr妹子声音好听）03-10 饿了么 ?? 上海03-20 猎豹移动 研发工程师 北京03-21 广州江南科友 Linux C研发工程师 广州（offer get）03-21 搜狐 研发工程师 北京 白日梦 正学着C++ 突然来了蚂蚁金服的面试。。很慌。。除去之前成都某外包公司的面试，这应该是第一次正式的面试。。喵的都没有提前预约的。。问了C，linux和计网的东西。。然后做了一个链表求环的题，问了问项目。。感觉没一个答得完善的。。gggg算是涨经验吧。。面试官还是很nice的，尽量的让我来提出话题然后相应的提问。。复习复习计网～下次面试加油 Sat Mar 11 17:50 白日梦 uva210 明明可以跑。。居然超时。。醉了 白日梦 晚上正学着算法，来个电话，腾讯手机管家告诉我是广告推销，我给挂了。第三个进来接了，居然是阿里的面试。。。。？？？？？聊了大概50分钟 ，问了不少项目相关，然后问计网，数据结构，操作系统。。数据库啥都答不上来。。。估计。。gg最后面试官问我还有啥想问的，两次。。我说没啥要问的QAQ好像傻。。汲取经验。。加油 Tue Mar 14 00:36 白日梦 前两天去了东北五校招聘会，会场里挤满了人和动物。原本进去投了猎豹移动之后就回来，出来取了快递以后又回去逛了一圈，找找有没有成都的公司。（并没有啊QAQ）投了广州的江南科友，去笔试了一波。原本想的笔试筛选严格的话还可以考虑，没想到笔试一点都不考技术，hr也表现出公司对技术人员的不重视，宣讲没听完就回去了。今天实习动员会的时候又接到了这家个公司的电话，工资2400包住宿，拒绝。如果找不到合适的实习单位，不如考研吧。。你怎么看？ Thu Mar 23 23:46 白日梦 发现记录博客访问的服务失效登录vultr失败，于是把root密码改了然后重启ss和ip_record, 结果还是访问不了怀疑godaddy的域名出了问题，然后检查一波设置，ping也没问题然后查了ip_record的日志，发现是ipinfo的访问频率受限导致返回值不是JSON，程序崩溃。。太菜。。太菜。。 打了几天DNF。。逃避？ sher也找实习，偶像也投实习呢 Sun Mar 26 22:02 海边的曼彻斯特 I can’t beat it. Tue Mar 28 18:03 白日梦 自己是真的想要读研，还是想逃避工作续两年呢？ Wed Mar 29 14:52]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2016-白日梦]]></title>
      <url>%2F1970%2F01%2F01%2F2016-%E7%99%BD%E6%97%A5%E6%A2%A6%2F</url>
      <content type="text"><![CDATA[不如就此相忘于尘世间 Aug 白日梦：我坐在船上，船行在海上。还有鲸豚。我尝试着换了个方向行驶。船桅折了。Sun Aug 14 22:37 武功山：晚上7点，到了海拔1918m的金顶。在纸上写棍棍和兔子的名字，放进了云里。Tue Aug 16 17:25 摆渡人:崔斯坦没有消失。真是太好了。太好了。Tue Aug 16 21:48 白日梦:做了一个让我笑醒的梦好想和你说Thu Aug 18 22:19 浪矢杂货店:很多时候你一直都知道自己想要的是什么只是不敢承认所以我喜欢抛硬币来解决问题在抛出的一瞬间 答案就明了了Mon Aug 22 23:45 张家界心心念念的玻璃桥Sun Aug 28 15:19 Sep NCU走的时候没有向林純瓊老师道别真是有点遗憾呐Tue Sep 13 15:45 迅羽一年了羽毛想你啊Sun Sep 25 22:10 RE0雷姆雷姆剑圣剑鬼Mon Sep 26 11:00 Oct 白日梦假期白天不睡觉大挑战Wed Oct 5 16:23 十月兔子这里下雪了~Sat Oct 22 11:39 Nov 十一月没有工作日 没有休息日 没有万圣节只有两只蜂 计 和 编嗡嗡嗡嗡嗡嗡 ys收到村上春树的书了, 两年的约定兑现了呢.Tue Nov 1 23:00 科学的电磁炮yoooo Wed Nov 2 16:01 白日梦特别怀念在台湾那些闲散的时光有阳光和树影Thu Nov 3 11:29 白日梦从未知到一知半解是很容易的, 从一知半解再到已知却需要花费大量的精力.而人都会有规避危险的意识, 就像走在高压电箱前会停下, 因为怕被电到.于是就保持着一知半解的状态,止步不前.Fri Nov 11 14:34 白日梦プラスティックとレイン很想回去Sat Nov 12 19:04 大清早和00聊了会儿好久不见她貌似发生了什么事情希望她好起来吧Wed Nov 16 08:17 白日梦下午和清河阿尔法小溪跑车了兔子.好想你Fri Nov 18 20:15 雪Sat Nov 19 17:44 浮生未歇不如就此相忘于尘世间 Sun Nov 20 10:58 酱油昨天下午酱油找我帮他媳妇做题哼这家伙 和他媳妇还挺同步的真好啊然后然后我问他知不知道兔子在哪他居然不知道兔子是谁~(白痴兔hhh)然后告诉他是酱油他才知道2333他说他帮我问吧等他回复的时候, 我期待他问不到的. (真是奇怪)还是想等兔子告诉我啊等不到吧= =晚安Mon Nov 21 01:20 兔子,你在哪又下大雪了呢你那里呢Mon Nov 21 01:28 冷太冷了！！怎么可以这么冷Mon Nov 21 07:16 白日梦从游侠变成了黑棉好像又错过了呢Mon Nov 21 22:12 白日梦这学期头一回去网吧跑了两个小时第一太嗨了Tue Nov 22 23:59 云想到了一个能同步的方法~Mon Nov 28 08:35 白日梦一冲动又买了个没用的东西不过开心2333Mon Nov 28 15:18 白日梦感觉现在网易云音乐给每个人的推荐都一样我们已经被网易云养成啦~Mon Nov 28 18:05 白日梦曾经习以为常的日子现在满脑子都是它Tue Nov 29 09:22 Dec 白日梦那么多人都渐渐和你走散真是无奈Thu Dec 1 00:25 白日梦春困秋乏夏无力冬日正好眠Thu Dec 1 08:37 白日梦还是忍不住把机票买了ohhhh房间也在airbnb选好了Sun Dec 4 11:01 不能说的秘密从琴房到教室的距离一共一百零八步Sun Dec 4 22:07 白日梦这两天都是一睡一下午梦里面设计了一个游戏然后一直在和室友聊盈利模式奇怪的梦Mon Dec 5 16:27 白日梦原来这么多年握笔的方法都是错的啊哼╭(╯^╰)╮ 握笔口诀如下：—抵二压三衬托，指实掌虚腕灵活，角度适宜方向正，笔画轻重细琢磨。 虽然换了握笔方式之后感觉使不出劲 = =但是写‘七‘字的那一长划比原来好写了诶 最喜欢写’至‘字了 Tue Dec 6 19:53 白日梦这个梦。。梦里我和兔子坐在一张圆桌边，还有其他人要分开了就像小学时同桌要调座位那样分开在梦里哭得好难受 Wen Dec 7 05:47 白日梦 “人总是要分的，而且还会越分越远，见不着面，摸不着人，想得你抓心饶肝的，可是咱也在长啊，个越来越高，能耐越来越大，到时候想见谁就见谁，总有一天你会发现，从天南到海北就是一抬腿的距离。” Wen Dec 7 05:55 云免流 通过服务器代理，把所有的请求都发到服务器137或者138端口，使运营商对这些流量不计费。这么简单就能有无限免费流量的方法，能用多久呢？脑补吾王偏头已经不想再用wifi 了(〃’▽’〃) Sun Dec 12 14:48 白日梦 学习docker简直是打开了新世界的大门~ Thu Dec 15 09:41 白日梦 TGG 决赛恭喜博哥又拿到一个冠军~ Sat Dec 17 22:29 圣女贞德 「哦，上帝创造了这美丽的尘世。可是，什么时候这人间才能准备好，迎接您的圣徒们呢？还要多久啊。哦，主啊，还要多久啊？」 摘自：《圣女贞德》 — 〔英〕萧伯纳 Sun Dec 18 00:24 白日梦 全班日租房狼人杀火影火锅还有学了四川麻将(*￣︶￣) 嗨呀 Mon Dec 19 02:09 白日梦 We were 10 and cute,we are 30 and angry. Mon Dec 19 13:29 白日梦 宜宾到萍乡的学生票居然不让取白跑一趟火车站 =.= 更新：第二次去拿到啦2333 Wed Dec 21 16:43 Christmas 昨晚是平安夜。。。请警长决定发言顺序~~ Sun Dec 25 19:07 白日梦 一二月份是大二上，还在恋爱期，每天逃课，吃串串香，逛凯德。直到放假发生那件事。春夏在台湾‘度假’；认识了很可爱的人。回来以后沈阳实习，分手。暑假，浑浑噩噩，无迹可寻。再开学已经是大三，考研的考研，比赛的比赛，不知不觉已被人落下了许多。几次想要补修课程，不得。罢了，好好的学这学期的课吧，希望期末能有个好成绩。圣诞节也没有想问候的人了。过什么节也和我没有关系。过我自己的便是了。这一年越来越反感社交，不愿和人聊天，不愿去保持一段关系。就算是qq 聊天也生怕说错话，聊天框里的字打了又删，哎，还是发表情吧^_^ 放假是打算去宜宾的但是还没给自己找到理由啊，只是想去。会不会打扰兔子呢不知道不要告诉她吧已经半年了啊，还是很想她的。可是这么冒然的过去只是为了自己的话，很自私吧 明年怎么办呐要准备考研吗下学期我还得补修五门课呢，会很忙，没有时间准备考研的说到底我是不愿意考研可是为什么不喜欢继续在学校学习，还是害怕为考研付出努力 如果不考研的话实习吧，目前的技术栈也就是前端-react-后端-nodejs，apue 才看一点根本派不上用场。可能只能做前端了，可是并不喜欢= =尴尬 这日子过地这么纠结呢= = 还是有好的事情的啊！ 对linux，网络的了解加深 网站，爬虫，小工具什么的做了不少 将拿到第一个项目的3000块 能去宜宾玩呀，吃四川火锅～燃面～猪儿耙～ 写字帖成了习惯，谢谢兔子呢（虽然实际写的字还是不好看QAQ） 有喜欢的巧克力，domori chuao 70%，royce 生巧 呐 好好复习过个愉快的寒假吧～ 最后一个哟 Mon Dec 26 00:00 白日梦 一个学妹晨练打卡不够，重修什么的会影响去台湾交换啊然后帮她改了打卡次数呐 祝你明年在台湾玩的开心～ Tue Dec 27 21:14 白日梦 又是一个奇怪的梦跨江大桥，没有云，没有风，一张小板凳，兔子坐在左边，我坐在右边。聊了很久，然后我们从一头走到另一头。 Wed Dec 28 09:38 白日梦 考完了服务学，编译还没出成绩。这几天都不能静下心来，无论做什么事。像是刚住进树洞里的人，只能抬头看鸟儿飞过，看日出日落。 Wed Dec 28 21:19 白日梦 在断头台上，死刑犯是不想死的，但是呢，他又得期望刽子手能一刀致命，要不然还得来第二下。oh Wed Dec 28 21:50 白日梦 小孩子才会有错过和扭捏 Wed Dec 28 22:13 白日梦 晚上在教室看完了《局外人》出来买了一瓶阿萨姆奶茶，是热的诶~出致知楼的时候看见雪花在灯光照射下blin blin 的闪 Wed Dec 28 22:47 白日梦 付出了一个月心血的编译实验，最后答辩给0 分呢 Thu Dec 39 16:54 白日梦 梦见自己到超市买馒头，购物篮塞的好满好满，乐得笑出声然后笑醒了QAQ？！ Fri Dec 30 16:28 白日梦 诶？！看兔子的信息的时候点到申请好友了？？！！QAQ Sat Dec 31 23:23 白日梦 17 年咯随意的定下三个应该大概可能会实现的小目标～ 练字 阅读两本英文小说 用c或者c++写一个高性能的http 代理服务器 Sun Jan 1 09:28]]></content>
    </entry>

    
  
  
</search>
